Index: api/src/main/java/org/apache/cxf/common/jaxb/JAXBContextCache.java
===================================================================
--- api/src/main/java/org/apache/cxf/common/jaxb/JAXBContextCache.java	(revision 1447983)
+++ api/src/main/java/org/apache/cxf/common/jaxb/JAXBContextCache.java	(working copy)
@@ -47,13 +47,54 @@
 /**
  * 
  */
-public final class JAXBContextCache {
+public final class JAXBContextCache {  
+    
+    /**
+     * Return holder of the context, classes, etc...
+     * Do NOT hold onto these strongly as that can lock the JAXBContext and Set<Class> objects
+     * into memory.  It preferred to grab the context and classes (if needed) from this object
+     * immediately after the call to getCachedContextAndSchemas and then discard it.  The
+     * main purpose of this class is to hold onto the context/set strongly until the caller 
+     * has a chance to copy those into a place where they can hold onto it strongly as
+     * needed.
+     */
     public static final class CachedContextAndSchemas {
-        private WeakReference<JAXBContext> context;
-        private WeakReference<Set<Class<?>>> classes;
+        private final JAXBContext context;
+        private final Set<Class<?>> classes;
+        private final WeakReference<CachedContextAndSchemasInternal> ccas;
+        private CachedContextAndSchemas(CachedContextAndSchemasInternal i) {
+            classes = i.getClasses();
+            context = i.getContext();
+            ccas = new WeakReference<CachedContextAndSchemasInternal>(i);
+        }
+        public JAXBContext getContext() {
+            return context;
+        }
+        public Set<Class<?>> getClasses() {
+            return classes;
+        }
+        public Collection<DOMSource> getSchemas() {
+            CachedContextAndSchemasInternal i = ccas.get();
+            if (i != null) {
+                return i.getSchemas();
+            }
+            return null;
+        }
+
+        public void setSchemas(Collection<DOMSource> schemas) {
+            CachedContextAndSchemasInternal i = ccas.get();
+            if (i != null) {
+                i.setSchemas(schemas);
+            }
+        }
+        
+    }
+    private static final class CachedContextAndSchemasInternal {
+        private final WeakReference<JAXBContext> context;
+        private final WeakReference<Set<Class<?>>> classes;
         private Collection<DOMSource> schemas;
 
-        CachedContextAndSchemas(JAXBContext context, Set<Class<?>> classes) {
+        CachedContextAndSchemasInternal(JAXBContext context, Set<Class<?>> classes) {
             this.context = new WeakReference<JAXBContext>(context);
             this.classes = new WeakReference<Set<Class<?>>>(classes);
         }
@@ -64,10 +105,7 @@
         public Set<Class<?>> getClasses() {
             return classes.get();
         }
-        public void setClasses(Set<Class<?>> cls) {
-            classes = new WeakReference<Set<Class<?>>>(cls);
-        }
-        
+
         public Collection<DOMSource> getSchemas() {
             return schemas;
         }
@@ -75,10 +113,10 @@
         public void setSchemas(Collection<DOMSource> schemas) {
             this.schemas = schemas;
         }
-    } 
+    }   
     
-    private static final Map<Set<Class<?>>, CachedContextAndSchemas> JAXBCONTEXT_CACHE
-        = new CacheMap<Set<Class<?>>, CachedContextAndSchemas>();
+    private static final Map<Set<Class<?>>, CachedContextAndSchemasInternal> JAXBCONTEXT_CACHE
+        = new CacheMap<Set<Class<?>>, CachedContextAndSchemasInternal>();
 
     private static final Map<Package, CachedClass> OBJECT_FACTORY_CACHE
         = new CacheMap<Package, CachedClass>(); 
@@ -141,14 +179,14 @@
         if (props != null) {
             map.putAll(props);
         }
-        CachedContextAndSchemas cachedContextAndSchemas = null;
+        CachedContextAndSchemasInternal cachedContextAndSchemas = null;
         JAXBContext context = null;
         if (typeRefs == null || typeRefs.isEmpty()) {
             synchronized (JAXBCONTEXT_CACHE) {
                 if (exact) {
                     cachedContextAndSchemas = JAXBCONTEXT_CACHE.get(classes);
                 } else {
-                    for (Map.Entry<Set<Class<?>>, CachedContextAndSchemas> k : JAXBCONTEXT_CACHE.entrySet()) {
+                    for (Map.Entry<Set<Class<?>>, CachedContextAndSchemasInternal> k : JAXBCONTEXT_CACHE.entrySet()) {
                         Set<Class<?>> key = k.getKey();
                         if (key != null && key.containsAll(classes)) {
                             cachedContextAndSchemas = k.getValue();
@@ -162,7 +200,7 @@
                         JAXBCONTEXT_CACHE.remove(cachedContextAndSchemas.getClasses());
                         cachedContextAndSchemas = null;
                     } else {
-                        return cachedContextAndSchemas;
+                        return new CachedContextAndSchemas(cachedContextAndSchemas);
                     }
                 }
             }
@@ -189,15 +227,15 @@
                     throw ex;
                 }
             }
-            cachedContextAndSchemas = new CachedContextAndSchemas(context, classes);
-            synchronized (JAXBCONTEXT_CACHE) {
-                if (typeRefs == null || typeRefs.isEmpty()) {
-                    JAXBCONTEXT_CACHE.put(classes, cachedContextAndSchemas);
-                }
+        }
+        cachedContextAndSchemas = new CachedContextAndSchemasInternal(context, classes);
+        synchronized (JAXBCONTEXT_CACHE) {
+            if (typeRefs == null || typeRefs.isEmpty()) {
+                JAXBCONTEXT_CACHE.put(classes, cachedContextAndSchemas);
             }
         }
 
-        return cachedContextAndSchemas;
+        return new CachedContextAndSchemas(cachedContextAndSchemas);
     }
     
     private static boolean checkObjectFactoryNamespaces(Class<?> clz) {
