
import org.apache.tools.ant.filters.ReplaceTokens
import groovy.json.*

// Set the generated zip version to the buildID.
// tasks.gradle file where this task is defined
// can't see the bnd property because it isn't
// a bundle.
parent.zipOpenLiberty.setProperty("version", bnd.buildID)

task copyPropertiesToBuildImage (type:Copy) {
    dependsOn jar
    from "${projectDir}/publish/"
    into "${projectDir}/wlp/lib/versions/"
    include '*.properties'
    filter(ReplaceTokens,
           tokens: [PRODUCT_VERSION: bnd.libertyRelease, PRODUCT_EDITION: bnd.productEdition, PRODUCT_LICENSE_TYPE: bnd.productLicenseType])
}

task copyReadmeToBuildImage (type:Copy) {
    dependsOn jar
    from "${projectDir}/publish/"
    into "${projectDir}/wlp/"
    include 'README.TXT'
    filter(ReplaceTokens,
           tokens: [BUILD_ID: bnd.buildID, LIBERTY_VERSION: bnd.libertyRelease])
}

task copyGeneratedToBuildImageBinTools (type:Copy) {
    dependsOn jar
    from "${projectDir}/wlp/lib/"
    into "${projectDir}/wlp/bin/tools/"
    include 'bootstrap-agent.jar'
    rename 'bootstrap-agent.jar', 'ws-javaagent.jar'
}

task copyGeneratedToCnfLib (type:Copy) {
    dependsOn jar
    from "${projectDir}/wlp/dev/api/spec/"
    into "${rootDir}/${bnd_cnf}/lib/"
    include 'com.ibm.ws.org.osgi.core.6.0.0_*.jar'
    rename '.*.jar', 'osgi.core.jar'
}

assemble {
    dependsOn copyPropertiesToBuildImage
    dependsOn copyReadmeToBuildImage
    dependsOn copyGeneratedToBuildImageBinTools
    dependsOn copyGeneratedToCnfLib
}

clean.doLast {
    file('wlp').deleteDir()
    file('build').deleteDir()
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId 'openliberty'
            version project.version
            artifact parent.zipOpenLiberty
        }
    }
}

task createJSONForPublicArtifacts {
    dependsOn parent.zipOpenLiberty
    enabled isAutomatedBuild

    doLast {
        def props = new Properties()
        file("${rootDir}/generated.properties").withInputStream { props.load(it) }

        // Create JSON descriptor
        delete "${buildDir}/info.json"
        File json = new File("${buildDir}/info.json")
        json.createNewFile()

        String testsPassed = "0"
        if (props.getProperty("tests.total.successful") != null) {
            testsPassed = props.getProperty("tests.total.successful")
        }
        String testsTotal = "0"
        if (props.getProperty("tests.total.count") != null) {
            testsTotal = props.getProperty("tests.total.count")
        }

        String junitPath = props.getProperty("junit.report.zip")
        String logPath = props.getProperty("bintray.gradle.log")
        assert junitPath != null
        assert logPath != null
        String testResultName = new File(junitPath).getName()
        String logName = new File(logPath).getName()

        json.text = JsonOutput.prettyPrint(JsonOutput.toJson([test_passed: "${testsPassed}",
                                           total_tests: "${testsTotal}",
                                           tests_log: "${testResultName}",
                                           build_log: "${logName}",
                                           driver_location: "${parent.zipOpenLiberty.archiveName}"]))

        props.setProperty('zipopenliberty.archivename', parent.zipOpenLiberty.archivePath.toString())
        props.setProperty('bintray.json', json.toString())

        // Store props to file
        File propsFile = new File('generated.properties')
        props.store(propsFile.newWriter(), null)
    }
}

buildscript {
    repositories {
        def props = new Properties()
        file("${rootDir}/generated.properties").withInputStream { props.load(it) }
        if (usrHomeProps.exists() && !props.getProperty('artifactory.force.external.repo')) {
            maven {
                credentials {
                    username props.getProperty("artifactory.download.user")
                    password props.getProperty("artifactory.download.token")
                }
                url ("https://" + props.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
            }
        } else {
            jcenter()
        }
    }

    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
        classpath 'org.hidetake:groovy-ssh:2.9.0'
        classpath 'com.jcraft:jsch:0.1.54'
    }
}

apply plugin: 'org.hidetake.ssh'

remotes {
    dhe {
        def props = new Properties()
        file("${rootDir}/generated.properties").withInputStream { props.load(it) }

        host = props.getProperty("dhe.server")
        user = props.getProperty("dhe.id")
        password = props.getProperty("dhe.pw")
        knownHosts = allowAnyHosts
    }
}

ssh.settings {
    jschLog = true
    fileTransfer = "scp"
}

task publishPublicArtifactsOnDhe {
    dependsOn createJSONForPublicArtifacts
    enabled isAutomatedBuild && reallyPublishPublically

    doLast {
        def props = new Properties()
        file("${rootDir}/generated.properties").withInputStream { props.load(it) }

        // Re-arrange buildLabel, ex: 201708101600 to 2017-08-10_1600
        def (yr, mo, d, t) = [bnd.buildLabel.substring(0,4), bnd.buildLabel.substring(4,6), bnd.buildLabel.substring(6,8), bnd.buildLabel.substring(8)]
        String version = "${yr}-${mo}-${d}_${t}"
        String packageName = (isRelease ? props.getProperty("bintray.package.release") : props.getProperty("bintray.package.nightly"))
        String userAtHost = props.getProperty("dhe.id") + "@" + props.getProperty("dhe.server")
        String dir = "/www/stage/export/pub/software/openliberty/runtime"
        String dest = userAtHost + ":" + dir

        def artifactList = [props.getProperty("bintray.json"),
                            props.getProperty("bintray.gradle.log"),
                            props.getProperty("junit.report.zip")]

        if (isContinuousBuild || isRelease) {
            artifactList.add(props.getProperty("zipopenliberty.archivename"))
        }

        mkdir("${buildDir}/${version}")
        artifactList.each { filePath ->
            copy {
                from filePath
                into "${buildDir}/${version}"
            }
        }

        // Upload build artifacts
        ssh.run {
            session(remotes.dhe) {
                put from: "${buildDir}/${version}", into: "${dir}/${packageName}/"
            }
        }

        delete "${buildDir}/${version}"
        delete "${buildDir}/info.json"

        // Update build listing json with the newly uploaded build
        try {
            ssh.run {
                session(remotes.dhe) {
                    get from: "${dir}/${packageName}/info.json", into: "${buildDir}"
                }
            }
        } catch (org.hidetake.groovy.ssh.session.BadExitStatusException e) {
            // It is okay if the file doesn't exist because we will create a new file.
        }

        ant.touch(file: "${buildDir}/info.json")
        File json = new File("${buildDir}/info.json")
        def object = [:]
        if (json.getText() != null && json.getText() != "") {
            object = new JsonSlurper().parseText(json.getText())
        }

        List versionsList = object['versions']
        if (versionsList != null) {
            versionsList.add("${version}")
        } else {
            versionsList = ["${version}"]
        }
        object['versions'] = versionsList
        json.text = JsonOutput.toJson(object)

        ssh.run {
            session(remotes.dhe) {
                put from: "${buildDir}/info.json", into: "${dir}/${packageName}/"
            }
        }
    }
}
publish.dependsOn publishPublicArtifactsOnDhe

task publishPublicArtifacts {
    dependsOn createJSONForPublicArtifacts
    enabled isAutomatedBuild && reallyPublishPublically

    doLast {
        def props = new Properties()
        file("${rootDir}/generated.properties").withInputStream { props.load(it) }

        String bintrayUser = props.getProperty("bintray.user")
        String bintrayApikey = props.getProperty("bintray.apikey")

        // Re-arrange buildLabel, ex: 201708101600 to 2017-08-10_1600
        def (yr, mo, d, t) = [bnd.buildLabel.substring(0,4), bnd.buildLabel.substring(4,6), bnd.buildLabel.substring(6,8), bnd.buildLabel.substring(8)]
        String version = "${yr}-${mo}-${d}_${t}"
        String packageName = (isRelease ? props.getProperty("bintray.package.release") : props.getProperty("bintray.package.nightly"))
        String bintrayREST = "https://api.bintray.com/content/" + props.getProperty("bintray.organization") + "/" + props.getProperty("bintray.repository") + "/${packageName}/${version}/"

        // Upload files using REST API https://api.bintray.com/content/:subject/:repo/:package/:version/${packageName}/${version}
        exec {
            commandLine "curl", "-T", props.getProperty("bintray.json"), "-u${bintrayUser}:${bintrayApikey}", bintrayREST + "${packageName}/${version}/"
        }
        exec {
            commandLine "curl", "-T", props.getProperty("bintray.gradle.log"), "-u${bintrayUser}:${bintrayApikey}", bintrayREST + "${packageName}/${version}/"
        }
        exec {
            commandLine "curl", "-T", props.getProperty("junit.report.zip"), "-u${bintrayUser}:${bintrayApikey}", bintrayREST + "${packageName}/${version}/"
        }
        if (isContinuousBuild) {
            exec {
                commandLine "curl", "-T", props.getProperty("zipopenliberty.archivename"), "-u${bintrayUser}:${bintrayApikey}", bintrayREST + "${packageName}/${version}/"
            }
        }

        // Publish using REST API https://api.bintray.com/content/:subject/:repo/:package/:version/publish
        exec {
            commandLine "curl", "-X", "POST", "-u${bintrayUser}:${bintrayApikey}", bintrayREST + "publish"
        }
    }
}
//publish.dependsOn publishPublicArtifacts
