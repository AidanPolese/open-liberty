<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2017 IBM Corporation and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
        IBM Corporation - initial API and implementation
 -->

<project name="build.test.image" default="clean">
  <property name="upload.group" value="Test Images" />

  <import file="../ant_build/public_imports/image_imports.xml" />

  <property name="image.output.dir" value="output" />
  <property name="file.to.upload" value="test-dependencies.zip" />
  <property name="file.label"
            value="Binaries from Liberty projects (required for test dependencies)" />

  <target name="clean" description="clean up">
    <delete dir="${image.output.dir}" />
    <delete dir="build" />
  </target>

  <target name="createImage" depends="buildImage, upload" />


  <target name="buildImage">

    <!-- Create the build directory structure used to create image -->
    <mkdir dir="${image.output.dir}" />
    <var name="liberty.image.folder.name" unset="true" />
    <basename file="${liberty.image.dir}"
              property="liberty.image.folder.name" />

    <property name="magic.string" value="^([^/]*)/(lib|publish|resources|build)/?.*"/>
    
    <zip destfile="${image.output.dir}/test-dependencies.zip">
      <!-- Tests do have some dependencies on our mainline projects. We could do a mapping from .classpath entries referencing
      other projects to /dev/spi jars, but that's hard, so just scoop up anything that claims to export an api,
      or be a 'normal' built project, or to be a noship project.-->
      <fileset dir="${basedir}/..">
        <include name="*/publish/**" />
        <include name="*/lib/**" />
        <include name="*/resources/**" />
        <exclude name="*/resources/OSGI-INF"/>
        <include name="*/build/classes*/**" />
        <include name="*/build/lib/**" />
        <!-- The install code builds the ciklauncher outside of the lib dir, so add it explicitly -->
        <include name="*/build/cik.launcher/**" />
        <!-- Grab non-java and non-nlsprops source files -->
        <include name="*/src/**" />
        <exclude name="*/src/**/*.nlsprops" />
        <exclude name="*/src/**/*.java" />
        <!-- Special case kernel jars, which tests read -->
        <include name="*kernel*/build/lib/**" />
        <include name="*/build/test-application*/**" />
        <!-- The net effect of this deep-ant-magic selector is to select anything whose root folder
             contains a build.xml, build-api-spi.xml, build-noship.xml, build-iwd-plugin.xml or build-packageutils.xml 
             file. The 'present' task is normally used to compare two directories, but is here being used to compare 
             a directory to a different, static, position in itself (via the mapper). -->
        <not>
          <and>
            <present targetdir="${basedir}/.." present="srconly">
              <mapper type="regexp"
                      from="${magic.string}"
                      to="\1/build.xml" />
            </present>
            <present targetdir="${basedir}/.." present="srconly">
              <mapper type="regexp"
                      from="${magic.string}"
                      to="\1/build-api-spi.xml" />
            </present>
            <present targetdir="${basedir}/.." present="srconly">
              <mapper type="regexp"
                      from="${magic.string}"
                      to="\1/build-noship.xml" />
            </present>
            <present targetdir="${basedir}/.." present="srconly">
              <mapper type="regexp"
                      from="${magic.string}"
                      to="\1/build-iwd-plugin.xml" />
            </present>
            <!-- Also include the repositoryUploadUtilities.jar JAR as the repository FAT tests aren't really FAT tests but IVTs but it is 
                 better running them in the FAT framework but in order to do this they need to copy in the code under test in the form of
                 that JAR.  Currently this will just make the output of com.ibm.ws.massive.upload be added in the test-dependencies.zip file.-->
            <present targetdir="${basedir}/.." present="srconly">
              <mapper type="regexp"
                      from="${magic.string}"
                      to="\1/build-packageutils.xml" />
            </present>
          </and>
        </not>
      </fileset>

<!-- Do the same thing for .classpath files -->
      <fileset dir="${basedir}/..">
        <include name="*/.classpath" />
        <not>
          <and>
            <present targetdir="${basedir}/.." present="srconly">
              <mapper type="regexp"
                      from="^(.*)/.classpath"
                      to="\1/build.xml" />
            </present>
            <present targetdir="${basedir}/.." present="srconly">
              <mapper type="regexp"
                      from="^(.*)/.classpath"
                      to="\1/build-api-spi.xml" />
            </present>
            <present targetdir="${basedir}/.." present="srconly">
              <mapper type="regexp"
                      from="^(.*)/.classpath"
                      to="\1/build-noship.xml" />
            </present>
          </and>
        </not>
      </fileset>

    </zip>
  </target>
</project>
