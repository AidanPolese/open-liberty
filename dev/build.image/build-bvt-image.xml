<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2017 IBM Corporation and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
        IBM Corporation - initial API and implementation
 -->

<project name="build.bvt.image" default="clean">
  <property name="upload.group" value="Test Images" />

  <import file="../ant_build/public_imports/image_imports.xml" />

  <property name="image.output.dir" value="output" />
  <property name="file.to.upload"
            value="autoBVT.zip,liberty-image-for-bvt.zip" />
  <property name="file.label"
            value="Liberty image for asynchronous BVT execution" />

  <target name="clean" description="clean up">
    <delete dir="${image.output.dir}" />
    <delete dir="build" />
  </target>

  <target name="createImage" depends="buildImage, upload" />


  <target name="buildImage">

    <!-- Create the build directory structure used to create image -->
    <mkdir dir="${image.output.dir}" />
    <var name="liberty.image.folder.name" unset="true" />
    <basename file="${liberty.image.dir}"
              property="liberty.image.folder.name" />

    <!-- Zip up the image, including the build folder of any folder which includes a build-bvt.xml -->
    <zip destfile="${image.output.dir}/autoBVT.zip">
      <!-- The net effect of this deep-ant-magic fileset is to select anything whose root folder
          contains a build-bvt.xml. The 'present' task is normally used to compare
          two directories, but is here being used to compare a directory to a different, static, position in itself
          (via the mapper).
          BVTs also store generated files in the publish folders, so we need to send those across too.-->
      <fileset dir="${basedir}/..">
        <include name="*/lib/**" />
        <include name="*/test-applications/**" />
        <include name="*/test data/**" />
        <!-- Only include things whose root folder includes a build-bvt.xml -->
        <not>
          <present targetdir="${basedir}/.." present="srconly">
            <mapper type="regexp"
                    from="^(.*)/(lib|test-applications|test data)/?.*"
                    to="\1/build-bvt.xml" />
          </present>
        </not>
      </fileset>
      <!-- We need to do the build folders in a different fileset or we don't pick up build/lib, because 
      build/lib doesn't have a sibling build-bvt.xml -->
      <fileset dir="${basedir}/..">
        <include name="*/build/**" />
        <!-- Only include things whose root folder includes a build-bvt.xml -->
        <not>
          <present targetdir="${basedir}/.." present="srconly">
            <mapper type="regexp"
                    from="^(.*)/build/?.*"
                    to="\1/build-bvt.xml" />
          </present>
        </not>
      </fileset>
      <!-- Similarly, we need to do the publish folders in a different fileset or we don't pick up publish/lib, because 
      publish/lib doesn't have a sibling build-bvt.xml -->
      <fileset dir="${basedir}/..">
        <include name="*/publish/**" />
        <!-- Only include things whose root folder includes a build-bvt.xml -->
        <not>
          <present targetdir="${basedir}/.." present="srconly">
            <mapper type="regexp"
                    from="^(.*)/publish/?.*"
                    to="\1/build-bvt.xml" />
          </present>
        </not>
      </fileset>


      <!-- Don't forget classpath files -->
      <fileset dir="${basedir}/..">
        <include name="*/.classpath" />
        <!-- Only include things whose root folder includes a build-bvt.xml -->
        <not>
          <present targetdir="${basedir}/.." present="srconly">
            <mapper type="regexp"
                    from="^(.*)/.classpath"
                    to="\1/build-bvt.xml" />
          </present>
        </not>
      </fileset>

      <!-- These files we can pick up without checking what else is in the directory, because they have bvt in the name. 
      They need to go in their own fileset or it breaks the mapping of the earlier fileset -->
      <fileset dir="${basedir}/..">
        <include name="*/bvt/test*/**" />
        <include name="*/build-bvt.xml" />
        <include name="*/*-bvt.xml" />
        <include name="*/bvt*.xml" />
        <!-- Some tests store the tests in the lib folder and don't copy it elsewhere in the build phase -->
        <include name="*/bvt-bundle/lib/**" />
      </fileset>

      <!-- This makes me want to cry, but the stub bootstrapping.properties file gets copied from test_prereqs
      to fattest.simplicity as part of the compile phase, so in order to have the right file on the other side 
      we need to grab it from fattest.simplicity (to support BVTs which use the FAT framework) -->
      <fileset dir="${basedir}/..">
        <include name="fattest.simplicity/autoFVT-defaults/*properties" />
      </fileset>

      <!-- The maven tests need this folder in order to succeed -->
      <fileset dir="${basedir}/..">
        <include name="com.ibm.websphere.wlp.maven.prereq/**" />
      </fileset>

      <!-- The maven test projects have an unusual structure and distribute poms they need through various folders, 
      so just grab the lot.  -->
      <fileset dir="${basedir}/..">
        <include name="*maven*test/**" />
      </fileset>
    </zip>

    <!-- Also include the image we're going to be testing against. For BVT, this is just the current 
       contents of build.image/wlp
       (is this even needed or could we use an existing image like the convenience zip?) -->
    <zip destfile="${image.output.dir}/liberty-image-for-bvt.zip">
      <fileset dir="${basedir}/../${liberty.image.folder.name}/">
        <include name="${install.name}/**" />
      </fileset>
    </zip>
  </target>
	
</project>
