<?xml version="1.0" encoding="UTF-8"?>
<project name="build.image" default="buildImage">
  <import file="../ant_build/public_imports/image_imports.xml" />
  <import file="macros.xml" />

  <generateClassPath type="${build.type}">
    <!-- Jar excludes only apply in the unittest build phase -->
    <exclude jar="com.ibm.org.objectweb.asm_2.2.2.jar" />
  </generateClassPath>

  <property name="file.local.dir" value="output" />
  <property name="files.to.upload.zos.embeddable" value="${install.name}-embeddable-zos-${buildLabel}.zip=z/OS Embedder Image,${install.name}-embeddable-signed-config-zos-${buildLabel}.zip=z/OS Embedder Image With Configuration Signing" />
  <property name="files.to.upload.zos" value="${install.name}-zos-kernel-${buildLabel}.zip=Base kernel image for IM installs on z/OS,${install.name}-zos-core-${buildLabel}.zip=Base image for IM installs on z/OS,${install.name}-beta-zos-${liberty.beta.version}.zip=z/OS Beta Image,${install.name}-zos-all-${buildLabel}.zip=z/OS All Image" />
  <property name="files.to.upload" value="${install.name}-${buildLabel}.zip=${install.name} zipped image (a convenience but not our actual product deliverable),${files.to.upload.zos},${files.to.upload.zos.embeddable}" />
  <property file="${install.name}/lib/versions/WebSphereApplicationServer.properties" />
  <property file="${server.path}/build.properties" />
  <property name="dhe.repo.build.basedir" value="${build.dir}/tmp/archives/repo" />
  <property name="dhe.repo.root.path" value="/wasdev/downloads" />
  <property name="dhe.repo.external.path" value="/wasdev/external" />
  <!-- Setting the dhe_repo version to the service version for now because it is only used for developers edition. -->
  <property name="dhe.repo.archive.dir" value="${dhe.repo.build.basedir}/${liberty.service.version}${dhe.repo.root.path}/wlp/${liberty.service.version}" />
  <!-- We don't want the directory the beta ESAs go to changing every beta so use the word "beta" rather than the beta version -->
  <property name="dhe.repo.beta.archive.dir" value="${dhe.repo.build.basedir}/beta${dhe.repo.root.path}/wlp/beta" />
  <property name="dhe.repo.license.dir" value="${dhe.repo.archive.dir}/lafiles/" />
  <property name="dhe.repo.license.dir.path" value="/wlp/${liberty.service.version}/lafiles/" />
  <property name="download.xml.output.file" value="${liberty.image.output.upload.dir}/${dhe.download.xml.file.name}" />

  <target name="clean" description="clean up">
    <delete dir="${file.local.dir}" />
    <delete dir="${install.name}" />
    <delete dir="build" />
  </target>

  <target name="mvt" description="Run MVT for all editions and profiles">
    <startActivity label="Running MVT" id="mvt.activity" autoComplete="false" />

    <!-- get a dirset for of all the editions -->
    <dirset id="editions" dir="editions">
      <depth max="0" min="0" />
    </dirset>

    <foreach param="editionDir" in="editions">
      <local name="edition" />
      <basename property="edition" file="${editionDir}" />

      <!-- local and load the edition properties to use them only for this one call.
               This cannot be moved to its own macro because the scope of the properties is lost. -->
      <local name="product.edition" />
      <local name="license.type" />
      <local name="archive.name" />
      <local name="default.archive.name" />
      <local name="add.to.download.xml" />
      <local name="build.always" />
      <local name="extra.package.options" />
      <local name="build.repo.metadata" />
      <local name="repo.name" />
      <local name="repo.shortDescription" />
      <local name="repo.downloadURL" />
      <local name="repo.longDescription" />
      <local name="edition.version" />
      <local name="display.edition.version" />
      <local name="dhe.license.path" />
      <local name="build.web.license" />
      <property file="${editionDir}/runtime.properties" />

      <echo message="Running MVT for ${edition}" />
      <iff>
        <available file="editions/${edition}/mvt.txt" />
        <then>
          <mvt installimage="${liberty.image.output.upload.dir}/${install.name}-${edition}-runtime-${edition.version}.jar" rootdir="${install.name}" encoding="UTF-16" inputfile="editions/${edition}/mvt.txt" />
        </then>
        <else>
          <echo message="Skipping MVT for ${edition} because there is no editions/${edition}/mvt.txt file." />
        </else>
      </iff>

      <echo>Running addonMVT for ${edition}</echo>
      <fileset id="addons" dir="${editionDir}" includes="*.addonmvt.properties" />
      <foreach param="addOnProperties" in="addons">
        <echo>Found addon MVT file ${addOnProperties}</echo>

        <!-- extract the file name and then extract the bit before the xml file -->
        <local name="addonProperties" />
        <local name="addonFile" />
        <basename property="addonFile" file="${addOnProperties}" suffix=".addonmvt.properties" />
        <echo>addon file is ${addonFile}</echo>

        <addonMVT addonPropertiesFile="${editionDir}/extended.properties" installImage="${liberty.image.output.upload.dir}/${install.name}-${edition}-runtime-${edition.version}.jar" rootDir="${install.name}" encoding="UTF-16" inputfile="${addOnProperties}" addonName="${addonFile}" edition="${edition}" testName="mvt.addon.${edition}.${addonFile}" />
      </foreach>
    </foreach>

    <!-- If we're creating the IM repo, or the full license zips, we will have built ESAs so we should mvt them -->
    <iff>
      <or>
        <istrue value="${create.im.repo}" />
        <istrue value="${build.license.zip}" />
      </or>
      <then>
        <mkdir dir="build/reports/mvt" />

        <!-- Check that a sampling of the non-ND product ESAs have the featureTerms agreement -->
        <esaMvtCheck dir="${dhe.repo.archive.dir}" criteriaFile="mvt/esas/coreFeatureTerms.properties" junitResult="${report.dir}/mvt/standardEsas.xml">
          <include name="*servlet*.esa" />
          <exclude name="com.ibm.websphere.appserver.sip*" />
        </esaMvtCheck>
        <publishJUnitLog filePath="${report.dir}/mvt/standardEsas.xml" isFat="false" />
        <esaMvtCheck dir="${dhe.repo.archive.dir}" criteriaFile="mvt/esas/baseFeatureTerms.properties" junitResult="${report.dir}/mvt/standardBaseEsas.xml">
          <include name="*mongo*.esa" />
        </esaMvtCheck>
        <publishJUnitLog filePath="${report.dir}/mvt/standardBaseEsas.xml" isFat="false" />

        <!-- Check that a sampling of the ND product ESAs have the restricted featureTerms agreement -->
        <esaMvtCheck dir="${dhe.repo.archive.dir}" criteriaFile="mvt/esas/featureTerms-restricted.properties" junitResult="${report.dir}/mvt/ndEsas.xml">
          <include name="*frappe*.esa" />
          <include name="*collectiveController*.esa" />
        </esaMvtCheck>
        <publishJUnitLog filePath="${report.dir}/mvt/ndEsas.xml" isFat="false" />

        <!-- Check that the webcache monitor has the ILAR license -->
        <esaMvtCheck dir="${dhe.repo.archive.dir}" criteriaFile="mvt/esas/unsupported.properties" junitResult="${report.dir}/mvt/unsupportedEsas.xml">
          <include name="com.ibm.websphere.appserver.webCacheMonitor*.esa" />
          <include name="com.ibm.websphere.appserver.osgiAppConsole*.esa" />
        </esaMvtCheck>
        <publishJUnitLog filePath="${report.dir}/mvt/unsupportedEsas.xml" isFat="false" />

        <!-- Check that a Bluemix ESA has the FT agreement and no AppliesTo -->
        <esaMvtCheck dir="${dhe.repo.beta.archive.dir}/${liberty.beta.version}" criteriaFile="mvt/esas/betaAndBluemix.properties" junitResult="${report.dir}/mvt/bluemixRuntimeEsa.xml">
          <include name="com.ibm.websphere.appserver.jsp-2.2.esa" />
          <include name="com.ibm.websphere.appserver.servlet-3.0.esa" />
        </esaMvtCheck>
        <publishJUnitLog filePath="${report.dir}/mvt/bluemixRuntimeEsa.xml" isFat="false" />

        <!-- Check that a non-Bluemix beta ESA has the FT agreement but applying to EARLY_ACCESS only-->
        <esaMvtCheck dir="${dhe.repo.beta.archive.dir}/${liberty.beta.version}" criteriaFile="mvt/esas/betaOnly.properties" junitResult="${report.dir}/mvt/betaEsa.xml">
          <include name="com.ibm.websphere.appserver.adminCenter-1.0.esa" />
        </esaMvtCheck>
        <publishJUnitLog filePath="${report.dir}/mvt/betaEsa.xml" isFat="false" />
      </then>
    </iff>

    <!-- If we're creating the profile zips we should run MVT -->
    <echo message="Running MVT for profile zips." />
    <dirset id="profiles" dir="profiles">
      <depth max="0" min="0" />
    </dirset>

    <foreach param="profileDir" in="profiles">
      <local name="profile" />
      <basename property="profile" file="${profileDir}" />
      <local name="package.name" />
      <local name="default.package.name" />
      <local name="edition.version" />
      <local name="product.edition" />

      <!-- This logic must mirror the logic in the createProfileZip macro -->
      <echo>Preparing MVT for profile zip ${profile}</echo>

      <!-- Read properties file -->
      <property file="profiles/${profile}/metadata/profile.properties" />

      <!-- Construct the archive package name -->
      <property name="default.package.name" value="${install.name}-${profile}" />
      <property name="package.name" value="${default.package.name}-${edition.version}" />
      <property file="profiles/${profile}/profile.properties" />

      <!-- Profile zip is in one of two locations -->
      <local name="package.zip.path" />
      <condition property="package.zip.path" value="${liberty.image.output.upload.dir}/${package.name}.zip" else="${file.local.dir}/${package.name}.zip">
        <available file="${liberty.image.output.upload.dir}/${package.name}.zip" />
      </condition>

      <echo message="Running License MVT for ${package.name}" />
      <mvt installimage="${package.zip.path}" rootdir="${install.name}" encoding="UTF-16" testName="mvt.${profile}" inputfile="licenses/${license.type}/mvt.txt" productEdition="${product.edition}" />

      <iff>
        <equals arg1="${profile}" arg2="kernel" />
        <then>
          <echo message="Skipping Feature MVT for {package.name}" />
        </then>
        <else>
          <echo message="Running Feature MVT for ${package.name}" />
          <featureMvt installimage="${package.zip.path}" rootdir="${install.name}" testName="featureMvt.${profile}" inputfile="profiles/${profile}/featureMvt.txt" allowMissingFeatures="${allow.missing.features}" />
        </else>
      </iff>

      <echo message="Running MVT to check if scripts are executable for ${package.name}.zip" />
      <mkdir dir="build/tmp/mvt/${package.name}" />
      <local name="mvt.package.dir" />
      <property name="mvt.package.dir" value="${build.tmp.dir}/mvt/${package.name}" />
      <iff>
        <os family="windows" />
        <then>
          <sequential>
            <unzip src="${package.zip.path}" dest="${mvt.package.dir}" />
            <property name="extension" value=".bat" />
            <property name="platform" value="windows" />

            <!-- fileset only contains batch scripts -->
            <fileset id="packageScripts" dir="${mvt.package.dir}/wlp" casesensitive="yes" includes="bin/*${extension}, lib/tools-internal/*${extension}" />

            <foreach param="packageScript" in="packageScripts">
              <echo message="Executing: ${packageScript}" />
              <exec executable="${packageScript}" resultproperty="winScriptCode" output="${mvt.package.dir}/scriptWindOutput.log" />
              <!-- Test failure script not executable -->
              <iff>
                <not>
                  <equals arg1="${winScriptCode}" arg2="0" />
                </not>
                <then>
                  <local name="package.scripts" />
                  <local name="scriptName" />
                  <basename property="scriptName" file="${packageScript}" suffix=".bat" />
                  <loadfile property="package.scripts" srcFile="${mvt.package.dir}/scriptWindOutput.log" failonerror="false" />
                  <publishAsJunitFailure claimedTestClassName="${package.name}" claimedTestCaseName="wlp/bin/${scriptName}${extension} not executable" summary="Test failure: packageScript: ${packageScript} is not executable" failureText="The script ${scriptName}${extension} is not executable. The output: ${package.scripts}" tempFile="${mvt.package.dir}/${scriptName}-${platform}-scriptFail.xml" encoding="ISO-8859-1" />
                </then>
              </iff>
            </foreach>
          </sequential>
        </then>
        <else>
          <sequential>
            <!-- I am not 100% sure, but I assume we call the system utility to ensure file perms are set... not sure if ant unzip does this? -->
            <echo message="unzipping: ${package.zip.path} -d ${mvt.package.dir}" />
            <local name="unzipPkgResult" />
            <local name="unzipPkgerror" />
            <local name="unzipPkgoutput" />
            <exec executable="unzip" resultproperty="unzipPkgResult" errorproperty="unzipPkgerror" outputproperty="unzipPkgoutput">
              <arg value="-o" />
              <arg value="${package.zip.path}" />
              <arg value="-d" />
              <arg value="${mvt.package.dir}" />
            </exec>

            <echo message="resultproperty: ${unzipPkgResult} PackageName: ${package.name}" />
            <!-- If unzip failed, dump the output -->
            <iff>
              <not>
                <equals arg1="${unzipPkgResult}" arg2="0" />
              </not>
              <then>
                <echo message="errorproperty: ${unzipPkgerror}" />
                <echo message="outputproperty: ${unzipPkgoutput}" />
              </then>
            </iff>

            <property name="extension" value="" />
            <property name="platform" value="unix" />

            <local name="packageScriptsEcho" />
            <!-- fileset only contains shell or any other language scripts -->
            <fileset id="packageScripts" dir="${mvt.package.dir}/wlp" casesensitive="yes" includes="bin/*, lib/native/os400/bin/*,lib/tools-internal/*" excludes="bin/*.bat, lib/native/os400/bin/*.bat, lib/tools-internal/*.bat" erroronmissingdir="false" />
            <pathconvert pathsep=", " property="packageScriptsEcho" refid="packageScripts" />

            <echo message="Package Scripts are: ${packageScriptsEcho} " />
            <foreach param="packageScript" in="packageScripts">
              <local name="unixScriptCode" />
              <local name="unixOutputLog" />
              <local name="errorUnixCode" />

              <exec executable="/bin/ls" resultproperty="unixScriptCode" errorproperty="errorUnixCode" outputproperty="unixOutputLog">
                <arg value="-l" />
                <arg value="${packageScript}" />
              </exec>

              <!-- MVT failure - script is not executable -->
              <iff>
                <not>
                  <and>
                    <equals arg1="${unixScriptCode}" arg2="0" />
                    <contains string="${unixOutputLog}" substring="-rwxr" />
                  </and>
                </not>
                <then>
                  <echo message="unixScriptCode: ${unixScriptCode} Script: ${packageScript}" />
                  <echo message="unixOutputLog: ${unixOutputLog}" />
                  <echo message="errorUnixCode: ${errorUnixCode}" />
                  <iff>
                    <contains string="${unixOutputLog}" substring="" />
                    <then>
                      <echo message="Empty: ${unixOutputLog}" />
                    </then>
                    <else>
                      <publishAsJunitFailure claimedTestClassName="${package.name}" claimedTestCaseName="wlp/bin/${packageScript} not executable" summary="Test failure: ${packageScript} is not executable" failureText="The script ${packageScript}${extension} is not executable. Return code: ${unixScriptCode}. The output: ${unixOutputLog}" tempFile="${mvt.package.dir}/${packageScript}-${platform}-scriptFail.xml" encoding="ISO-8859-1" />
                    </else>
                  </iff>
                </then>
              </iff>
            </foreach>
          </sequential>
        </else>
      </iff>
      <!-- Conditional for OS type -->

      <!-- If we're creating the profile zips we should do validation for checksums generated -->
      <echo message="Running validation of productInfo${extension} script" />
      <path id="productInfoClasspath">
        <pathelement path="." />
        <pathelement path="${mvt.package.dir}/wlp/lib/**/*.jar" />
        <pathelement path="${mvt.package.dir}/wlp/bin/tools/ws-productutil.jar" />
      </path>

      <sleep seconds="3" />
      <!-- WTF is this here for -->
      <java jar="${mvt.package.dir}/wlp/bin/tools/ws-productutil.jar" resultProperty="errorCode" fork="true" output="${mvt.package.dir}/productInfoValidateResult.log">
        <arg value="validate" />
        <classpath refid="productInfoClasspath" />
      </java>

      <!-- Test failure productInfo validation fails -->
      <iff>
        <not>
          <equals arg1="${errorCode}" arg2="0" />
        </not>
        <then>
          <local name="package.scripts" />
          <local name="scriptName" />
          <basename property="scriptName" file="${mvt.package.dir}/wlp/bin/productInfo${extension}" suffix=".bat" />
          <loadfile property="package.scripts" srcFile="${mvt.package.dir}/productInfoValidateResult.log" failonerror="false" />

          <publishAsJunitFailure claimedTestClassName="${package.name}" claimedTestCaseName="wlp/bin/productInfo${extension} validation failed" summary="Test failure: ${package.name}/wlp/bin/productInfo${extension} validation failed" failureText="productInfo validation has failed for ${package.name}. The checksum of README.txt in at wlp\lib\platform\checksums\ does not match. The script output: ${package.scripts}" tempFile="${mvt.package.dir}/${scriptName}-validationFail.xml" encoding="ISO-8859-1" />
        </then>
        <else>
          <echo message="${package.name}/wlp/bin/productInfo${extension} validation Success!!!" />
        </else>
      </iff>

      <echo message="Running MVT to verify that server.xml template for the defaultServer contains the appropriate features for the function of each ZIP package" />
      <local name="defaultServer.dir" />
      <property name="defaultServer.dir" value="${mvt.package.dir}/wlp/templates/servers/defaultServer/server.xml" />
      <echo message="Verifying feature for: ${package.name}" />
      <echo message="defaultServer/server.xml dir: ${defaultServer.dir}" />
      <sequential>
        <iff>
          <not>
            <or>
              <contains string="${profile}" substring="beta" />
              <equals arg1="${profile}" arg2="kernel" />
              <equals arg1="${profile}" arg2="osgi" />
            </or>
          </not>
          <then>
            <property file="profiles/templateFeatureBVT.properties" />
            <local name="profileName" />
            <local name="profileList" />
            <propertycopy name="profileName" from="${profile}" />

            <foreach param="profileList" in="${profileName}">
              <echo message="ProfileList from featureProperties: ${profileList}" />
              <iff>
                <not>
                  <resourcecontains resource="${defaultServer.dir}" substring="${profileList}" />
                </not>
                <then>
                  <echo message="Values: ${defaultServer.dir} - ${profileList} - ${default.package.name}" />
                  <local name="scriptName" />
                  <basename property="scriptName" file="${defaultServer.dir}" suffix=".xml" />
                  <publishAsJunitFailure claimedTestClassName="${package.name}" claimedTestCaseName="wlp/bin/templates/servers/defaultServer/server.xml does not have feature: ${profileList} " summary="Test failure: ${defaultServer.dir} does not have ${profileList} " failureText="The feature: '${profileList}' for package: ${package.name} does not exists in ${defaultServer.dir}" tempFile="${mvt.package.dir}/${profileList}-FeatureTemplateFail.xml" encoding="ISO-8859-1" />
                </then>
              </iff>
            </foreach>
          </then>
        </iff>
        <delete dir="${mvt.package.dir}" />
      </sequential>
    </foreach>
    <delete dir="${liberty.image.output.upload.dir}/mvt" />

    <completeActivity label="Running MVT" id="mvt.activity" />
  </target>

  <target name="prepareForPackaging">
    <pathconvert property="pcp" refid="project.class.path" />
    <echo level="verbose" message="bnd classpath is: ${pcp}" />

    <!-- Create the time stamp -->
    <tstamp />
    <property name="buildLabel" value="local-${DSTAMP}-${TSTAMP}" />

    <!-- Create the build directory structure used to create image -->
    <mkdir dir="${file.local.dir}" />

    <!-- Avoid failures in zip when building partial images -->
    <mkdir dir="${install.name}/usr" />
    <mkdir dir="${install.name}/usr/shared/apps" />
    <mkdir dir="${install.name}/usr/shared/config" />
    <mkdir dir="${install.name}/usr/shared/resources" />
    <mkdir dir="${install.name}/bin" />
    <mkdir dir="${install.name}/bin/tools" />
    <mkdir dir="${install.name}/clients" />
    <mkdir dir="${install.name}/lib/extract/META-INF" />
    <mkdir dir="${liberty.dir}/lib/versions/checksums" />
    <mkdir dir="${install.name}/templates" />
    <mkdir dir="${liberty.image.output.upload.dir}" />
    <mkdir dir="${dhe.repo.build.basedir}" />
    <mkdir dir="${dhe.repo.archive.dir}" />
    <mkdir dir="${dhe.repo.license.dir}" />

    <copy file="Copyright.txt" todir="${install.name}" />

    <echo file="${install.name}/lib/versions/service.fingerprint">
${liberty.service.version}
      </echo>

    <!-- Prepare Java download -->
    <iff>
      <equals arg1="${build.profile.zip.with.java}" arg2="true" />
      <then>
        <property name="jvm.gsa.basedir" value="projects/w/was.dev_tools/prereqs/java/" />
        <property name="jvm.gsa.server" value="ausgsa.ibm.com" />
        <property name="jvm.prop.dir" value="resources/jvmlevel-properties/java8" />

        <!-- Downloading 8 java versions as per their jvmLevelProperty files 
  				:Windows 7-x64.properties
  				:Windows 7-x86.properties
  				:Linux-ppc.properties
  				:Linux-ppc64.properties
  				:Linux-ppc64le.properties
  				:Linux-amd64.properties
  				:Linux-x86.properties
  				:Linux-s390x.properties
  			-->
        <fileset id="propertyFiles" dir="${jvm.prop.dir}" includes="*.properties" excludes="**/AIX*.properties, 
  													**/HP*.properties, 
  													**Server*.properties, 
  													**XP*.properties" />

        <foreach param="propertyFile" in="propertyFiles">
          <echo message="Java property File: ${propertyFile}" />
          <local name="gsa.dir" />
          <local name="target.sdk.level" />
          <property file="${propertyFile}" />

          <!-- Downloading 8 java versions as per their jvmLevelProperty files 
  	             						:Windows 7-x64.properties
  	             						:Windows 7-x86.properties
  	             						:Linux-ppc.properties
  	             						:Linux-ppc64.properties
  	             						:Linux-ppc64le.properties
  	             						:Linux-amd64.properties
  	             						:Linux-x86.properties
  	             					-->
          <echo message="Downloading SDK from ftp://${jvm.gsa.server}/${jvm.gsa.basedir}/${gsa.dir}/${target.sdk.level}.zip" />

          <local name="jvmPropertyFile" />
          <basename property="jvmPropertyFile" file="${propertyFile}" suffix=".properties" />

          <ftp server="${jvm.gsa.server}" userid="${gsaid}" password="${gsapw}" passive="yes" action="get" remotedir="${jvm.gsa.basedir}/${gsa.dir}/" binary="true">

            <fileset dir="${build.dir}/jvmlevel" includes="${target.sdk.level}.zip" />

          </ftp>


          <!-- Merge the the JRE and SDK packages into one JVM package -->
          <zip destfile="${build.dir}/jvmlevel/${jvmPropertyFile}.zip" duplicate="preserve">
            <zipfileset src="${build.dir}/jvmlevel/${target.sdk.level}.zip" prefix="java/java" />
          </zip>

          <delete file="${build.dir}/jvmlevel/${target.sdk.level}.zip" />
        </foreach>
      </then>
    </iff>

    <!-- Find and set all of the editions and profiles to build -->
    <iff>
      <isset property="selected.editions" />
      <then>
        <!-- get a dirset for the selected editions -->
        <dirset id="editions" dir="editions" includes="${selected.editions}">
          <depth max="0" min="0" />
        </dirset>
      </then>
      <else>
        <!-- get a dirset for all the editions -->
        <dirset id="editions" dir="editions">
          <depth max="0" min="0" />
          <exclude name="sle" unless="run.SLE.package" />
        </dirset>
      </else>
    </iff>

    <dirset id="profiles" dir="profiles">
      <depth max="0" min="0" />
    </dirset>

    <!-- Prep a bootstrap.properties that point to where all the editions and profiles live -->
    <mkdir dir="${build.dir}/servers/image" />
    <copy file="resources/imageServer/bootstrap.properties" tofile="${build.dir}/servers/image/bootstrap.properties" />
    <foreach param="editionDir" in="editions">
      <local name="edition" />
      <basename property="edition" file="${editionDir}" />
      <propertyfile file="${build.dir}/servers/image/bootstrap.properties">
        <entry key="editions.${edition}" value="${editionDir}" />
      </propertyfile>
    </foreach>

    <foreach param="profileDir" in="profiles">
      <local name="profile" />
      <basename property="profile" file="${profileDir}" />
      <propertyfile file="${build.dir}/servers/image/bootstrap.properties">
        <entry key="profiles.${profile}" value="${profileDir}" />
      </propertyfile>
    </foreach>
  </target>

  <target name="buildImage" depends="checkFrozenEditionsFiles, prepareForPackaging">
    <echo message="preparing ${ant.project.name}" />

    <!-- Blank the list of created archives -->
    <!-- We call the file a laundry list rather than a manifest because manifest is a bit overloaded. -->
    <echo file="${liberty.image.output.upload.dir}/editionslaundrylist.txt" append="false" message="" />

    <!-- Create all the runtime installers. -->
    <foreach param="editionDir" in="editions">
      <local name="edition" />
      <local name="built.image" />
      <basename property="edition" file="${editionDir}" />

      <mkdir dir="build/${edition}" />

      <!-- Create the all installer -->
      <iff>
        <available file="editions/${edition}/all.xml" />
        <then>
          <createInstaller properties="${editionDir}/runtime.properties" edition="${edition}" archive="runtime" runtime.type="all" />
        </then>
      </iff>
      <!-- Create the zos kernel installer -->
      <iff>
        <equals arg1="${edition}" arg2="zos" />
        <then>
          <createInstaller properties="${editionDir}/runtime.properties" edition="${edition}" archive="runtime" runtime.type="kernel" />
        </then>
      </iff>
      <!-- Create the runtime installer (yay) -->
      <createInstaller properties="${editionDir}/runtime.properties" edition="${edition}" archive="runtime" />

      <iff>
        <istrue value="${built.image}" />
        <then>
          <!-- Look to see if there are xml files for add ons -->
          <fileset id="addons" dir="${editionDir}" includes="*.xml" excludes="runtime.xml,custom-build.xml,all.xml" />

          <!-- local and load the edition properties to use them only for this one call.
                   This cannot be moved to its own macro because the scope of the properties is lost. -->
          <local name="product.edition" />
          <local name="license.type" />
          <local name="archive.name" />
          <local name="default.archive.name" />
          <local name="add.to.download.xml" />
          <local name="build.always" />
          <local name="extra.package.options" />
          <local name="build.repo.metadata" />
          <local name="repo.name" />
          <local name="repo.shortDescription" />
          <local name="repo.downloadURL" />
          <local name="repo.longDescription" />
          <local name="edition.version" />
          <local name="runtime.archive.name" />
          <local name="display.edition.version" />
          <local name="dhe.license.path" />
          <local name="build.web.license" />
          <property file="${editionDir}/runtime.properties" />

          <!-- Default display.edition.version if it wasn't set in the properties -->
          <property name="display.edition.version" value="${edition.version}" />

          <property name="runtime.archive.name" value="${install.name}-${edition}-runtime-${edition.version}.jar" />

          <!-- Make a record of the archive we just created -->
          <echo file="${liberty.image.output.upload.dir}/editionslaundrylist.txt" append="true" message="image.name.for.${edition}=${runtime.archive.name}" />

          <!-- Loop around all the addons that exist -->
          <foreach param="addOn" in="addons">
            <!-- extract the file name and then extract the bit before the xml file -->
            <local name="addonFile" />
            <basename property="addonFile" file="${addOn}" />
            <regexp string="${addonFile}" pattern="(.*)\.xml" />

            <!-- Create the add on installer (yay) -->
            <createAddOnInstaller edition="${edition}" addOn="${group1}" properties="${editionDir}/${group1}.properties" runtime.archive="${liberty.image.output.upload.dir}/${runtime.archive.name}" license.properties="${editionDir}/license.properties" />
            <!-- Add a record of the add-on archive we just created -->
            <echo file="${liberty.image.output.upload.dir}/editionslaundrylist.txt" append="true" message=",${install.name}-${edition}-${group1}-${edition.version}.jar" />

          </foreach>
          <!-- Close off the record for this edition -->
          <echo file="${liberty.image.output.upload.dir}/editionslaundrylist.txt" append="true" message="${line.separator}" />

          <!-- Finally we need to build the embeddable zip, this is done by installing everything we just built -->
          <createEmbeddableZip edition="${edition}" properties="${editionDir}/embeddable.properties" />

          <local name="customBuildFile" />
          <property name="customBuildFile" value="editions/${edition}/custom-build.xml" />
          <!-- on zos we do some crazy stuff so rather than try to deal with it here we allow a custom-build.xml for the edition
                  to do it.-->
          <iff>
            <available file="${customBuildFile}" />
            <then>
              <echo message="Calling custom build for edition" />
              <ant dir="${basedir}" antfile="${customBuildFile}" target="customize">
                <property name="edition.version" value="${edition.version}" />
              </ant>
            </then>
            <else>
              <echo message="${customBuildFile} does not exist" />
            </else>
          </iff>
        </then>
      </iff>
    </foreach>

    <iff>
      <not>
        <istrue value="${run.SLE.package}" />
      </not>
      <then>
        <!-- Create profile zips. -->
        <antcall target="createProfileZips" inheritAll="true" inheritRefs="true" />

        <!-- Clean up Java dirs -->
        <delete dir="${build.dir}/jvmlevel" />

        <createExtrasJarFile license.name="developers" edition.version="${liberty.service.version}" build.repo.metadata="true" />
        <createExtrasJarFile license.name="extras" exclude.license.name="true" edition.version="${liberty.service.version}" />

        <!-- Copy the embeddable full edition to a convience driver -->
        <copy file="${liberty.image.output.upload.dir}/${install.name}-embeddable-full-${liberty.service.version}.zip" tofile="${file.local.dir}/${install.name}-${buildLabel}.zip" />

        <mkdir dir="build/baseline" />
        <mkdir dir="build/delta" />
        <unzip src="output/${install.name}-${buildLabel}.zip" dest="build/baseline" />
        <iff>
          <istrue value="${unittest.prop.allow.missing.features}" />
          <then>
            <!-- When adding files to this patternset, add a comment explaining why the file is needed
	           for load rules build even if an owning feature is missing. This list should be small. -->
            <patternset id="load.rules.test.dependencies">
              <!-- The FAT framework depends on the com.ibm.ws.jmx.connector.client.rest project -->
              <exclude name="lib/com.ibm.ws.jmx.connector.client.rest*jar" />
              <exclude name="clients/restConnector.jar" />
              <!-- The restConnector includes an SPI jar from restHandler, but it's a protected feature so doesn't get packaged up.
	             The plan is for restConnector to include the whole of restHandler, and once that's done this should be deleted. -->
              <exclude name="lib/features/restHandler-1.0.mf" />
              <exclude name="lib/com.ibm.ws.rest.handler_1.0.${micro.version}.jar" />
              <exclude name="lib/com.ibm.websphere.rest.handler_1.0.${micro.version}.jar" />
              <exclude name="lib/features/checksums/com.ibm.websphere.appserver.restHandler-1.0.cs" />
              <exclude name="lib/com.ibm.ws.joda-time.1.6.2_1.0.${micro.version}.jar" />
              <exclude name="lib/features/l10n/com.ibm.websphere.appserver.restHandler-1.0*properties" />
              <!-- End of rest handler excludes -->
            </patternset>
          </then>
          <!-- Empty pattern set, don't suppress anything -->
          <else>
            <patternset id="load.rules.test.dependencies" />
          </else>
        </iff>

        <copy todir="build/delta" includeemptydirs="false" failonerror="false">
          <fileset dir="${install.name}">
            <include name="**" />
            <exclude name="usr/servers/.pid/**" />
            <exclude name="usr/servers/.classCache/**" />
            <!-- ***START INSTALL ONLY FEATURES***
                 Install only features don't appear in an edition as they are an alternative install mechanism
                 to installing an edition -->
            <exclude name="lib/features/com.ibm.websphere.appserver.ndControllerBundle.mf" />
            <exclude name="lib/features/l10n/com.ibm.websphere.appserver.ndControllerBundle*.properties" />
            <exclude name="lib/features/checksums/com.ibm.websphere.appserver.ndControllerBundle.cs" />
            <exclude name="lib/features/com.ibm.websphere.appserver.ndMemberBundle.mf" />
            <exclude name="lib/features/l10n/com.ibm.websphere.appserver.ndMemberBundle*.properties" />
            <exclude name="lib/features/checksums/com.ibm.websphere.appserver.ndMemberBundle.cs" />
            <exclude name="lib/features/com.ibm.websphere.appserver.javaee7Bundle.mf" />
            <exclude name="lib/features/l10n/com.ibm.websphere.appserver.javaee7Bundle*.properties" />
            <exclude name="lib/features/checksums/com.ibm.websphere.appserver.javaee7Bundle.cs" />
            <exclude name="lib/features/com.ibm.websphere.appserver.webProfile7Bundle.mf" />
            <exclude name="lib/features/l10n/com.ibm.websphere.appserver.webProfile7Bundle*.properties" />
            <exclude name="lib/features/checksums/com.ibm.websphere.appserver.webProfile7Bundle.cs" />
            <exclude name="lib/features/com.ibm.websphere.appserver.libertyCoreBundle.mf" />
            <exclude name="lib/features/l10n/com.ibm.websphere.appserver.libertyCoreBundle*.properties" />
            <exclude name="lib/features/checksums/com.ibm.websphere.appserver.libertyCoreBundle.cs" />
            <exclude name="lib/features/com.ibm.websphere.appserver.baseBundle.mf" />
            <exclude name="lib/features/l10n/com.ibm.websphere.appserver.baseBundle*.properties" />
            <exclude name="lib/features/checksums/com.ibm.websphere.appserver.baseBundle.cs" />
            <exclude name="lib/features/com.ibm.websphere.appserver.zosBundle.mf" />
            <exclude name="lib/features/l10n/com.ibm.websphere.appserver.zosBundle*.properties" />
            <exclude name="lib/features/checksums/com.ibm.websphere.appserver.zosBundle.cs" />
            <!-- ***END INSTALL ONLY FEATURES*** -->
            <!-- The full edition contains all other editions except the unsupported edition so only features
			     that go into the unsupported edition need to be excluded here.  If full ever includes unsupported
			     in the future we should be able to remove this completely which would be nice! -->
            <!-- ***START WEB CACHE MONITOR***
          	     Web Cache Monitor is only in the "unsupported" edition, not full so exclude it from this check -->
            <exclude name="lib/features/com.ibm.websphere.appserver.webCacheMonitor-1.0.mf" />
            <exclude name="lib/features/l10n/com.ibm.websphere.appserver.webCacheMonitor-1.0*.properties" />
            <exclude name="lib/features/checksums/com.ibm.websphere.appserver.webCacheMonitor-1.0.cs" />
            <exclude name="lib/com.ibm.ws.dynacache.cachemonitor_1.0.${micro.version}.jar" />
            <!-- ***END WEB CACHE MONITOR*** -->

            <!-- ***START OSGI APP Console***
          	     Web Cache Monitor is only in the "unsupported" edition, not full so exclude it from this check -->
            <exclude name="lib/features/com.ibm.websphere.appserver.osgiAppConsole-1.0.mf" />
            <exclude name="lib/features/l10n/com.ibm.websphere.appserver.osgiAppConsole-1.0*.properties" />
            <exclude name="lib/features/checksums/com.ibm.websphere.appserver.osgiAppConsole-1.0.cs" />
            <exclude name="lib/com.ibm.ws.osgi.console.subsystems_1.0.${micro.version}.jar" />
            <exclude name="lib/com.ibm.ws.osgi.console.login_1.0.${micro.version}.jar" />
            <exclude name="lib/com.ibm.ws.org.apache.felix.webconsole.4.2.4_1.0.${micro.version}.jar" />
            <!-- ***END OSGI APP CONSOLE*** -->

            <!-- Some projects are pulled in by tests when using load rules even though the owning feature
            isn't required -->
            <patternset refid="load.rules.test.dependencies" />

            <present present="srconly" targetdir="build/baseline/wlp" />
          </fileset>
        </copy>

        <fileset id="missingfiles" dir="build/delta" />

        <foreach param="file" in="missingfiles">
          <var name="short.file" unset="true" />
          <basename property="short.file" file="${file}" />
          <echo level="error">${short.file}   is not included in any install image! Full path: ${file} </echo>
          <publishAsJunitFailure claimedTestClassName="${short.file} install validation" claimedTestCaseName="archive validation" summary="${file} is missing from the archive install" failureText="Validation of the archive install found that the file ${file} gets built, but does not get included in any installable image.
                          ${line.separator}If the file is not intended to ever be shipped, consider using a build-noship.xml instead of build.xml.
                          ${line.separator}If the file is intended for distribution with the product, make sure it's included in a feature (or kernel) manifest.
                          ${line.separator}If the file is a feature manifest, make sure it's included by an edition in /build.image/editions/
                          ${line.separator}If the file is not ready to be shipped yet, use the &quot;full&quot; edition." tempFile="${build.tmp.dir}/imagefail.xml" encoding="ISO-8859-1" />
        </foreach>
      </then>
      <else>
        <echo message="Skipping extra profile zip creation steps for SLE zip generation build." />
      </else>
    </iff>

    <!-- If we're creating the IM repo, or the full license zips also create the esas. -->
    <iff>
      <or>
        <equals arg1="${create.im.repo}" arg2="true" />
        <equals arg1="${build.license.zip}" arg2="true" />
      </or>
      <then>
        <!-- create the ESAs -->
        <delete dir="${build.dir}/tmp/core" />
        <mkdir dir="${build.dir}/tmp/core" />
        <unzip dest="${build.dir}/tmp/core" src="${liberty.image.output.upload.dir}/${install.name}-core-embeddable-${liberty.service.version}.zip" />
        <delete dir="${build.dir}/tmp/base" />
        <mkdir dir="${build.dir}/tmp/base" />
        <unzip dest="${build.dir}/tmp/base" src="${liberty.image.output.upload.dir}/${install.name}-base-embeddable-${liberty.service.version}.zip" />
        <delete dir="${build.dir}/tmp/esas" />
        <mkdir dir="${build.dir}/tmp/esas" />
        <createEsas dest.dir="${build.dir}/tmp/esas" wlp.build.dir="${build.dir}/tmp/core/wlp" />
        <createEsas dest.dir="${build.dir}/tmp/esas" wlp.build.dir="${build.dir}/tmp/base/wlp" wlp.exclude.dir="${build.dir}/tmp/core/wlp" editions="BASE,BASE_ILAN,DEVELOPERS,EXPRESS,ND,zOS" />

        <!--
				Create the wdt download xml file. It is only done for the extended as
				' the use case for runtime is small'. Hence it contains only
				the features in the extended jar.
				-->
        <generateDownloadXmlFromEsas download.xml.output.file="${download.xml.output.file}" liberty.base.runtime.jar="${liberty.image.output.upload.dir}/${install.name}-base-runtime-${liberty.service.version}.jar" liberty.base.extended.jar="${liberty.image.output.upload.dir}/${install.name}-extended-${liberty.service.version}.jar" />

        <!-- Copy over licenses for legacy tooling download xml -->
        <mkdir dir="${dhe.repo.license.dir}/featureTerms" />
        <copy todir="${dhe.repo.license.dir}/featureTerms">
          <fileset dir="../image.common/lafiles_html/featureTerms/">
            <!-- Tools only want the combined file, e.g. en.html -->
            <exclude name="LA_*" />
            <exclude name="LI_*" />
          </fileset>
        </copy>

        <!-- Create the ND ESAs -->
        <delete dir="${build.dir}/tmp/nd" />
        <mkdir dir="${build.dir}/tmp/nd" />
        <delete dir="${build.dir}/tmp/nd_exclude" />
        <copy todir="${build.dir}/tmp/nd_exclude">
          <fileset dir="${build.dir}/tmp/core">
          </fileset>
          <fileset dir="${build.dir}/tmp/base">
          </fileset>
        </copy>
        <unzip dest="${build.dir}/tmp/nd" src="${liberty.image.output.upload.dir}/${install.name}-nd-embeddable-${liberty.service.version}.zip" />
        <createEsas dest.dir="${build.dir}/tmp/esas" wlp.build.dir="${build.dir}/tmp/nd/wlp" wlp.exclude.dir="${build.dir}/tmp/nd_exclude/wlp" featureTermsUrl="http://www.ibm.com/licenses/wlp-featureterms-restricted-v1" licenseLocation="${basedir}/../image.common/lafiles/featureTerms-restricted" htmlLicenseLocation="${basedir}/../image.common/lafiles_html/featureTerms-restricted" editions="DEVELOPERS,BASE_ILAN,ND,zOS" download.xml.file="${download.xml.output.file}" />

        <!-- Final product ESAs are the z/OS ones... They are slightly trickier as it is built on top of both
            	     ND and BASE so to avoid rebuilding both of those.  Intent changed to include the z/OS features
            	     in the repo. -->
        <delete dir="${build.dir}/tmp/zOS" />
        <mkdir dir="${build.dir}/tmp/zOS" />
        <unzip dest="${build.dir}/tmp/zOS" src="${liberty.image.output.upload.dir}/${install.name}-zos-full-${liberty.service.version}.zip" />

        <java jar="${build.dir}/tmp/zOS/wlp/bin/tools/ws-schemagen.jar" fork="true">
          <arg value="--outputVersion=2" />
          <arg value="--schemaVersion=1.1" />
          <arg value="output/server.xsd" />
        </java>
        <publishFile filepath="output/server.xsd" label="Server schema" group="Release Engineering" />
        <java jar="${build.dir}/tmp/zOS/wlp/bin/tools/ws-featurelist.jar" fork="true">
          <arg value="output/featureList.xml" />
        </java>
        <publishFile filepath="output/featureList.xml" label="Server feature list" group="Release Engineering" />

        <delete dir="${build.dir}/tmp/zOS_exclude" />
        <mkdir dir="${build.dir}/tmp/zOS_exclude" />

        <copy todir="${build.dir}/tmp/zOS_exclude">
          <fileset dir="${build.dir}/tmp/nd_exclude">
          </fileset>
          <fileset dir="${build.dir}/tmp/nd">
          </fileset>
        </copy>
        <createEsas dest.dir="${build.dir}/tmp/esas" wlp.build.dir="${build.dir}/tmp/zOS/wlp" wlp.exclude.dir="${build.dir}/tmp/zOS_exclude/wlp" editions="zOS" />

        <!-- Also create ESAs for the non product features. It would be nice to have a generic way to do this
                     but each one has a unique license so need to do it one by one (we only have one at the mo so it
                     doesn't matter too much) -->
        <delete dir="${build.dir}/tmp/unsupportedEsas" />
        <delete dir="${build.dir}/tmp/unsupportedEsasExtract" />
        <mkdir dir="${build.dir}/tmp/unsupportedEsas" />
        <mkdir dir="${build.dir}/tmp/unsupportedEsasExtract" />
        <unzip dest="${build.dir}/tmp/unsupportedEsasExtract" src="${liberty.image.output.upload.dir}/${install.name}-unsupported-embeddable-${liberty.service.version}.zip" />
        <createEsas dest.dir="${build.dir}/tmp/esas" wlp.build.dir="${build.dir}/tmp/unsupportedEsasExtract/wlp" wlp.exclude.dir="${build.dir}/tmp/base/wlp" download.xml.file="${download.xml.output.file}" productFeature="false" licenseLocation="${basedir}/../image.common/lafiles/unsupported/developers" htmlLicenseLocation="${basedir}/../image.common/lafiles_html/unsupported/developers" licenseType="ILAN" downloadLicenseLocation="/wlp/${liberty.service.version}/lafiles/unsupported/" generateKnowledgeCentreLinks="false" />

        <!-- Also need to copy in license for this one -->
        <mkdir dir="${dhe.repo.license.dir}/unsupported" />
        <copy todir="${dhe.repo.license.dir}/unsupported">
          <fileset dir="../image.common/lafiles_html/unsupported/developers/">
            <!-- Tools only want the combined file, e.g. en.html -->
            <exclude name="LA_*" />
            <exclude name="LI_*" />
          </fileset>
        </copy>

        <!-- Add ESAs to repository directory so that it gets included in the repo ZIP -->
        <copy todir="${dhe.repo.archive.dir}" overwrite="false">
          <fileset dir="${build.dir}/tmp/esas" includes="*.esa">
            <present targetdir="${dhe.repo.archive.dir}" present="srconly" />
          </fileset>
          <fileset dir="${build.dir}/tmp/esas" includes="*.zip">
            <present targetdir="${dhe.repo.archive.dir}" present="srconly" />
          </fileset>
        </copy>

        <!-- create the non-beta JSON -->
        <fileset id="normalEsas" dir="${dhe.repo.archive.dir}" includes="*.esa" />
        <foreach param="esa" in="normalEsas">
          <createJsonMacro assetFile="${esa}" assetType="FEATURE" outputDir="${dhe.repo.archive.dir}" />
        </foreach>

        <!-- Now create all ESAs included in the liberty betas (edition=EARLY_ACCESS)
             Only need to unzip beta-bluemix and beta-zos because regular beta zip is a strict
             subset of beta-zos, and beta-bluemix may have features which beta-zos does not have-->
        <delete dir="${build.dir}/tmp/beta" />
        <mkdir dir="${build.dir}/tmp/beta" />
        <unzip dest="${build.dir}/tmp/beta" src="${liberty.image.output.upload.dir}/${install.name}-beta-bluemix-${liberty.beta.version}.zip" />
        <!-- This unzip step runs after the beta-zos.zip has been moved from
             ${liberty.image.output.upload.dir} to ${file.local.dir} -->
        <unzip dest="${build.dir}/tmp/beta" src="${file.local.dir}/${install.name}-beta-zos-${liberty.beta.version}.zip" />
        <createEsas dest.dir="${dhe.repo.beta.archive.dir}/${liberty.beta.version}" wlp.build.dir="${build.dir}/tmp/beta/wlp" edition.version="${liberty.beta.version}" download.dir="beta/${liberty.beta.version}" editions="EARLY_ACCESS" />

        <!-- create the beta JSON -->
        <fileset id="betaEsas" dir="${dhe.repo.beta.archive.dir}/${liberty.beta.version}" includes="*.esa" />
        <foreach param="esa" in="betaEsas">
          <createJsonMacro assetFile="${esa}" assetType="FEATURE" outputDir="${dhe.repo.beta.archive.dir}/${liberty.beta.version}" />
        </foreach>

        <!-- Zip up any repositories that have been created -->
        <dirset id="repoDirs" dir="${dhe.repo.build.basedir}">
          <depth max="0" min="0" />
        </dirset>
        <foreach param="repoDir" in="repoDirs">
          <local name="repoName" />
          <basename property="repoName" file="${repoDir}" />
          <!-- We don't want the beta runtime jar in the repo beta zips but we can't stop building it as other items will 
                       break if it isn't built. We can exclude it from the all zips as it will only be built for the beta edition. -->
          <zip destfile="${liberty.image.output.upload.dir}/repo.${repoName}.zip" basedir="${repoDir}" excludes="**/*.json, **/wlp-beta-runtime-*.jar, **/wlp-beta-runtime-*.metadata.zip" />
          <zip destfile="${liberty.image.output.upload.dir}/repo.${repoName}.json.zip" basedir="${repoDir}" includes="**/*.json" excludes="**/wlp-beta-runtime-*.jar.json" />
          <createDirectoryRepoZip esazip="${liberty.image.output.upload.dir}/repo.${repoName}.zip" jsonzip="${liberty.image.output.upload.dir}/repo.${repoName}.json.zip" repodir="${liberty.image.output.upload.dir}" destzip="wlp-featureRepo-${repoName}.zip" />
        </foreach>

        <!-- rename the wlp-featureRepo-beta.zip to wlp-featureRepo-betaVersion.zip-->
        <move file="${liberty.image.output.upload.dir}/wlp-featureRepo-beta.zip" tofile="${liberty.image.output.upload.dir}/wlp-beta-featureRepo-${liberty.beta.version}.zip" />

        <!-- Update the repo.beta.zip (but not the release one) to contain the beta featureRepo -->
        <zip destfile="${liberty.image.output.upload.dir}/repo.beta.zip" update="true">
          <zipfileset dir="${liberty.image.output.upload.dir}" includes="wlp-beta-featureRepo-${liberty.beta.version}.zip" fullpath="wasdev/downloads/wlp/beta/wlp-beta-featureRepo-${liberty.beta.version}.zip" />
        </zip>

        <!-- Tidy up some of the intermediary artifacts needed to build ESAs -->
        <delete dir="${build.dir}/tmp/core" />
        <delete dir="${build.dir}/tmp/nd" />
        <delete dir="${build.dir}/tmp/base" />
        <delete dir="${build.dir}/tmp/zOS_exclude" />
        <delete dir="${build.dir}/tmp/nd_exclude" />
        <delete dir="${build.dir}/tmp/bluemix" />
        <delete dir="${build.dir}/tmp/bluemix-beta" />
        <delete dir="${build.dir}/tmp/beta" />
      </then>
    </iff>
  </target>

  <target name="uploadImage">
    <uploadDir group="Images" label="Liberty Product Images" dir="${file.local.dir}/upload/externals/installables" zipFile="unused.zip" targetDir="${fe.path}" gsaServer="${fe.gsa.server}" gsaBaseDir="${fe.gsa.basedir}" serverLabel="${buildLabel}" suffix=".${fe.suffix}" />

    <iff>
      <not>
        <istrue value="${run.SLE.package}" />
      </not>
      <then>
        <!-- Also add in explicit links to the two most useful archives. Don't use one of our macros since
             the file has already been uploaded. -->
        <artifactLinkPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${userId}" passwordFile="${passwordFile}" verbose="true" url="https://${fe.gsa.server}/${fe.gsa.basedir}/${buildLabel}.${fe.suffix}/${fe.path}/${install.name}-developers-runtime-${liberty.service.version}.jar" localFilePath="${file.local.dir}/upload/externals/installables/${install.name}-developers-runtime-${liberty.service.version}.jar" label="Image for runtime installable archive" componentName="Images" />
        <artifactLinkPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${userId}" passwordFile="${passwordFile}" verbose="true" url="https://${fe.gsa.server}/${fe.gsa.basedir}/${buildLabel}.${fe.suffix}/${fe.path}/${install.name}-developers-extended-${liberty.service.version}.jar" localFilePath="${file.local.dir}/upload/externals/installables/${install.name}-developers-extended-${liberty.service.version}.jar" label="Image for extended installable archive" componentName="Images" />
        <artifactLinkPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${userId}" passwordFile="${passwordFile}" verbose="true" url="https://${fe.gsa.server}/${fe.gsa.basedir}/${buildLabel}.${fe.suffix}/${fe.path}/${install.name}-developers-ipla-all-${liberty.service.version}.jar" localFilePath="${file.local.dir}/upload/externals/installables/${install.name}-developers-ipla-all-${liberty.service.version}.jar" label="Image for all installable archive" componentName="Images" />
      </then>
      <else>
        <!-- Blank out files.to.upload so we can set it to something different in the next call. -->
        <var name="files.to.upload" unset="true" />
        <!-- We don't compile FATs in SLE builds, so we need to separately call the target to create the build file archive that the async builds require. -->
        <ant antfile="build-fat-image.xml" target="uploadAsyncArchive" inheritAll="true" inheritRefs="true" />
      </else>
    </iff>

  </target>

  <!-- These files have been frozen and should not be changed. If a failure occurs becuase a checksum fails
         revert the change and follow the correct packaging guidelines. If in doubt on what those are
         email liberty-dev@mailman.hursley.ibm.com.

         Under no circumstances should the checksums be changed.
    -->
  <target name="checkFrozenEditionsFiles">
    <verifyChecksum file="editions/core/runtime.xml" checksum="7be9c326de2cb09a4ba91454c2d44cfc" />
    <verifyChecksum file="editions/core-isv/runtime.xml" checksum="c47435c6b927ba1bc64d61a91a66b34c" />
    <verifyChecksum file="editions/core-noship/runtime.xml" checksum="c47435c6b927ba1bc64d61a91a66b34c" />
    <verifyChecksum file="editions/base/runtime.xml" checksum="35ee72bc996ec7218e83e1cedb602eec" />
    <verifyChecksum file="editions/base/extended.xml" checksum="f818e59d33e06027fda3b3c5e6f1b8d3" />
    <verifyChecksum file="editions/base_ilan/runtime.xml" checksum="ac29e76ec081512266595218fe738360" />
    <verifyChecksum file="editions/developers/runtime.xml" checksum="d402972fc3103608e1361a331501f1fb" />
    <verifyChecksum file="editions/developers/extended.xml" checksum="e8281db6adbee41831c4c117b7c1bfd0" />
    <verifyChecksum file="editions/developers-ipla/runtime.xml" checksum="18427bb5f9a9833b7c4b853b2e97ea86" />
    <verifyChecksum file="editions/express/runtime.xml" checksum="d402972fc3103608e1361a331501f1fb" />
    <verifyChecksum file="editions/nd/runtime.xml" checksum="d9d7f45af572405ff804717d40d8f453" />
    <verifyChecksum file="editions/zos/runtime.xml" checksum="aec5da482d03b2109384b15a82c59f78" />
  </target>

  <target name="createProfileZips" description="Create the ZIP archives" depends="prepareForPackaging">
    <echo>Creating the profile zips</echo>
    <foreach param="profileDir" in="profiles">
      <local name="profile" />
      <basename property="profile" file="${profileDir}" />
      <createProfileZip profile="${profile}" jvm.prop.dir="${jvm.prop.dir}" />
    </foreach>
  </target>

</project>
