<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2017 IBM Corporation and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
        IBM Corporation - initial API and implementation
 -->

<project name="build.fat.image" default="clean">
  <property name="upload.group" value="Test Images"/>

  <import file="../ant_build/public_imports/image_imports.xml" />

  <property name="file.local.dir" value="output" />

  <property name="file.label" value="Liberty autoFVT image" />

  <target name="clean" description="clean up">
    <delete dir="${file.local.dir}" />
    <delete dir="build" />
  </target>

  <target name="createImage" depends="buildImage, upload" />

  <target name="upload">
      <condition property="z.file.to.upload" value=",zautoFVT.zip" else="">
        <istrue value="${publish.z.autofvt.zip}"/>
      </condition>
    
      <condition property="file.to.upload" value="fat-common.zip,autoFVT.zip${z.file.to.upload}" else="fat-common.zip${z.file.to.upload}">
        <istrue value="${publish.full.autofvt.zip}"/>
      </condition>

      <antcall target="upload.upload" />

      <!-- Once we've uploaded, we no longer need them here, so delete.
           This is necessary so the build engine doesn't use too much disk space -->
      <delete file="${file.local.dir}/autoFVT.zip" failonerror="false" />
      <delete file="${file.local.dir}/zautoFVT.zip" failonerror="false" />
  </target>

  <target name="buildImage">

    <echo message="preparing ${ant.project.name}" />
    <property name="test.image.basedir" value="${basedir}/.." />

    <!-- Create the time stamp -->
    <tstamp />
    <property name="buildLabel" value="local-${DSTAMP}-${TSTAMP}" />

    <!-- Create the build directory structure used to create image -->
    <mkdir dir="${file.local.dir}" />

    <!-- Upload zips for each test bucket so we can send them individually to the async test builds -->
    <uploadBucketZips baseDir="${test.image.basedir}"/>

    <tstamp>
        <format property="zipStart.TSTAMP" pattern="HH:mm:ss.SSS"/>
    </tstamp>
    <echo message="Starting image zip at ${zipStart.TSTAMP}"/>

    <!-- Zip up the large autoFVT.zip only if the publish.full.autofvt.zip property is set to true -->
    <if iff="publish.full.autofvt.zip">
      <zip destfile="${file.local.dir}/autoFVT.zip">
        <!-- The autoFVT.zip files are distributed (not scattered) through the file system -->
        <zipfileset dir="${test.image.basedir}">
          <include name="*fat*/build/lib/autoFVT.zip" />
          <include name="*test*/build/lib/autoFVT.zip" />
          <!-- Sneakily include our build files as well, for ease of building locally.
          We diverge a bit from moonstone here, but it's probably worth it. -->
          <include name="*fat*/build-test.xml" />
          <include name="*test*/build-test.xml" />
          <include name="*fat*/*post-compilation.xml" />
          <include name="*test*/*post-compilation.xml" />
          <!-- Samples build files use the FAT framework, and are reqd by the samples build-test.xml -->
          <!-- Yes, they exist in the samples stream. Not in the main stream. -->
          <include name="*fat*/build-sample.xml" />
          <include name="*test*/build-sample.xml" />
        </zipfileset>
      </zip>
    </if>

    <zip destfile="${file.local.dir}/fat-common.zip">
      <zipfileset dir="${test.image.basedir}">
        <!-- Also include the parent build files we need - we'll again need
             to reconsider when we get to moonstone (putting them in the build
             component would also fix this )-->
        <!-- TODO?: It's a smallist tree, but we could still be more explicit than **... -->
        <include name="fattest.*/**/*xml" />
        <!-- TODO: Does this still exist? Only componenttest instances I see are inside fattest.simplicity,
             and wouldn't match this include pattern. -->
        <include name="componenttest.*/**/*xml" />
        <!-- TODO It doesn't seem great to include these but they're necessary for the moment -->
        <include name="fattest.simplicity/autoFVT-defaults/${fat.bootstrap.name}"/>
        <include name="test_build/**"/>
        <!-- We'll need the test features which, handily, are in the wlp folder -->
        <include name="build.image/wlp/lib/com.ibm.ws.timedexit.internal_*.jar"/>
        <include name="build.image/wlp/lib/features/com.ibm.websphere.appserver.timedexit-1.0.mf"/>
        <include name="build.image/wlp/lib/com.ibm.ws.componenttest_*.jar"/>
        <include name="build.image/wlp/lib/features/com.ibm.websphere.appserver.componenttest-1.0.mf"/>
        <!-- Also include default/shared keys files -->
        <include name="build.sharedResources/usrShared"/>
        <!-- Also include the jars in ant_build/lib (needed for running tests independently of build) -->
        <include name="ant_build/lib/*.jar"/>
        <!-- Also include the jars in test_prereqs/moonstone/sharedlibraries (needed for running tests independently of build) -->
        <include name="test_prereqs/moonstone/sharedlibraries/**/*.jar"/>
      </zipfileset>
    </zip>

    <property name="publish.z.autofvt.zip" value="true" />
    <if iff="publish.z.autofvt.zip">
      <zip destfile="${file.local.dir}/zautoFVT.zip">
        <!-- The zautoFVT.zip files are distributed (not scattered) through the file system -->
        <zipfileset dir="${test.image.basedir}">
          <include name="*zfat*/zautoFVT.zip" />
          <include name="*zfat*/build-ztest.xml" />
          <!-- Sneak in z/OS unittests as well. These are directory trees, so we do need **. -->
          <include name="*_ztest/**" />
        </zipfileset>
        <!-- Zip up the image -->
      </zip>
    </if>

    <tstamp>
        <format property="zipEnd.TSTAMP" pattern="HH:mm:ss.SSS"/>
    </tstamp>
    <echo message="Finished zipping image at ${zipEnd.TSTAMP}"/>

    <!-- Clean the projects' build folders of autoFVT.zip files. -->
    <delete>
        <fileset id="autoFVTBucketZips" dir="${basedir}/..">
            <include name="*fat*/build/lib/autoFVT.zip"/>
            <include name="*test*/build/lib/autoFVT.zip"/>
            <include name="*zfat*/build/lib/zautoFVT.zip"/>
        </fileset>
    </delete>

    <!-- Zip for async builds that is useful when load rules aren't suppported, as in we're using GHE,
         or we want to re-run a snapshot of async builds to reproduce test failures. -->
    <antcall target="uploadAsyncArchive" inheritAll="true" inheritRefs="true" />

    <zip destfile="${file.local.dir}/zosArchive.zip">
        <zipfileset dir="${test.image.basedir}">
            <include name="com.ibm.zos.native/**/*" />
        </zipfileset>
    </zip>

    <property name="file.to.upload" value="zosArchive.zip" />
    <antcall target="upload.upload" />
    <var name="file.to.upload" unset="true" />
    <delete file="${file.local.dir}/zosArchive.zip" failonerror="false" />
  </target>

  <target name="uploadAsyncArchive" description="Create and upload the build file archive for async builds.">
    <echo>Creating async archive</echo>
    <zip destfile="${file.local.dir}/asyncArchive.zip">
        <zipfileset dir="${basedir}/..">
          <include name="ant_build/**/*" />
          <include name="build.image/**/*" />
          <exclude name="build.image/${file.local.dir}/**/*" />
          <exclude name="build.image/build/**/*" />
          <include name="build.sharedResources/**/*" />
          <include name="fattest.simplicity/**/*" />
          <include name="test_prereqs/**/*" />
          <include name="test_build/**/*" />
          <include name="prereq.dbtest/**/*" />
        </zipfileset>
    </zip>

    <echo>Uploading async archive</echo>
    <property name="file.to.upload" value="asyncArchive.zip" />
    <antcall target="upload.upload" />
    <var name="file.to.upload" unset="true" />
    <delete file="${file.local.dir}/asyncArchive.zip" failonerror="false" />
  </target>

  <macrodef name="uploadBucketZips">
    <attribute name="baseDir" default="${basedir}/.." />
    <sequential>
      <!-- create a fileset of the bucket autoFVT.zip files -->
      <fileset id="autoFVTBucketZips" dir="@{baseDir}">
        <include name="*fat*/build/lib/autoFVT.zip"/>
        <include name="*test*/build/lib/autoFVT.zip"/>
        <include name="*zfat*/build/lib/zautoFVT.zip"/>
      </fileset>
      <pathconvert property="autoFVTBucketZipList" refid="autoFVTBucketZips" pathsep=","/>

      <!-- loop through each bucket with an autoFVT.zip, create a zip with the autoFVT.zip and build files, and publish it -->
      <foreach in="${autoFVTBucketZipList}" param="autoFVTBucketZip">
        <!-- We get the bucket name assuming the path to (z)autoFVT.zip is xxxx/<bucket name>/build/lib/(z)autoFVT.zip in all cases.
             If any buckets do not follow that convention, we will get a build break and need to work with the owner to get
             them to follow the convention. -->
        <regexp string="${autoFVTBucketZip}" pattern=".*/([^/]*)/build/lib/z?autoFVT.zip" property="bucketNameMatch"/>
        <if if="bucketNameMatch">
          <local name="bucketName"/>
          <property name="bucketName" value="${group1}"/>
          <echo message="Packaging and publishing ${bucketName}.zip"/>

          <!-- create a bucket.zip file including autoFVT.zip and build-test.xml and other files needed -->
          <zip destfile="${file.local.dir}/autoFVT_bucket_zips/${bucketName}.zip">
            <zipfileset dir="@{baseDir}">
              <!-- Add the bucket's (z)autoFVT.zip -->
              <include name="${bucketName}/build/lib/autoFVT.zip" />
              <include name="${bucketName}/build/lib/zautoFVT.zip" />
              <!-- Extra build/sample files that go into the main autoFVT.zip. Including them here too just in case someone wants them. -->
              <include name="${bucketName}/build-test.xml" />
              <include name="${bucketName}/*post-compilation.xml" />
              <include name="${bucketName}/build-sample.xml" />
              <include name="${bucketName}/build-ztest.xml" />
            </zipfileset>
          </zip>
          <else>
            <echo message="WARNING: Could not find a bucket name for ${autoFVTBucketZip}."/>
          </else>
        </if>
      </foreach>

      <!-- create a fileset of the bucket build-zunittest.xml files -->
      <fileset id="zunittestBuildFiles" dir="@{baseDir}">
        <include name="*ztest*/build-zunittest.xml"/>
      </fileset>
      <pathconvert property="zunittestBuildFileList" refid="zunittestBuildFiles" pathsep=","/>

      <!-- Loop through each z/OS unittest build file and create a zip of the entire directory. These need to be published like
           the autoFVT bucket zips because they are run in the z/OS async build. -->
      <foreach in="${zunittestBuildFileList}" param="zunittestBuildFile">
        <regexp string="${zunittestBuildFile}" pattern=".*/([^/]*)/build-zunittest.xml" property="zunittestNameMatch"/>
        <if if="zunittestNameMatch">
          <local name="zunittestName"/>
          <property name="zunittestName" value="${group1}"/>
          <echo message="Packaging and publishing ${zunittestName}.zip"/>

          <!-- create a bucket.zip file including autoFVT.zip and build-test.xml and other files needed -->
          <zip destfile="${file.local.dir}/autoFVT_bucket_zips/${zunittestName}.zip">
            <zipfileset dir="@{baseDir}">
              <!-- Add the entire directory to the zip -->
              <include name="${zunittestName}/**" />
            </zipfileset>
          </zip>
          <else>
            <echo message="WARNING: Could not find a z/OS unittest name for ${zunittestBuildFile}."/>
          </else>
        </if>
      </foreach>

      <!-- publish the bucket zip files to libertyfs -->
      <echo message="Uploading individual test bucket zips to autoFVT_bucket_zips."/>
      <uploadDir group="Test Images"
                 label="Individual Test Bucket Zips"
                 dir="${file.local.dir}/autoFVT_bucket_zips"
                 zipFile="unused.zip"
                 targetDir="autoFVT_bucket_zips"
                 gsaServer="${fe.gsa.server}"
                 gsaBaseDir="${fe.gsa.basedir}"
                 serverLabel=""
                 suffix=".."/>
      <echo message="autoFVT_bucket_zips upload complete."/>
    </sequential>
  </macrodef>
</project>
