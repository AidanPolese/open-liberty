
defaultTasks 'transform'

import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.DirectoryScanner

DirectoryScanner.removeDefaultExclude("**/.gitignore")
DirectoryScanner.removeDefaultExclude("**/.gitattributes")

task transform {
	File sourceRootDir = new File('.')
    sourceRootDir = file(sourceRootDir.absolutePath)
    while (!sourceRootDir.name.equals('dev')) {
		sourceRootDir = file(sourceRootDir.getParent())
    }
    println "sourceRootDir " + sourceRootDir
    if (!project.hasProperty('transformRootDir')) {
        throw new GradleException("You must define transformRootDir to use this gradle task, e.g.\n\t./gradlew -Dorg.gradle.project.transformRootDir=/tmp/ws-cd-open-gradle -b transform.to.gradle transform")
    }
    File transformRootDir = new File("${transformRootDir}", 'dev')
    transformRootDir = file(transformRootDir.absolutePath)
    println "transformRootDir " + transformRootDir
    if (transformRootDir.exists()) {
        throw new GradleException("Just to be safe, " + transformRootDir + " should not exist before this task is executed")
    }
    transformRootDir.mkdirs()
    doLast {
        FileTree tree = fileTree(sourceRootDir).include('*/build.gradle')
        tree.visit { element ->
            File buildGradle = new File("$element.relativePath")
            if (buildGradle.name.equals('build.gradle')) {
                String projectName = buildGradle.getParent()
                println "Transforming project " + projectName
                copy {
                    from sourceRootDir
                    into transformRootDir
                    include projectName + "/**"
                    exclude 'cnf/gradle/transform/.gradle/**'
                }
                copy {
                    from sourceRootDir
                    into transformRootDir
                    include projectName + "/.classpath.gradle"
                    include projectName + "/bnd.bnd.gradle"
                    rename { String fileName ->
                        fileName.replace('.gradle', '')
                    }
                }
            }
        }
        File templateDir = new File(sourceRootDir, 'cnf/gradle/internal.features')
        tree = fileTree(sourceRootDir).include('com.ibm.websphere.features.internal.*/*.feature')
        tree.visit {element ->
            File featureFile = new File("$element.relativePath")
            if (featureFile.name.endsWith('.feature')) {
                String parentFolder = featureFile.getParent()
                String featureName = featureFile.name.replace('.feature', '')
                String featureFileName = featureFile.name
                String bndFileName = featureFile.name.replace('.feature', '.bnd')
                String mfFileName = featureFile.name.replace('.feature', '.mf')
                File newDir = new File(transformRootDir, featureName)
                File resourcesDir = new File(newDir, 'resources')
                println "Creating internal feature project " + featureName
                newDir.deleteDir()
                resourcesDir.mkdirs()
                copy {
                    from templateDir
                    into newDir
                    include '*.template'
                    rename { String fileName ->
                        fileName.replace('.template', '')
                    }
                    filter(ReplaceTokens,
                        tokens: [PROJECT_NAME: featureName])
                }
                copy {
                    from new File(sourceRootDir, parentFolder)
                    into newDir
                    include featureFileName
                }
                copy {
                    from templateDir
                    into newDir
                    include bndFileName
                    rename { String fileName ->
                        fileName.replace(bndFileName, 'bnd.bnd')
                    }
                }
                copy {
                    from templateDir
                    into resourcesDir
                    include mfFileName
                }
            }
        }

        File manifestDir = new File(sourceRootDir, 'cnf/gradle/public.features')
        tree = fileTree(sourceRootDir).include('cnf/gradle/public.features/*.mf')
        tree.visit {element ->
            File manifestFile = new File("$element.relativePath")
            if (manifestFile.name.endsWith('.mf')) {
                String featureName = manifestFile.name.replace('.mf', '')
                File featureDir = new File(transformRootDir, featureName)
                if (featureDir.exists()) {
                    File resourcesDir = new File(featureDir, 'resources')
                    resourcesDir.mkdirs()
                    println "Updating public feature project " + featureName
                    copy {
                        from manifestDir
                        into resourcesDir
                        include manifestFile.name
                    }
                }
            }
        }

        templateDir = new File(sourceRootDir, 'cnf/gradle/dev.api.ibm')
        tree = fileTree(sourceRootDir).include('cnf/gradle/dev.api.ibm/com.ibm.websphere.appserver.api.*.bnd')
        tree.visit {element ->
            File bndFile = new File("$element.relativePath")
            if (bndFile.name.endsWith('.bnd')) {
                String parentFolder = bndFile.getParent()
                String newFolderName = bndFile.name.replace('.bnd', '')
                String bndFileName = bndFile.name
                String pomFileName = bndFile.name.replace('.bnd', '.pom')
                File newDir = new File(transformRootDir, newFolderName)
                newDir.deleteDir()
                newDir.mkdirs()
                println "Creating API project " + newFolderName
                copy {
                    from templateDir
                    into newDir
                    include '*.template'
                    rename { String fileName ->
                        fileName.replace('.template', '')
                    }
                    filter(ReplaceTokens,
                        tokens: [PROJECT_NAME: newFolderName])
                }
                copy {
                    from templateDir
                    into newDir
                    include pomFileName
                    include bndFileName
                    rename { String fileName ->
                        fileName.replace(bndFileName, 'bnd.bnd')
                    }
                }
            }
        }

        templateDir = new File(sourceRootDir, 'cnf/gradle/dev.spi.ibm')
        tree = fileTree(sourceRootDir).include('cnf/gradle/dev.spi.ibm/com.ibm.websphere.appserver.spi.*.bnd')
        tree.visit {element ->
            File bndFile = new File("$element.relativePath")
            if (bndFile.name.endsWith('.bnd')) {
                String parentFolder = bndFile.getParent()
                String newFolderName = bndFile.name.replace('.bnd', '')
                String bndFileName = bndFile.name
                String pomFileName = bndFile.name.replace('.bnd', '.pom')
                File newDir = new File(transformRootDir, newFolderName)
                newDir.deleteDir()
                newDir.mkdirs()
                println "Creating SPI project " + newFolderName
                copy {
                    from templateDir
                    into newDir
                    include '*.template'
                    rename { String fileName ->
                        fileName.replace('.template', '')
                    }
                    filter(ReplaceTokens,
                        tokens: [PROJECT_NAME: newFolderName])
                }
                copy {
                    from templateDir
                    into newDir
                    include pomFileName
                    include bndFileName
                    rename { String fileName ->
                        fileName.replace(bndFileName, 'bnd.bnd')
                    }
                }
            }
        }

        println "Transforming cnf project"
        copy {
            from new File(sourceRootDir, 'ant_build/lib')
            into new File(transformRootDir, 'cnf/lib')
            include 'asm-all-5.0.3.jar'
            include 'commons-lang-2.4.jar'
            include 'commons-math-2.2.jar'
            include 'ecj-4.3.1.jar'
            include 'infra.buildtasks-core_4.0.jar'
            include 'jackson-annotations-2.2.3.jar'
            include 'jackson-core-2.2.3.jar'
            include 'jackson-databind-2.2.3.jar'
            include 'jsoup-1.7.2.jar'
            include 'mantis-collections.jar'
            include 'mantis-nls-standalone.jar'
            include 'org.apache.aries.util-1.2.0.jar'
            include 'osgi.core.jar'
            include 'ras-instrumentation.jar'
            include 'wlp-bndPlugins.jar'
            include 'wlp-generateChecksums.jar'
            include 'wlp-metatypeValidator.jar'
        }

        copy {
            from new File(sourceRootDir, 'cnf/release.gradle')
            into new File(transformRootDir, 'cnf/release')
        }

        copy {
            from new File(sourceRootDir, 'cnf/resources/bnd')
            into new File(transformRootDir, 'cnf/resources/bnd')
            include '*.gradle'
            rename { String fileName ->
                fileName.replace('.gradle', '')
            }
        }

        copy {
            from new File(sourceRootDir, 'cnf/gradle/transform')
            into transformRootDir
            include '.gradle-wrapper/**'
        }

        copy {
            from new File(sourceRootDir, 'cnf/gradle/transform')
            into transformRootDir
            include 'gradlew'
            include 'gradlew.bat'
            fileMode 0755
        }

        copy {
            from new File(sourceRootDir, 'cnf/gradle/rootdir')
            into transformRootDir
        }
    }
}
