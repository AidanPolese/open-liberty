
defaultTasks 'transform'

import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.DirectoryScanner

DirectoryScanner.removeDefaultExclude("**/.gitignore")
DirectoryScanner.removeDefaultExclude("**/.gitattributes")

Set<String> kernelProjectTypeSet = ['Kernel', 'KernelPrereq', 'KernelTest', 'LAOSKernelTest' ]
Set<String> laosProjectTypeSet = ['LAOS', 'Kernel', 'KernelPrereq', 'KernelTest', 'LAOSKernelTest', 'LAOSTest' ]
Set<String> kernelMergedTestProjectTypeSet = ['KernelTestMerged']
Set<String> laosMergedTestProjectTypeSet = ['LAOSTestMerged', 'KernelTestMerged']

task transform {
    File filesToRemove = null
    String nl = System.getProperty("line.separator")

    File sourceRootDir = new File('.')
    sourceRootDir = file(sourceRootDir.absolutePath)
    while (!sourceRootDir.name.equals('dev')) {
        sourceRootDir = file(sourceRootDir.getParent())
    }
    println "sourceRootDir " + sourceRootDir
    if (!project.hasProperty('transformRootDir')) {
        throw new GradleException("You must define transformRootDir to use this gradle task, e.g.\n\t./gradlew -PtransformRootDir=/tmp/ws-cd-open-gradle -b transform.to.gradle transform")
    }
    String savedTransformRootDir = "${transformRootDir}"
    File transformRootDir = new File("${transformRootDir}", 'dev')
    transformRootDir = file(transformRootDir.absolutePath)
    println "transformRootDir " + transformRootDir
    if (transformRootDir.exists()) {
        throw new GradleException("Just to be safe, " + transformRootDir + " should not exist before this task is executed")
    }
    File transformKernelRootDir = null
    if (project.hasProperty('kernelSuffix')) {
        transformKernelRootDir = new File("${savedTransformRootDir}${kernelSuffix}", 'dev')
        println "transformKernelRootDir " + transformKernelRootDir
        if (transformKernelRootDir.exists()) {
            throw new GradleException("Just to be safe, " + transformKernelRootDir + " should not exist before this task is executed")
        }
    }
    File transformLAOSRootDir = null
    if (project.hasProperty('LAOSSuffix')) {
        transformLAOSRootDir = new File("${savedTransformRootDir}${LAOSSuffix}", 'dev')
        println "transformLAOSRootDir " + transformLAOSRootDir
        if (transformLAOSRootDir.exists()) {
            throw new GradleException("Just to be safe, " + transformLAOSRootDir + " should not exist before this task is executed")
        }
    }
    doLast {
        Properties props = new Properties()
        file('transform.properties').withReader {
            props.load(it)
        }
        transformRootDir.mkdirs()
        if (transformKernelRootDir != null) {
            transformKernelRootDir.mkdirs()
        }
        if (transformLAOSRootDir != null) {
            transformLAOSRootDir.mkdirs()
            new File(transformLAOSRootDir, 'cnf/gradle/transform').mkdirs()
            filesToRemove = new File(transformLAOSRootDir, 'cnf/gradle/transform/filesToRemove.properties')
            filesToRemove.delete()
            filesToRemove = new File(transformLAOSRootDir, 'cnf/gradle/transform/filesToRemove.properties')
            filesToRemove.createNewFile()
        }

        println 'Transforming projects'
        FileTree tree = fileTree(sourceRootDir).include('*/build.gradle')
        tree.visit { element ->
            File buildGradle = new File("$element.relativePath")
            if (buildGradle.name.equals('build.gradle')) {
                String projectName = buildGradle.getParent()
                //transformProject(projectName, sourceRootDir, transformRootDir)
                String projectType = props.getProperty(projectName)
                if (transformKernelRootDir != null && projectType != null && kernelProjectTypeSet.contains(projectType)) {
                    transformProject(projectName, sourceRootDir, transformKernelRootDir)
                }
                if (transformLAOSRootDir != null && projectType != null && laosProjectTypeSet.contains(projectType)) {
                    transformProject(projectName, sourceRootDir, transformLAOSRootDir)
                    if (projectType.equals('Kernel') || projectType.equals('LAOS') || projectType.equals('LAOSKernelTest')) {
                        if (projectName.equals('com.ibm.websphere.appserver.kernelCore-1.0') || projectName.equals('com.ibm.websphere.appserver.laosBundle')) {
                            filesToRemove.append(projectName + ':LAOSRemoveProject' + nl)
                        } else {
                            filesToRemove.append(projectName + ':LAOSReplaceProjectSourceWithArtifact' + nl)
                        }
                    }
                }
            }
        }

        //transformProjects(sourceRootDir, transformRootDir, null, null, null, nl)
        //transformCnf(sourceRootDir, transformRootDir)
        if (transformKernelRootDir != null) {
            transformProjects(sourceRootDir, transformKernelRootDir, props, kernelProjectTypeSet, null, nl)
            transformCnf(sourceRootDir, transformKernelRootDir)
        }
        if (transformLAOSRootDir != null) {
            transformProjects(sourceRootDir, transformLAOSRootDir, props, laosProjectTypeSet, filesToRemove, nl)
            MergeUnittestIntoProjects(sourceRootDir, transformLAOSRootDir, props, laosMergedTestProjectTypeSet, filesToRemove, nl)
            copyOverlay(sourceRootDir, transformLAOSRootDir)
            transformCnf(sourceRootDir, transformLAOSRootDir)
        }
    }
}

void transformProject(String projectName, File sourceRootDir, File targetRootDir) {
    copy {
        from sourceRootDir
        into targetRootDir
        include projectName + "/**"
        exclude 'cnf/gradle/transform/filesToRemove.properties'
        exclude 'cnf/gradle/transform/.gradle/**'
    }
    copy {
        from sourceRootDir
        into targetRootDir
        include projectName + "/.classpath.gradle"
        include projectName + "/bnd.bnd.gradle"
        rename { String fileName ->
            fileName.replace('.gradle', '')
        }
    }
}

void transformProjects(File sourceRootDir, File targetRootDir, Properties props, Set<String> projectTypeSet, File filesToRemove, String nl) {
    println 'Creating internal feature projects'
    File templateDir = new File(sourceRootDir, 'cnf/gradle/internal.features')
    FileTree tree = fileTree(sourceRootDir).include('com.ibm.websphere.features.internal.*/*.feature')
    tree.visit {element ->
        File featureFile = new File("$element.relativePath")
        String featureFileName = featureFile.name
        if (!element.isDirectory() && (props == null || projectTypeSet.contains(props.getProperty(featureFileName.replace('.feature', ''))))) {
            String parentFolder = featureFile.getParent()
            String featureName = featureFileName.replace('.feature', '')
            String bndFileName = featureFileName.replace('.feature', '.bnd')
            String mfFileName = featureFileName.replace('.feature', '.mf')
            File newDir = new File(targetRootDir, featureName)
            File resourcesDir = new File(newDir, 'resources')
            if (filesToRemove != null) {
                filesToRemove.append(parentFolder + '/' + featureFileName + ':LAOSRemoveFile' + nl)
            }
            newDir.deleteDir()
            resourcesDir.mkdirs()
            copy {
                from templateDir
                into newDir
                include '*.template'
                rename { String fileName ->
                    fileName.replace('.template', '')
                }
                filter(ReplaceTokens,
                    tokens: [PROJECT_NAME: featureName])
            }
            copy {
                from new File(sourceRootDir, parentFolder)
                into newDir
                include featureFileName
            }
            copy {
                from templateDir
                into newDir
                include bndFileName
                rename { String fileName ->
                    fileName.replace(bndFileName, 'bnd.bnd')
                }
            }
            copy {
                from templateDir
                into resourcesDir
                include mfFileName
            }
        }
    }

    println 'Updating public feature projects'
    File manifestDir = new File(sourceRootDir, 'cnf/gradle/public.features')
    tree = fileTree(sourceRootDir).include('cnf/gradle/public.features/*.mf')
    tree.visit {element ->
        File manifestFile = new File("$element.relativePath")
        if (manifestFile.name.endsWith('.mf')) {
            String featureName = manifestFile.name.replace('.mf', '')
            if (props == null || projectTypeSet.contains(props.getProperty(featureName))) {
            File featureDir = new File(targetRootDir, featureName)
            if (featureDir.exists()) {
                File resourcesDir = new File(featureDir, 'resources')
                resourcesDir.mkdirs()
                copy {
                    from manifestDir
                    into resourcesDir
                    include manifestFile.name
                }
            }
            }
        }
    }

    println 'Creating API projects'
    templateDir = new File(sourceRootDir, 'cnf/gradle/dev.api.ibm')
    tree = fileTree(sourceRootDir).include('cnf/gradle/dev.api.ibm/com.ibm.websphere.appserver.api.*.bnd')
    tree.visit {element ->
        File bndFile = new File("$element.relativePath")
        if (bndFile.name.endsWith('.bnd')) {
            String newFolderName = bndFile.name.replace('.bnd', '')
            if (props == null || projectTypeSet.contains(props.getProperty(newFolderName))) {
            String bndFileName = bndFile.name
            String pomFileName = bndFile.name.replace('.bnd', '.pom')
            File newDir = new File(targetRootDir, newFolderName)
            newDir.deleteDir()
            newDir.mkdirs()
            copy {
                from templateDir
                into newDir
                include '*.template'
                rename { String fileName ->
                    fileName.replace('.template', '')
                }
                filter(ReplaceTokens,
                    tokens: [PROJECT_NAME: newFolderName])
            }
            copy {
                from templateDir
                into newDir
                include pomFileName
                include bndFileName
                rename { String fileName ->
                    fileName.replace(bndFileName, 'bnd.bnd')
                }
            }
            }
        }
    }

    println 'Creating SPI projects'
    templateDir = new File(sourceRootDir, 'cnf/gradle/dev.spi.ibm')
    tree = fileTree(sourceRootDir).include('cnf/gradle/dev.spi.ibm/com.ibm.websphere.appserver.spi.*.bnd')
    tree.visit {element ->
        File bndFile = new File("$element.relativePath")
        if (bndFile.name.endsWith('.bnd')) {
            String newFolderName = bndFile.name.replace('.bnd', '')
            if (props == null || projectTypeSet.contains(props.getProperty(newFolderName))) {
            String bndFileName = bndFile.name
            String pomFileName = bndFile.name.replace('.bnd', '.pom')
            File newDir = new File(targetRootDir, newFolderName)
            newDir.deleteDir()
            newDir.mkdirs()
            copy {
                from templateDir
                into newDir
                include '*.template'
                rename { String fileName ->
                    fileName.replace('.template', '')
                }
                filter(ReplaceTokens,
                    tokens: [PROJECT_NAME: newFolderName])
            }
            copy {
                from templateDir
                into newDir
                include pomFileName
                include bndFileName
                rename { String fileName ->
                    fileName.replace(bndFileName, 'bnd.bnd')
                }
            }
            }
        }
    }
}

void MergeUnittestIntoProjects(File sourceRootDir, File targetRootDir, Properties props, Set<String> projectTypeSet, File filesToRemove, String nl) {
    println 'Copying /unittest/src into /test folder of runtime projects'
    props.keys().each { projectName ->
        String projectType = props.getProperty(projectName)
        if (projectTypeSet.contains(projectType)) {
            String testProjectName = projectName
            projectName = testProjectName.substring(0, testProjectName.indexOf('_test'))
            if (!testProjectName.equals('com.ibm.ws.httpservice_test')) {
                filesToRemove.append(testProjectName + ':LAOSRemoveTestProject' + nl)
            }
            copy {
                from new File(sourceRootDir, testProjectName + '/unittest/src')
                into new File(targetRootDir, projectName + '/test')
            }
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.jbatch.container_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.jbatch.container/test')
        include 'com/ibm/jbatch/container/jsl/impl/JobModelTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"unittest/files/', '"test/files/')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.jbatch.container_test/unittest')
        into new File(targetRootDir, 'com.ibm.jbatch.container/test')
        include 'files/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.anno_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.anno/test')
        include 'com/ibm/ws/anno/test/cases/AnnotationTargetsTest.java'
        include 'com/ibm/ws/anno/test/cases/InfoStoreTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"build", "build/unittest/classes"', '"bin_test", "bin_test"')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.anno_test')
        into new File(targetRootDir, 'com.ibm.ws.anno')
        include 'publish/files/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.app.manager.war_test')
        into new File(targetRootDir, 'com.ibm.ws.app.manager.war')
        include 'publish/files/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.appclient.boot_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.appclient.boot/test')
        include 'com/ibm/ws/appclient/boot/ClientLauncherTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('../com.ibm.ws.appclient.boot_test/build/tmp/', 'generated/tmp/')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.appclient.boot_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.appclient.boot/test')
        include 'com/ibm/ws/kernel/boot/internal/commands/FrameworkManagerTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"unittest"', '"test"')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.appclient.boot_test/unittest')
        into new File(targetRootDir, 'com.ibm.ws.appclient.boot/test')
        include 'test data/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.channelfw_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.channelfw/test')
        include 'com/ibm/ws/bytebuffer/test/ByteBufferTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"." + sep + "unittest"', '"test"')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.channelfw_test/unittest')
        into new File(targetRootDir, 'com.ibm.ws.channelfw/test')
        include 'testdata'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.channelfw_test')
        into new File(targetRootDir, 'com.ibm.ws.channelfw/test')
        include 'unittestports.properties'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.config_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.config/test')
        include 'com/ibm/ws/config/xml/internal/validator/XMLConfigValidatorTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"resources"', '"test-resources"')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.config_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.config/test')
        include 'test/utils/SharedConstants.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('../com.ibm.ws.config_test/resources', 'test-resources')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.config_test/resources')
        into new File(targetRootDir, 'com.ibm.ws.config/test-resources')
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.config.schemagen_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.config.schemagen/test')
        include 'com/ibm/ws/config/schemagen/internal/GeneratorTestBase.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"unittest/src"', '"test"')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.crypto.passwordutil_test/unittest')
        into new File(targetRootDir, 'com.ibm.ws.crypto.passwordutil/test')
        include 'test_data/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.crypto.passwordutil_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.crypto.passwordutil/test')
        include 'com/ibm/ws/crypto/util/custom/CustomManifestTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('build/unittest/test_data/custom_encryption', 'generated/test/test_data/custom_encryption')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.crypto.passwordutil_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.crypto.passwordutil/test')
        include 'com/ibm/ws/crypto/util/custom/CustomUtilsTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line
                .replace('"../com.ibm.ws.crypto.passwordutil_test/build/unittest/test_data"', '"generated/test/test_data"')
                .replace('build/unittest/test_data/custom_encryption', 'generated/test/test_data/custom_encryption')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.crypto.passwordutil_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.crypto.passwordutil/test')
        include 'com/ibm/ws/crypto/util/PasswordCipherUtilTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"/build/unittest/test_data/', '"/generated/test/test_data/')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.dynamic.bundle_test/unittest')
        into new File(targetRootDir, 'com.ibm.ws.dynamic.bundle/test')
        include 'PackageDefineTestResources/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.ejbcontainer_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.ejbcontainer/test')
        include 'com/ibm/ws/ejbcontainer/osgi/internal/PassivationDirectoryTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('build/unittest/tmp', 'bin_test/tmp')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.kernel.feature_test/unittest')
        into new File(targetRootDir, 'com.ibm.ws.kernel.feature/test')
        include 'resolverData/**'
        include 'test data/**'
        include 'simple*.mf'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.kernel.feature_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.kernel.feature/test')
        include 'com/ibm/ws/kernel/feature/internal/FeatureResolverTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"../com.ibm.ws.kernel.feature_test/build/unittest/resolverData"', '"generated/test/resolverData"')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.kernel.feature_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.kernel.feature/test')
        include 'test/utils/SharedConstants.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"../com.ibm.ws.kernel.feature_test/build/unittest/test data', '"generated/test/test data')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.kernel.filemonitor_test/unittest')
        into new File(targetRootDir, 'com.ibm.ws.kernel.filemonitor/test')
        include 'test data/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.kernel.filemonitor_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.kernel.filemonitor/test')
        include 'test/utils/TestUtils.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line
                .replace('"../com.ibm.ws.kernel.filemonitor_test/unittest/test data"', '"bin_test/test data"')
                .replace('"../com.ibm.ws.kernel.filemonitor_test/build/unittest/tmp"', '"generated/test/tmp"')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.kernel.metatype.helper_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.kernel.metatype.helper/test')
        include 'com/ibm/wsspi/config/internal/FilesetTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"build/tmp/', '"generated/tmp/')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.logging_test/unittest')
        into new File(targetRootDir, 'com.ibm.ws.logging/test')
        include 'properties/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.logging_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.logging/test')
        include 'com/ibm/ejs/ras/TrRegisterTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"build/trace-logs/', '"generated/logs/')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.logging_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.logging/test')
        include 'com/ibm/websphere/ras/TraceComponentTest.java'
        include 'com/ibm/websphere/ras/TrConfiguratorTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"unittest/properties/', '"test/properties/')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.logging_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.logging/test')
        include 'com/ibm/ws/logging/internal/impl/BaseTraceFormatterTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line
                .replace('"] 00000001 ', '"] 0000000b ')
                .replace(' thread=[main]"', ' thread=[Test worker]"')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.logging_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.logging/test')
        include 'test/TestConstants.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line
                .replace('"../com.ibm.ws.logging_test/unittest/test data/"', '"test/test data/"')
                .replace('"../com.ibm.ws.logging_test/build/logs/"', '"generated/logs/"')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.logging_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.logging.osgi/test')
        include 'com/ibm/websphere/ras/SharedTr.java'
        include 'com/ibm/websphere/ras/SharedTraceComponent.java'
        include 'com/ibm/ws/logging/internal/osgi/**'
        include 'test/LoggingTestUtils.java'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.logging_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.logging.osgi/test')
        include 'test/TestConstants.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line
                .replace('"../com.ibm.ws.logging_test/unittest/test data/"', '"test/test data/"')
                .replace('"../com.ibm.ws.logging_test/build/logs/"', '"generated/logs/"')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.org.apache.cxf.jaxws')
        into new File(targetRootDir, 'com.ibm.ws.org.apache.cxf.jaxws')
        include 'cxf-*.bnd'
        filter { String line ->
            line.replaceFirst('build/tmp/bnd/(cxf-.*-2.6.2)', '@lib/$1-ibm-s20170216-1739.jar!/org/apache/cxf/**')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.product.utility_test/resources')
        into new File(targetRootDir, 'com.ibm.ws.product.utility/test')
        include 'lafiles/**'
        include 'md5Tests/**'
        include 'mockInstalls/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.rest.handler_test/unittest')
        into new File(targetRootDir, 'com.ibm.ws.rest.handler/test')
        include 'jsonfile.txt'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.security.authentication.builtin_test')
        into new File(targetRootDir, 'com.ibm.ws.security.authentication.builtin')
        include 'publish/certificates/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.security.registry_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.security.quickstart/test')
        include 'com/ibm/ws/security/registry/UserRegistryIllegalArgumentTemplate.java'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.security.registry_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.security.registry.basic/test')
        include 'com/ibm/ws/security/registry/UserRegistryIllegalArgumentTemplate.java'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.security.token.ltpa_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.security.token.ltpa/test')
        include 'test/UTLocationHelper.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('../com.ibm.ws.security.token.ltpa_test/', 'test-resources/')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.security.token.ltpa_test')
        into new File(targetRootDir, 'com.ibm.ws.security.token.ltpa/test-resources')
        include 'test data/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.security.utility_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.security.utility/test')
        include 'com/ibm/ws/security/utility/utils/FileUtilityTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('com.ibm.ws.security.utility_test', 'com.ibm.ws.security.utility')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.security.wim.core_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.security.wim.registry/test')
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.ssl_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.ssl/test')
        include 'com/ibm/ws/ssl/config/WSKeyStoreTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('../com.ibm.ws.ssl_test/unittest/', 'test/')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.ssl_test/unittest')
        into new File(targetRootDir, 'com.ibm.ws.ssl/test')
        include 'files/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.transaction_test/resources')
        into new File(targetRootDir, 'com.ibm.ws.transaction/test-resources')
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.webcontainer_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.webcontainer/test')
        include 'com/ibm/ws/webcontainer/osgi/mbeans/PluginGeneratorTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"build/unittest/', '"bin_test/')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.webcontainer_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.webcontainer/test')
        include 'com/ibm/ws/webcontainer/webapp/config/WebFragmentMergerTest.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line.replace('"resources/', '"test-resources/')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.webcontainer_test/resources')
        into new File(targetRootDir, 'com.ibm.ws.webcontainer/test-resources')
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.webcontainer.security_test')
        into new File(targetRootDir, 'com.ibm.ws.webcontainer.security')
        include 'publish/certificates/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.wsoc/resources')
        into new File(targetRootDir, 'com.ibm.ws.wsoc/test')
        include 'META-INF/services/**'
    }
    copy {
        from sourceRootDir
        into targetRootDir
        include 'com.ibm.ws.classloading_test/**'
        include 'com.ibm.ws.security.jaas.common_test/**'
        include 'wlp.lib.extract_test/**'
        exclude '*/build-unittest.xml'
        exclude '*/delivery.sets'
        exclude '*/unittest/**'
        exclude 'wlp.lib.extract_test/jar/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.classloading_test/unittest')
        into new File(targetRootDir, 'com.ibm.ws.classloading_test/test-resources')
        include 'PackageDefineTestResources/**'
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.classloading_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.classloading_test/test')
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.security.jaas.common_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.security.jaas.common_test/test')
    }
    copy {
        from new File(sourceRootDir, 'wlp.lib.extract_test/unittest/src')
        into new File(targetRootDir, 'wlp.lib.extract_test/test')
    }
    copy {
        from sourceRootDir
        into targetRootDir
        include 'com.ibm.ws.classloading_test/.classpath.gradle'
        include 'com.ibm.ws.classloading_test/bnd.bnd.gradle'
        include 'com.ibm.ws.security.jaas.common_test/.classpath.gradle'
        include 'com.ibm.ws.security.jaas.common_test/bnd.bnd.gradle'
        include 'wlp.lib.extract_test/.classpath.gradle'
        include 'wlp.lib.extract_test/bnd.bnd.gradle'
        rename { String fileName ->
            fileName.replace('.gradle', '')
        }
    }
    copy {
        from new File(sourceRootDir, 'com.ibm.ws.classloading_test/unittest/src')
        into new File(targetRootDir, 'com.ibm.ws.classloading_test/test')
        include 'com/ibm/ws/classloading/internal/TestUtil.java'
        filteringCharset = 'UTF-8'
        filter { String line ->
            line
                .replace('"../com.ibm.websphere.javaee.servlet.3.1/lib/com.ibm.ws.javaee.servlet.3.1.jar"', '"servlet.jar.location"')
                .replace('"classloading_test/.*", "classloading_test.jar" + otherSource + "/build/classes/"', '"classloading_test/.*", "classloading_test.jar" + otherSource + "/bin/"')
                .replace('File(SERVLET_JAR_LOCATION)', 'File(System.getProperty(SERVLET_JAR_LOCATION))')
        }
    }
    delete fileTree(dir: targetRootDir , include: 'com.ibm.ws.logging/test/com/ibm/ws/logging/internal/osgi/**')
    new File(targetRootDir, 'com.ibm.ws.logging/test/com/ibm/ws/logging/internal/osgi').delete()
    new File(targetRootDir, 'com.ibm.ws.jaxws.common/test/com/ibm/ws/jaxws/utils/StAXUtilsTest.java').delete()
    new File(targetRootDir, 'com.ibm.ws.security.jaas.common/test/com/ibm/ws/security/jaas/common/internal/JAASLoginModuleConfigImplTestWithMock.java').delete()
    new File(targetRootDir, 'com.ibm.ws.security.jaas.common/test/com/ibm/ws/security/jaas/common/internal/JAASSecurityConfigurationTest.java').delete()
    new File(targetRootDir, 'com.ibm.ws.security.jaas.common/test/com/ibm/ws/security/jaas/common/modules/WSLoginModuleProxyTest.java').delete()
    new File(targetRootDir, 'com.ibm.ws.security.jaas.common/test/com/ibm/ws/security/jaas/common/modules').delete()
}

void copyOverlay(File sourceRootDir, File targetRootDir) {
    File overlayDir = new File(sourceRootDir, 'cnf/gradle/transform/overlay')
    if (overlayDir.exists()) {
        FileTree tree = fileTree(overlayDir).include('com.ibm.*/**')
        tree.visit { element ->
            if (!element.isDirectory()) {
                copy {
                    from overlayDir
                    into targetRootDir
                    include "$element.relativePath"
                }
            }
        }
    }
    File deleteDir = new File(sourceRootDir, 'cnf/gradle/transform/delete')
    if (deleteDir.exists()) {
        FileTree tree = fileTree(deleteDir).include('com.ibm.*/**')
        tree.visit { element ->
            if (!element.isDirectory()) {
                new File(targetRootDir, "$element.relativePath").delete()
            }
        }
    }
}

void transformCnf(File sourceRootDir, File targetRootDir) {
    println "Transforming cnf project"
    copy {
        from new File(sourceRootDir, 'ant_build/lib')
        into new File(targetRootDir, 'cnf/lib')
        include 'asm-all-5.0.3.jar'
        include 'commons-lang-2.4.jar'
        include 'commons-math-2.2.jar'
        include 'ecj-4.3.1.jar'
        include 'infra.buildtasks-core_4.0.jar'
        include 'jackson-annotations-2.2.3.jar'
        include 'jackson-core-2.2.3.jar'
        include 'jackson-databind-2.2.3.jar'
        include 'jsoup-1.7.2.jar'
        include 'mantis-collections.jar'
        include 'mantis-nls-standalone.jar'
        include 'org.apache.aries.util-1.2.0.jar'
        include 'osgi.core.jar'
        include 'ras-instrumentation.jar'
        include 'wlp-bndPlugins.jar'
        include 'wlp-generateChecksums.jar'
        include 'wlp-metatypeValidator.jar'
    }
    copy {
        from new File(sourceRootDir, 'cnf/resources/bnd')
        into new File(targetRootDir, 'cnf/resources/bnd')
        include '*.gradle'
        rename { String fileName ->
            fileName.replace('.gradle', '')
        }
    }
    copy {
        from new File(sourceRootDir, 'cnf/gradle/transform')
        into targetRootDir
        include '.gradle-wrapper/**'
    }
    copy {
        from new File(sourceRootDir, 'cnf/gradle/transform')
        into targetRootDir
        include 'gradlew'
        include 'gradlew.bat'
        fileMode 0755
    }
    copy {
        from new File(sourceRootDir, 'cnf/gradle/rootdir')
        into targetRootDir
    }
}
