/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
defaultTasks 'clean', 'build'

subprojects {

  plugins.apply 'java'
  plugins.apply 'maven-publish'

  project.version = bnd('Bundle-Version', '1.0') + '.' + branchName + (true ? '-SNAPSHOT' : '')
  
  def props = new Properties()
  file("../generated.properties").withInputStream { props.load(it) }

  repositories {
	  maven {
		 credentials {
			 username props.getProperty("artifactory.download.user")
			 password props.getProperty("artifactory.download.token")
		 }
		 url ("https://" + props.getProperty("artifactory.download.server") + "/artifactory/wasliberty-open-liberty")
	  }
}
configurations {
	binaries
}
dependencies {
	binaries "com.ibm.ws.componenttest:mantis-collections:2.5.0"
	binaries "com.ibm.ws.componenttest:mantis-nls-standalone:2.5.0"
	binaries "com.ibm.ws.componenttest:infra.buildtasks-core:4.0.0"
}

task copyMavenLibs(type: Copy) {
	into "${rootDir}/cnf/mavenlibs"
	from configurations.binaries
}

  publishing {
    repositories {

      if (System.env.PUBLISH_REPO == 'Artifactory') {
        // Remote
        maven {
          if(project.version.endsWith('-SNAPSHOT')) {
             url "${artifactorySnapshotUrl}${matrixParams}"
          } else {
              url "${artifactoryReleaseUrl}${matrixParams}"
          }
          credentials {
            username props.getProperty("artifactory.download.user")
            password props.getProperty("artifactory.download.token")
          }
        }
      } else {
        // Local
        maven {
           url uri("${rootDir}/cnf/${mavenLocalPath}")
        }
      }

    }
  }

  release.dependsOn publish

  task publishWLPJars {
    dependsOn jar
    def publishWlpJarDefault = parseBoolean(bnd('test.project', 'false')) ? 'true' : 'false'
    enabled bnd('publish.tool.jar', '').empty && !parseBoolean(bnd('publish.wlp.jar.disabled', publishWlpJarDefault))
    inputs.files(fileTree( dir: "${buildDir}", include: '*.jar' )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/" + bnd('publish.wlp.jar.suffix', 'lib')
    doLast {
      copy {
        from "${buildDir}"
        into "${rootDir}/build.image/wlp/" + bnd('publish.wlp.jar.suffix', 'lib')
        include bnd('publish.wlp.jar.include', '*.jar')
        if (parseBoolean(bnd('publish.wlp.jar.rename', 'true'))) {
          rename '(.*).jar', '$1' + "_${bnd.bFullVersion}.jar"
        }
      }
    }
  }

  task publishDevApiIBMJavadoc {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}", include: 'com.ibm.websphere.appserver.api.*.javadoc.zip' )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/dev/api/ibm/javadoc"
    doLast {
      copy {
        from "${projectDir}"
        into "${rootDir}/build.image/wlp/dev/api/ibm/javadoc"
        include 'com.ibm.websphere.appserver.api.*.javadoc.zip'
        rename '.javadoc.zip', "_${bnd.bVersion}-javadoc.zip"
      }
    }
  }

  task publishDevSpiIBMJavadoc {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}", include: 'com.ibm.websphere.appserver.spi.*.javadoc.zip' )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/dev/spi/ibm/javadoc"
    doLast {
      copy {
        from "${projectDir}"
        into "${rootDir}/build.image/wlp/dev/spi/ibm/javadoc"
        include 'com.ibm.websphere.appserver.spi.*.javadoc.zip'
        rename '.javadoc.zip', "_${bnd.bVersion}-javadoc.zip"
      }
    }
  }

  task publishToolScripts {
    enabled !bnd('publish.tool.script', '').empty
    inputs.files(fileTree( dir: "${rootDir}/cnf/resources/bin", include: 'tool.*' )).skipWhenEmpty()
    outputs.files(fileTree( dir: "${rootDir}/build.image/wlp/bin/" + bnd('publish.tool.script.subdir', ''), include: bnd('publish.tool.script', '') ))
    doLast {
      copy {
        from "${rootDir}/cnf/resources/bin"
        into "${rootDir}/build.image/wlp/bin/" + bnd('publish.tool.script.subdir', '')
        rename 'tool(.*)', bnd('publish.tool.script') + '$1'
        filter(org.apache.tools.ant.filters.ReplaceTokens,
               tokens: [TOOL_JAR: bnd('publish.tool.script.subdir', '') + 'tools/' + bnd('publish.tool.jar'),
                        TOOL_SCRIPT: bnd('publish.tool.script.subdir', '') + bnd('publish.tool.script'),
                        TOOL_SCRIPT_DIR_LENGTH: bnd('publish.tool.script.dir.length', '5'),
                        TOOL_SCRIPT_RELATIVE: bnd('publish.tool.script.relative', '')])
      }
    }
  }

  jar {
    dependsOn publishToolScripts
  }

  task publishToolJars {
    dependsOn jar
    enabled !bnd('publish.tool.jar', '').empty
    inputs.files(fileTree( dir: "${buildDir}", include: bnd('publish.tool.jar', '') )).skipWhenEmpty()
    outputs.files(fileTree( dir: "${rootDir}/build.image/wlp/bin/" + bnd('publish.tool.script.subdir', '') + 'tools', include: bnd('publish.tool.jar', '') ))
    doLast {
      copy {
        from "${buildDir}"
        into "${rootDir}/build.image/wlp/bin/" + bnd('publish.tool.script.subdir', '') + 'tools'
        include bnd('publish.tool.jar')
      }
    }
  }
  
  task publishSchemaResources {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/resources/schemas")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/dev/api/ibm/schema"
    doLast {
      copy {
        from "${projectDir}/resources/schemas"
        into "${rootDir}/build.image/wlp/dev/api/ibm/schema"
      }
    }
  }

  task publishFeatureResources {
    dependsOn jar
	dependsOn copyMavenLibs
    inputs.files(fileTree(dir: "${projectDir}", include: '*.feature')).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/lib/features"
    outputs.dir "${buildDir}/repo"
    doLast {
      ant.taskdef(resource: 'com/ibm/ws/wlp/feature/tasks/default.properties') {
        classpath {
          fileset(dir: "${rootDir}/cnf/lib/") {
            include(name: "asm-all-5.0.3.jar")
            include(name: "org.apache.aries.util-*.jar")
            include(name: "osgi.core.jar")
            include(name: "jackson*.jar")
            include(name: "wlp-*.jar")
            include(name: "jsoup-*.jar")
            include(name: "biz.aQute.bnd-3.3.0.jar")
          }
		  fileset(dir: "${rootDir}/cnf/mavenlibs", includes: "infra.buildtasks*.jar")
        }
      }
      new File("${rootDir}/build.image/wlp/lib/features").mkdirs()
      new File("${buildDir}/repo").mkdirs()
      fileTree(dir: "${projectDir}", include: '*.feature').visit { featureFile ->
        if (featureFile.isDirectory()) { 
          return
        }

        ant.featureBnd(bnd: featureFile.name,
                       createESA: "true",
                       dir: "${rootDir}/build.image/wlp",
                       esaDir: "${buildDir}/repo",
                       createFor: "${bnd.gaOrBeta}",
                       buildType: "${bnd.gaOrBeta}",
                       junit: "${buildDir}/report/featureChecks.xml") {
          defaultEdition(licenseURL: "https://www.eclipse.org/legal/epl-v10.html",
                         licensePath: "${rootDir}/build.image/license",
                         version: "${bnd.libertyRelease}",
                         licenseType: "EPL",
                         displayVersion: "OpenLiberty")
          edition(baseEdition: "beta")
          edition(baseEdition: "core",
                  validEditions: "")
          edition(baseEdition: "base",
                  validEditions: "BASE,BASE_ILAN,DEVELOPERS,EXPRESS,ND,zOS")
          edition(baseEdition: "nd",
                  validEditions: "BASE_ILAN,DEVELOPERS,ND,zOS")
          edition(baseEdition: "zos",
                  validEditions: "zOS")
          edition(baseEdition: "bluemix",
                  validEditions: "BLUEMIX")
          edition(baseEdition: "full")
          edition(baseEdition: "unsupported")
        }
      }
      copy {
        from "${projectDir}/resources/l10n"
        into "${rootDir}/build.image/wlp/lib/features/l10n"
      }
    }
  }

  task publishPlatformManifests {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/publish/platform" )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/lib/platform"
    doLast {
      copy {
        from "${projectDir}/publish/platform"
        into "${rootDir}/build.image/wlp/lib/platform"
        exclude '*.mf'
      }
      copy {
        from "${projectDir}/publish/platform"
        into "${rootDir}/build.image/wlp/lib/platform"
        include '*.mf'
        filter(org.apache.tools.ant.filters.ConcatFilter,
          append: file( "${rootDir}/cnf/resources/IBM-ProductID.txt" ))
      }
    }
  }

  task publishTemplates {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/publish/templates")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/templates"
    doLast {
      copy {
        from "${projectDir}/publish/templates"
        into "${rootDir}/build.image/wlp/templates"
      }
    }
  }

  task publishBinScripts {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/publish/bin")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/bin"
    doLast {
      copy {
        from "${projectDir}/publish/bin"
        into "${rootDir}/build.image/wlp/bin"
        fileMode 0755
      }
    }
  }

  task publishClientScripts {
    dependsOn jar
    enabled !parseBoolean(bnd('publish.wlp.clients.disabled', 'false'))
    inputs.files(fileTree( dir: "${projectDir}/publish/clients")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/clients"
    doLast {
      copy {
        from "${projectDir}/publish/clients"
        into "${rootDir}/build.image/wlp/clients"
      }
    }
  }

  task publishLibNative {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/lib/native")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/lib/native"
    doLast {
      copy {
        from "${projectDir}/lib/native"
        into "${rootDir}/build.image/wlp/lib/native"
      }
    }
  }

  task autoFVT {
    dependsOn jar
	dependsOn copyMavenLibs
    enabled new File("${projectDir}/fat").exists()

    // For now we are just forcing the autoFVT create every time, this will be fixed
    // TODO: Be smart about when to recreate the autoFVT.zip
    doLast {

      // Copy the compiled classes
      copy {
        from "${projectDir}/bin/"
        into "${projectDir}/generated/autoFVT/build/classes"
      }

      // Copy the buildtask jars
      copy {
        from "${rootDir}/cnf/lib"
        into "${projectDir}/generated/autoFVT/build/lib"
        include 'asm-all-5.0.3.jar'
        include 'org.apache.aries.util-*.jar'
        include 'osgi.core.jar'
        include 'jackson*.jar'
      }

      // Copy the ws-junit jar
      copy {
        from "${rootDir}/build.sharedResources/lib/ws-junit/ws-junit.jar"
        into "${projectDir}/generated/autoFVT/build/lib"
      }
	  
	  // Copy the infra jar
	  copy {
		from "${rootDir}/cnf/mavenlibs/infra.buildtasks-core-4.0.0.jar"
		into "${projectDir}/generated/autoFVT/build/lib"
	  }
	  

      // Copy the bundle jar
      copy {
        from "${projectDir}/generated/"
        include '*.jar'
        into "${projectDir}/generated/autoFVT/build/lib"
      }

      // Copy the DDL files
      // TODO: Consider if this can be removed, it looks like there's only a single project for this rule
      copy {
        from "${projectDir}/ddl"
        include '**/*'
        into "${projectDir}/generated/autoFVT/ddl"
      }

      // Copy the autoFVT-defaults
      copy {
        from "${rootDir}/fattest.simplicity/autoFVT-defaults"
        include '**/*'
        into "${projectDir}/generated/autoFVT"
      }

      // Copy the component test libs
      // TODO: It looks like the componenttest.app.jar got combined into something else, so this is now way more source in the jar than was there before. This might need changing then.
      copy {
        from "${rootDir}/com.ibm.ws.componenttest/generated"
        include 'com.ibm.ws.componenttest.jar'
        rename 'com.ibm.ws.componenttest.jar', 'componenttest.app.jar'
        into "${projectDir}/generated/autoFVT/lib"
      }

      // Copy the fattest libs
      copy {
        from "${rootDir}/fattest.simplicity/generated/"
        include 'fattest*.*'
        into "${projectDir}/generated/autoFVT/lib"
      }

      // TODO: This is to compensate for the fact that the ant build of fattest.simplicity produced this jar but the gradle build doesn't
      copy {
        from "${rootDir}/com.ibm.ws.common.encoder/generated"
        include 'com.ibm.ws.common.encoder.jar'
        rename 'com.ibm.ws.common.encoder.jar', 'fattest.encoder.jar'
        into "${projectDir}/generated/autoFVT/lib"
      }

      // Copy the published files
      copy {
        from "${projectDir}/publish/files"
        include '**/*'
        into "${projectDir}/generated/autoFVT/lib/LibertyFATTestFiles"
      }

      // Copy the publish directory (minus the 'files' directory)
      copy {
        from "${projectDir}/publish"
        include '**/*'
        exclude 'files'
        into "${projectDir}/generated/autoFVT/publish"
      }

	  // Copy the logging libraries over for use while running FATs
      copy {
        from "${rootDir}/com.ibm.ws.logging.core/generated"
        include 'com.ibm.ws.logging.core.jar'
        into "${projectDir}/generated/autoFVT/lib"
      }
      
      // Copy all non-java app resourecs, such as *.html or *.jsp
	  copy {
		  includeEmptyDirs = false
		  from "${projectDir}"
		  into "${projectDir}/generated/autoFVT/"
		  include 'test-applications/**', 'test-bundles/**', 'test-resourceadapters/**'
		  exclude '**/*.java'
	  }
	  
	  // Generate a .classpath file based on the current bnd classpath:
      def cpString = ""
      sourceSets.main.runtimeClasspath.each { 
  	    cpString += it.getAbsolutePath() + "\n"
      }
      println "Generated FAT classpath: " + cpString
      def cpFile = new File("${projectDir}/generated/autoFVT/generated.classpath")
      cpFile.delete()
      cpFile.createNewFile()
      cpFile.text = cpString
    }
  }

  task zipAutoFVT(type: Zip) {
    dependsOn autoFVT
    from "${projectDir}/generated/autoFVT"
    into 'autoFVT'
    archiveName 'autoFVT.zip'
  }

  task zipProjectFVT(type: Zip) {
    dependsOn zipAutoFVT
    baseName project.name
    into project.name + '/build/lib', {from 'generated/distributions/autoFVT.zip'}

    into project.name, {from 'build-test.xml'}
  }

  assemble {
    dependsOn publishWLPJars
    dependsOn publishDevApiIBMJavadoc
    dependsOn publishDevSpiIBMJavadoc
    dependsOn publishToolJars
    dependsOn publishSchemaResources
    dependsOn publishFeatureResources
    dependsOn publishPlatformManifests
    dependsOn publishTemplates
    dependsOn publishBinScripts
    dependsOn publishClientScripts
    dependsOn publishLibNative
    dependsOn zipProjectFVT
  }

  compileJava {
    if (!parseBoolean(bnd('instrument.disabled', 'false'))) {
      def instrument = fileTree( dir: compileJava.destinationDir, include: bnd('instrument.classesIncludes'), exclude: bnd('instrument.classesExcludes') )
      doLast {
        if (instrument.isEmpty())
          return
        ant.taskdef(name: 'instrumentForTrace', classname: 'com.ibm.ws.ras.instrument.internal.buildtasks.InstrumentForTrace') {
          classpath {
              fileset(dir: "${rootDir}/cnf/lib", includes: "ras-instrumentation.jar")
          }
        }
        ant.instrumentForTrace( ffdc: bnd('instrument.ffdc'), taskInjection: bnd('instrument.taskInjection') ) {
            fileset(dir: compileJava.destinationDir, includes: bnd('instrument.classesIncludes'), excludes: bnd('instrument.classesExcludes'))
        }
      }
    }
  }

  task globalize {
    dependsOn copyMavenLibs
    enabled !parseBoolean(bnd('globalize.disabled', 'false'))
      ext.destinationDir = new File(buildDir, "src/${name}/java")
      inputs.files(fileTree(dir: "${projectDir}/resources", include: '**/*.nlsprops')).skipWhenEmpty()
      outputs.dir destinationDir
      doLast {
        copy {
          from "${projectDir}/resources"
          into destinationDir
          include '**/package-info.java'
        }
        ant.taskdef(resource: 'com/ibm/mantis/nls/antlib.xml') {
          classpath {
              fileset(dir: "${rootDir}/cnf/lib", includes: "commons-*.jar")
              fileset(dir: "${rootDir}/cnf/mavenlibs", includes: "mantis-*.jar")
          }
        }
        ant.validate() {
          fileset(dir: "${projectDir}/resources", includes: "**/*.nlsprops", excludes: "**/*_*.nlsprops")
          completenessvalidator(messagesonly: "false")
          duplicatekeyvalidator()
          metadatavalidator()
          contentvalidator(constraint: "disallowed", pattern: '"\\{\\d+\\}"', loglevel: "warning", message: "variables should not be encapsulated in quotation marks") {
              keyfilter {
                  exclude(name: "*.explanation")
                  exclude(name: "*.useraction")
              }
          }
          contentvalidator(constraint: "disallowed", pattern: "\\{\\d+\\}", loglevel: "warning", message: "variables are disallowed in explanations or useractions") {
              keyfilter {
                  exclude(name: "*.explanation")
                  exclude(name: "*.useraction")
              }
          }
          contentvalidator(constraint: "disallowed", pattern: "\\b((WAS)|(TAM)|(WIM)|(WPS)|(eWAS)|(LUW)|(ND)|(MQSeries))\\b", loglevel: "warning", message: "product acronyms are disallowed")
          contentvalidator(constraint: "disallowed", pattern: "([A-Z0-9]{4,5})(\\d{4})([IWE]):\\S", loglevel: "error", message: "malformed message")
        }
        ant.normalize(dest: "${buildDir}/nlsbuild/normalized", defaultencoding: "ISO-8859-1") {
          fileset(dir: "${projectDir}/resources", includes: "**/*.nlsprops")
          encodingtable(encodings: "${rootDir}/cnf/resources/EncodingTable.properties")
          globmapper(from: "*.nlsprops", to: "*.normalized")
        }
        ant.commonize(dest: "${buildDir}/nlsbuild/normalized", commonmessagefile: "${rootDir}/cnf/resources/nls/commonmessages.properties") {
          fileset(dir: "${buildDir}/nlsbuild/normalized", includes: "**/*.normalized")
        }
        ant.transform() {
          fileset(dir: "${buildDir}/nlsbuild/normalized", includes: "**/*.normalized")
          javatransformer(dest: destinationDir) {
            keyfilter {
              exclude(name: "*.explanation")
              exclude(name: "*.useraction")
            }
          }
        }
      }
  }

  task copyPiiFiles {
    enabled !parseBoolean(bnd('copy.pii.disabled', 'false'))
    ext.destinationDir = new File(rootDir, "build.pii.package/nlssrc/${project.name}")
    inputs.files(fileTree(dir: "${projectDir}/resources", includes: ['**/*.nlsprops', 'OSGI-INF/l10n/*.properties', 'l10n/*.properties'])).skipWhenEmpty()
    outputs.dir destinationDir
    doLast {
      copy {
        from "${projectDir}/resources"
        into destinationDir
        include '**/*.nlsprops'
        include 'OSGI-INF/l10n/*.properties'
        include 'l10n/*.properties'
      }
    }
  }

  sourceSets {
    main {
      java.srcDir globalize.destinationDir
    }
  }

  compileJava {
    dependsOn globalize
    options.warnings = false
    options.fork = true
  }

  test {
    environment("WLP_INSTALL_DIR", "${rootDir}/build.image/wlp")
    jvmArgs "-Dtest.buildDir=${buildDir}"
    jvmArgs "-Djava.io.tmpdir=${buildDir}/tmp"
  }

  test {
	dependsOn copyMavenLibs
    def testports = fileTree(dir: "${projectDir}/bin_test", include: 'unittestports.properties')
    doFirst {
      if (testports.isEmpty())
        return
      ant.taskdef(name: 'portSelector', classname: 'com.ibm.aries.buildtasks.PortSelector') {
        classpath {
          fileset(dir: "${rootDir}/cnf/mavenlibs", includes: "infra.buildtasks*.jar")
        }
      }
      ant.portSelector(engineName: "${bnd.buildEngineName}", location: "${projectDir}/bin_test/unittestports.properties", jvmarg: 'jvmargPorts')
      jvmArgs ant.jvmargPorts.tokenize()
    }
  }

  publishing {
    publications {
      // Publish each feature ESA
      fileTree(dir: "${buildDir}/repo", include: '*.esa').visit { esa ->
        if (esa.isDirectory()) return
        def featureName = esa.name.substring(0, esa.name.size()-4);
        maven(MavenPublication) {
          artifactId featureName
          version project.version
          artifact "${buildDir}/repo/${featureName}" + ".esa"
        }
      }
    }
  }
  
}

task zipOpenLiberty(type: Zip) {
    dependsOn subprojects.assemble
    baseName 'openliberty'
    from 'build.image/wlp'
    destinationDir file('build.image/generated/distributions')
}

task zipMessageFiles(type: Zip) {
    dependsOn subprojects.copyPiiFiles
    baseName 'openPII'
    from 'build.pii.package/nlssrc'
    destinationDir file('build.pii.package/generated/distributions')
}

private boolean parseBoolean(String value) {
    return 'on'.equalsIgnoreCase(value) || 'true'.equalsIgnoreCase(value)
}
