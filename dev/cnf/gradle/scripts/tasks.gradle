/* Visualization of task graph plugin
plugins {
  id "cz.malohlava" version "1.0.1"
}
*/

defaultTasks 'clean', 'build'

subprojects {

  plugins.apply 'java'

  task publishWLPJars {
    dependsOn jar
    enabled bnd('publish.feature.resources', '').empty && bnd('publish.tool.jar', '').empty && !parseBoolean(bnd('publish.wlp.jar.disabled', 'false'))
    inputs.files(fileTree( dir: "${buildDir}", include: '*.jar' )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/" + bnd('publish.wlp.jar.suffix', 'lib')
    doLast {
      copy {
        from "${buildDir}"
        into "${rootDir}/build.image/wlp/" + bnd('publish.wlp.jar.suffix', 'lib')
        include bnd('publish.wlp.jar.include', '*.jar')
        if (parseBoolean(bnd('publish.wlp.jar.rename', 'true'))) {
          rename '(.*).jar', '$1' + "_${bnd.bFullVersion}.jar"
        }
      }
    }
  }

  task publishToolJars {
    dependsOn jar
    enabled !bnd('publish.tool.jar', '').empty
    inputs.files(fileTree( dir: "${buildDir}", include: bnd('publish.tool.jar', '') )).skipWhenEmpty()
    outputs.files(fileTree( dir: "${rootDir}/build.image/wlp/bin/tools", include: bnd('publish.tool.jar', '') ))
    doLast {
      if (!bnd('publish.tool.script', '').empty) {
        copy {
          from "${rootDir}/cnf/resources/bin"
          into "${rootDir}/build.image/wlp/bin"
          rename 'tool(.*)', bnd('publish.tool.script') + '$1'
          filter(org.apache.tools.ant.filters.ReplaceTokens,
                 tokens: [TOOL_JAR: 'tools/' + bnd('publish.tool.jar'), TOOL_SCRIPT: bnd('publish.tool.script'),
                          TOOL_SCRIPT_DIR_LENGTH: '5', TOOL_SCRIPT_RELATIVE: ''])
        }
      }
      copy {
        from "${buildDir}"
        into "${rootDir}/build.image/wlp/bin/tools"
        include bnd('publish.tool.jar')
      }
    }
  }

  task publishFeatureResources {
    dependsOn jar
    enabled !bnd('publish.feature.resources', '').empty
    inputs.files(fileTree( dir: "${projectDir}/resources", include: bnd('publish.feature.resources', '') )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/lib/features"
    doLast {
      copy {
        from "${projectDir}/resources"
        into "${rootDir}/build.image/wlp/lib/features"
        include bnd('publish.feature.resources')
        exclude '*.mf'
      }
      copy {
        from "${projectDir}/resources"
        into "${rootDir}/build.image/wlp/lib/features"
        include '*.mf'
        expand(mfProductEdition: bnd('mfProductEdition'), mfProductVersion: bnd('mfProductVersion'))
      }
    }
  }

  task publishPlatformManifests {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/publish/platform" )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/lib/platform"
    doLast {
      copy {
        from "${projectDir}/publish/platform"
        into "${rootDir}/build.image/wlp/lib/platform"
        exclude '*.mf'
      }
      copy {
        from "${projectDir}/publish/platform"
        into "${rootDir}/build.image/wlp/lib/platform"
        include '*.mf'
        filter(org.apache.tools.ant.filters.ConcatFilter,
          append: file( "${rootDir}/cnf/resources/IBM-ProductID.txt" ))
      }
    }
  }

  task publishTemplates {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/publish/templates")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/templates"
    doLast {
      copy {
        from "${projectDir}/publish/templates"
        into "${rootDir}/build.image/wlp/templates"
      }
    }
  }

  task publishBinScripts {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/publish/bin")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/bin"
    doLast {
      copy {
        from "${projectDir}/publish/bin"
        into "${rootDir}/build.image/wlp/bin"
        fileMode 0755
      }
    }
  }

  task publishClientScripts {
    dependsOn jar
    enabled !parseBoolean(bnd('publish.wlp.clients.disabled', 'false'))
    inputs.files(fileTree( dir: "${projectDir}/publish/clients")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/clients"
    doLast {
      copy {
        from "${projectDir}/publish/clients"
        into "${rootDir}/build.image/wlp/clients"
      }
    }
  }

  task publishLibNative {
    dependsOn jar
    inputs.files(fileTree( dir: "${projectDir}/lib/native")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image/wlp/lib/native"
    doLast {
      copy {
        from "${projectDir}/lib/native"
        into "${rootDir}/build.image/wlp/lib/native"
      }
    }
  }

  task autoFVT {
    dependsOn jar
    enabled new File("${projectDir}/fat").exists()

    // For now we are just forcing the autoFVT create every time, this will be fixed
    // TODO: Be smart about when to recreate the autoFVT.zip
    doLast {

      // Copy the compiled classes
      copy {
        from "${projectDir}/bin/"
        into "${projectDir}/generated/autoFVT/build/classes"
      }

      copy {
        from "${rootDir}/cnf/lib"
        into "${projectDir}/generated/autoFVT/build/lib"
        include 'infra.buildtasks-core_4.0*.jar'
        include 'asm-all-5.0.3.jar'
        include 'org.apache.aries.util-*.jar'
        include 'osgi.core.jar'
        include 'jackson*.jar'
      }
    }
  }

  task zipAutoFVT(type: Zip) {
    dependsOn autoFVT
    from "${projectDir}/generated/autoFVT"
    into 'autoFVT'
    baseName 'autoFVT'
  }

  task zipProjectFVT(type: Zip) {
    dependsOn zipAutoFVT
    baseName project.name
    from 'build-test.xml'
    into 'build/lib', {from 'generated/distributions/autoFVT.zip'}
  }

  assemble {
    dependsOn publishWLPJars
    dependsOn publishToolJars
    dependsOn publishFeatureResources
    dependsOn publishPlatformManifests
    dependsOn publishTemplates
    dependsOn publishBinScripts
    dependsOn publishClientScripts
    dependsOn publishLibNative
    dependsOn zipProjectFVT
  }

  /*publishing {
    enabled new File("${projectDir}/fat").exists()
    publications {
      maven(MavenPublication) {
        artifactId project.name
        version bnd('Bundle-Version', '1.0') + '.' + branchName + (!'master'.equals(branchName) ? '-SNAPSHOT' : '')
        artifact zipProjectFVT
      }
    }
  }*/

  task generateToolBinScripts {
    enabled !bnd('publish.tool.jar', '').empty
    doLast {
      if (!bnd('publish.tool.script', '').empty) {
        copy {
          from "${rootDir}/cnf/resources/bin"
          into "${rootDir}/build.image.kernel.bin/generated/content/bin"
          rename 'tool(.*)', bnd('publish.tool.script') + '$1'
          filter(org.apache.tools.ant.filters.ReplaceTokens,
                 tokens: [TOOL_JAR: 'tools/' + bnd('publish.tool.jar'), TOOL_SCRIPT: bnd('publish.tool.script'),
                          TOOL_SCRIPT_DIR_LENGTH: '5', TOOL_SCRIPT_RELATIVE: ''])
        }
      }
    }
  }

  task generateFeatureResources {
    enabled !bnd('publish.feature.resources', '').empty
    inputs.files(fileTree( dir: "${projectDir}/resources", include: bnd('publish.feature.resources', '') )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image.kernel.bin/generated/content/features"
    doLast {
      copy {
        from "${projectDir}/resources"
        into "${rootDir}/build.image.kernel.bin/generated/content/features"
        include bnd('publish.feature.resources')
      }
    }
  }

  task generatePlatformManifests {
    inputs.files(fileTree( dir: "${projectDir}/publish/platform" )).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image.kernel.bin/generated/content/platform"
    doLast {
      copy {
        from "${projectDir}/publish/platform"
        into "${rootDir}/build.image.kernel.bin/generated/content/platform"
        exclude '*.mf'
      }
      copy {
        from "${projectDir}/publish/platform"
        into "${rootDir}/build.image.kernel.bin/generated/content/platform"
        include '*.mf'
        filter(org.apache.tools.ant.filters.ConcatFilter,
          append: file( "${rootDir}/cnf/resources/IBM-ProductID.txt" ))
      }
    }
  }

  task generateTemplates {
    inputs.files(fileTree( dir: "${projectDir}/publish/templates")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image.kernel.bin/generated/content/templates"
    doLast {
      copy {
        from "${projectDir}/publish/templates"
        into "${rootDir}/build.image.kernel.bin/generated/content/templates"
      }
    }
  }

  task generateBinScripts {
    inputs.files(fileTree( dir: "${projectDir}/publish/bin")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image.kernel.bin/generated/content/bin"
    doLast {
      copy {
        from "${projectDir}/publish/bin"
        into "${rootDir}/build.image.kernel.bin/generated/content/bin"
        fileMode 0755
      }
    }
  }

  task generateClientScripts {
    inputs.files(fileTree( dir: "${projectDir}/publish/clients")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image.kernel.bin/generated/content/clients"
    doLast {
      copy {
        from "${projectDir}/publish/clients"
        into "${rootDir}/build.image.kernel.bin/generated/content/clients"
      }
    }
  }

  task generateLibNative {
    inputs.files(fileTree( dir: "${projectDir}/lib/native")).skipWhenEmpty()
    outputs.dir "${rootDir}/build.image.kernel.bin/generated/content/native"
    doLast {
      copy {
        from "${projectDir}/lib/native"
        into "${rootDir}/build.image.kernel.bin/generated/content/native"
      }
    }
  }

  jar {
    dependsOn generateToolBinScripts
    dependsOn generateFeatureResources
    dependsOn generatePlatformManifests
    dependsOn generateTemplates
    dependsOn generateBinScripts
    dependsOn generateClientScripts
    dependsOn generateLibNative
  }

  compileJava {
    if (!parseBoolean(bnd('instrument.disabled', 'false'))) {
      def instrument = fileTree( dir: compileJava.destinationDir, include: bnd('instrument.classesIncludes'), exclude: bnd('instrument.classesExcludes') )
      doLast {
        if (instrument.isEmpty())
          return
        ant.taskdef(name: 'instrumentForTrace', classname: 'com.ibm.ws.ras.instrument.internal.buildtasks.InstrumentForTrace') {
          classpath {
              fileset(dir: "${rootDir}/cnf/lib", includes: "ras-instrumentation.jar")
          }
        }
        ant.instrumentForTrace( ffdc: bnd('instrument.ffdc'), taskInjection: bnd('instrument.taskInjection') ) {
            fileset(dir: compileJava.destinationDir, includes: bnd('instrument.classesIncludes'), excludes: bnd('instrument.classesExcludes'))
        }
      }
    }
  }

  task globalize {
    enabled !parseBoolean(bnd('globalize.disabled', 'false'))
      ext.destinationDir = new File(buildDir, "src/${name}/java")
      inputs.files(fileTree(dir: "${projectDir}/resources", include: '**/*.nlsprops')).skipWhenEmpty()
      outputs.dir destinationDir
      doLast {
        copy {
          from "${projectDir}/resources"
          into destinationDir
          include '**/package-info.java'
        }
        ant.taskdef(resource: 'com/ibm/mantis/nls/antlib.xml') {
          classpath {
              fileset(dir: "${rootDir}/cnf/lib", includes: "mantis-*.jar,commons-*.jar")
          }
        }
        ant.validate() {
          fileset(dir: "${projectDir}/resources", includes: "**/*.nlsprops", excludes: "**/*_*.nlsprops")
          completenessvalidator(messagesonly: "false")
          duplicatekeyvalidator()
          metadatavalidator()
          contentvalidator(constraint: "disallowed", pattern: '"\\{\\d+\\}"', loglevel: "warning", message: "variables should not be encapsulated in quotation marks") {
              keyfilter {
                  exclude(name: "*.explanation")
                  exclude(name: "*.useraction")
              }
          }
          contentvalidator(constraint: "disallowed", pattern: "\\{\\d+\\}", loglevel: "warning", message: "variables are disallowed in explanations or useractions") {
              keyfilter {
                  exclude(name: "*.explanation")
                  exclude(name: "*.useraction")
              }
          }
          contentvalidator(constraint: "disallowed", pattern: "\\b((WAS)|(TAM)|(WIM)|(WPS)|(eWAS)|(LUW)|(ND)|(MQSeries))\\b", loglevel: "warning", message: "product acronyms are disallowed")
          contentvalidator(constraint: "disallowed", pattern: "([A-Z0-9]{4,5})(\\d{4})([IWE]):\\S", loglevel: "error", message: "malformed message")
        }
        ant.normalize(dest: "${buildDir}/nlsbuild/normalized", defaultencoding: "ISO-8859-1") {
          fileset(dir: "${projectDir}/resources", includes: "**/*.nlsprops")
          encodingtable(encodings: "${rootDir}/cnf/resources/EncodingTable.properties")
          globmapper(from: "*.nlsprops", to: "*.normalized")
        }
        ant.commonize(dest: "${buildDir}/nlsbuild/normalized", commonmessagefile: "${rootDir}/cnf/resources/nls/commonmessages.properties") {
          fileset(dir: "${buildDir}/nlsbuild/normalized", includes: "**/*.normalized")
        }
        ant.transform() {
          fileset(dir: "${buildDir}/nlsbuild/normalized", includes: "**/*.normalized")
          javatransformer(dest: destinationDir) {
            keyfilter {
              exclude(name: "*.explanation")
              exclude(name: "*.useraction")
            }
          }
        }
      }
  }

  sourceSets {
    main {
      java.srcDir globalize.destinationDir
    }
  }

  compileJava {
    dependsOn globalize
    options.warnings = false
    options.fork = true
  }

  test {
    environment("WLP_INSTALL_DIR", "${rootDir}/build.image/wlp")
    jvmArgs "-Dtest.buildDir=${buildDir}"
    jvmArgs "-Djava.io.tmpdir=${buildDir}/tmp"
  }

  test {
    def testports = fileTree(dir: "${projectDir}/bin_test", include: 'unittestports.properties')
    doFirst {
      if (testports.isEmpty())
        return
      ant.taskdef(name: 'portSelector', classname: 'com.ibm.aries.buildtasks.PortSelector') {
        classpath {
          fileset(dir: "${rootDir}/cnf/lib", includes: 'infra.buildtasks-core_4.0.jar')
        }
      }
      ant.portSelector(engineName: "${bnd.buildEngineName}", location: "${projectDir}/bin_test/unittestports.properties", jvmarg: 'jvmargPorts')
      jvmArgs ant.jvmargPorts.tokenize()
    }
  }
}

private boolean parseBoolean(String value) {
    return 'on'.equalsIgnoreCase(value) || 'true'.equalsIgnoreCase(value)
}
