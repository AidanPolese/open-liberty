
task initialize {
    doLast {
        println "Gradle Initialized"
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

task createIvyXml {
    doLast {
        String depsList = ""
        fileTree(dir: "${rootDir}", include: '*').visit { element ->
            if (element.isDirectory()) {
                String relativePath = "$element.relativePath"
                def bndProject = bndWorkspace.getProject(relativePath)
                if (bndProject != null && !bndProject.isNoBundles()) {
                    String artifact = ""
                    def excludeProjects = ["com.ibm.ws.componenttest",
                                        "com.ibm.ws.httpservice",
                                        "fattest.simplicity"]
                    for (String bsn : bndProject.getBsns()) {
                        def org = ""
                        def name = ""
                        if (bsn.contains('_test') ||
                            bsn.contains('_bvt') ||
                            bsn.contains('_fat') ||
                            excludeProjects.contains(bsn)) {
                            (org, name) = ['test', bsn]
                        } else if (bsn.startsWith('com.ibm.websphere.appserver.api') ||
                                   bsn.startsWith('com.ibm.websphere.appserver.spi')) {
                            (org, name) = [bsn.substring(0,31), bsn]
                        } else {
                            (org, name) = ['dev', bsn]
                        }
                        depsList = depsList + '        <dependency org="' + org + '" name="' + name + '" rev="latest.integration"/>\n'
                        //println "org=" + org + ", name=" + name
                        }
                }
            }
        }
        File ivyXml = new File("${buildDir}/ivy.xml")
        ivyXml.createNewFile()
        ivyXml.text = """<ivy-module version="2.0">
  <info organisation="dev" module="prereq.published"/>
  <dependencies>
$depsList  </dependencies>
</ivy-module>
"""
    }
}

task createGeneratedReplacementProjects {
    doLast {
        File templateDir = new File(projectDir, 'gradle/projects.for.ivy.ant')
        fileTree(dir: "${rootDir}", include: '*').visit { element ->
            if (element.isDirectory()) {
                String relativePath = "$element.relativePath"
                def bndProject = bndWorkspace.getProject(relativePath)
                def excludeProjects = ["com.ibm.ws.componenttest",
                                        "com.ibm.ws.httpservice",
                                        "fattest.simplicity",
                                        "com.ibm.ws.org.apache.ant"]
                if (relativePath.contains('_test') ||
                    relativePath.contains('_bvt') ||
                    relativePath.contains('_fat') ||
                    excludeProjects.contains(relativePath))
                    return;
                if (bndProject != null && !bndProject.isNoBundles()) {
                    String firstBsn = bndProject.getBsns()[0]
                    String artifact = firstBsn + '-' + bndProject.getVersion(firstBsn) + '.jar'
                    //println "projectName=" + relativePath + ", artifact=" + artifact
                    File targetDir = new File(buildDir, 'replacements/' + relativePath)
                    targetDir.mkdirs()
                    copy {
                        from templateDir
                        into targetDir
                        include '*.template'
                        rename { String fileName ->
                            fileName.replace('.template', '')
                        }
                        filter(ReplaceTokens, tokens: [PROJECT_NAME: relativePath, MAVEN_ARTIFACT: artifact])
                    }
                    if (bndProject.getBsns().size() > 1) {
                        String classpathEntries = ""
                        //println bndProject.getBsns()
                        for (String bsn : bndProject.getBsns()) {
                            artifact = bsn + '-' + bndProject.getVersion(bsn) + '.jar'
                            classpathEntries = '    <classpathentry exported="true" kind="lib" path="/prereq.published/lib/' + artifact + '"/>\n' + classpathEntries
                        }
                        File classpathFile = new File(buildDir, "replacements/${relativePath}/.classpath")
                        classpathFile.delete()
                        classpathFile.createNewFile()
                        classpathFile.text = """<?xml version="1.0" encoding="UTF-8"?>
<classpath>
$classpathEntries</classpath>
"""
                    }
                }
            }
        }
    }
}

task zipIvyBootstrap(type: Zip) {
    dependsOn createIvyXml
    dependsOn createGeneratedReplacementProjects
    baseName 'ivy-bootstrap'
    into 'prereq.published', {from 'generated/ivy.xml'}
    from 'generated/replacements'
}

publishing {
  publications {
    maven(MavenPublication) {
      artifactId 'ivy-bootstrap'
      version project.version
      artifact zipIvyBootstrap
    }
  }
}
