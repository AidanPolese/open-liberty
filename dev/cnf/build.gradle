
task initialize {
    doLast {
        println "Gradle Initialized"
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

task createIvyXml {
    doLast {
        def String depsList = ""
        fileTree(dir: "${projectDir}/maven-local", include: '**/*.pom').visit { element ->
            if (!element.isDirectory()) {
                String relativePath = "$element.relativePath"
                String orgPrefix = ""
                if (relativePath.startsWith('com/ibm/websphere/appserver/')) {
                    relativePath = relativePath.substring(28)
                    orgPrefix = 'com.ibm.websphere.appserver.'
                }
                def (org, name) = relativePath.tokenize('/')
                depsList = depsList + '        <dependency org="' + orgPrefix + org + '" name="' + name + '" rev="latest.integration"/>\n'
            }
        }
        File ivyXml = new File("${buildDir}/ivy.xml")
        ivyXml.createNewFile()
        ivyXml.text = """<ivy-module version="2.0">
  <info organisation="dev" module="prereq.published"/>
  <dependencies>
$depsList  </dependencies>
</ivy-module>
"""
    }
}

task createGeneratedReplacementProjects {
    Properties props = new Properties()
    file("${projectDir}/gradle/transform/project-artifact-map.properties").withReader {
        props.load(it)
    }
    doLast {
        File templateDir = new File(projectDir, 'gradle/projects.for.ivy.ant')
        boolean seenCxfJaxWs = false
        boolean processedCxfJaxWs = false
        String classpathEntries = ""
        props.keys().each { projectName ->
            String artifact = props.getProperty(projectName)
            println 'projectName=' + projectName + ', artifact=' + artifact
            if (projectName.startsWith('com.ibm.ws.org.apache.cxf.jaxws.')) {
                projectName = 'com.ibm.ws.org.apache.cxf.jaxws'
                classpathEntries = '	<classpathentry exported="true" kind="lib" path="/prereq.published/lib/' + artifact + '"/>\n' + classpathEntries
            }
            File targetDir = new File(buildDir, 'replacements/' + projectName)
            targetDir.mkdirs()
            copy {
                from templateDir
                into targetDir
                include '*.template'
                rename { String fileName ->
                    fileName.replace('.template', '')
                }
                filter(ReplaceTokens, tokens: [PROJECT_NAME: projectName, MAVEN_ARTIFACT: artifact])
            }
        }
        File classpathFile = new File(buildDir, 'replacements/com.ibm.ws.org.apache.cxf.jaxws/.classpath')
        classpathFile.delete()
        classpathFile.createNewFile()
        classpathFile.text = """<?xml version="1.0" encoding="UTF-8"?>
<classpath>
$classpathEntries</classpath>
"""
    }
}
