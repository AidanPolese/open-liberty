/*
 * IBM Confidential
 *
 * OCO Source Materials
 *
 * Copyright IBM Corp. 2011
 *
 * The source code for this program is not published or otherwise divested
 * of its trade secrets, irrespective of what has been deposited with the
 * U.S. Copyright Office.
 */
/*-------------------------------------------------------------------*/
/* This is a sample function definition file for the server          */
/* authorized function module (BBGZSAFM).  Adding functions to       */
/* the list will cause entries to be put into the BBGZSAFM as well   */
/* as generate stubs to these functions which can be used in the     */
/* client.  There should be one definition file per component area   */
/* in Lexington.                                                     */
/*                                                                   */
/* AUTH_DEF(name, auth_string, impl, arg_type)                       */
/*                                                                   */
/* where:                                                            */
/*   arg_type = The type of struct that you are passing to the       */
/*              function as an argument.  You are only allowed to    */
/*              pass one argument and it must be a struct.  If your  */
/*              function requires return parameters, you must pass   */
/*              them by reference in the struct.                     */
/*   impl = The name of the function implementation.  Your           */
/*          implementation must reside in the BBGZSAFM load module.  */
/*          Its prototype should take whatever you specified as      */
/*          args for arguments, and have no return type (void).      */
/*   name = The eight character name for the function, which is      */
/*          displayed in the eye catcher in the BBGZSAFM.            */
/*   auth_string = The eight character string which is used to build */
/*                 the string used to determine whether the server   */
/*                 process is allowed to call this routine.          */
/*                                                                   */
/* Example: AUTH_DEF("test_fcn", "todo_saf", server_sample_print, struct foo) */
/*   This defines a function named server_sample_print, which takes  */
/*   a struct of type foo as an argument.  Somewhere in the BBGZSAFM */
/*   load module there must be a routine defined as                  */
/*   "void server_sample_print(struct foo*)".  The entry in the      */
/*   BBGZSAFM header will use the string "test_fcn" to define the    */
/*   function, and the string "todo_saf" will be used to build the   */
/*   string which the angel will use to determine if the server can  */
/*   invoke this routine.  A new function, defined as                */
/*   "int server_sample_print_stub(struct foo*)", will be defined    */
/*   and can be called by the client to invoke server_sample_print().*/
/*                                                                   */
/* The stub routine returns an int, which represents the return code */
/* from the INVOKE PC.  The caller should check this return code     */
/* for 0 before trusting the routine ran to completion.  The actual  */
/* function implementation must not define a return type (void).     */
/*                                                                   */
/* The client (server) can call the routine by including the file    */
/* "include/server_function_module_stub.h" and calling               */
/* the function name directly, like so:                              */
/*   #include "include/server_function_module_stub.h"                */
/*   void main() {                                                   */
/*     struct server_function_stubs* stubs_p =                       */
/*             getServerFunctionModuleStubs();                       */
/*     struct foo fcn_parms;                                         */
/*     int pc_rc =                                                   */
/*       stubs_p->authorized.server_sample_print(&fcn_parms);        */
/*   }                                                               */
/*                                                                   */
/* Note: If you add a new definition file for a new functional area  */
/* (component), you must include it in the following places:         */
/*   server_authorized_function_module.mc                            */
/*   server_function_module_stub.mc                                  */
/*   include/server_authorized_function_module.h                     */
/*   include/server_function_module_stub.h                           */
/*-------------------------------------------------------------------*/
#ifdef  AUTH_DEF_INCLUDES
// Includes that define structs, etc, used by AUTH_DEF below
#include "mvs_aio_common.h"
#include "mvs_ifausage.h"
#include "mvs_svcdump_services.h"
#include "security_saf_authentication.h"
#include "security_saf_authz.h"
#include "security_saf_sandbox.h"
#include "security_saf_sync_to_thread.h"
#include "server_kernel_common.h"
#include "server_lcom_services.h"
#include "server_wlm_services.h"
#include "server_wola_services.h"
#include "server_wola_service_queues.h"
#include "tx_authorized_rrs_services.h"

#else
#ifndef AUTH_DEF
#define AUTH_DEF(svc_name, auth_name, impl_name, arg_type)
#define _CLEAR_AUTH_DEF
#endif

// Angel services
AUTH_DEF("KERNCLNA" , "KERNEL",  hardFailureCleanupActivate,   KERNEL_HardFailureCleanupActivateParms)
AUTH_DEF("KERNCLND" , "KERNEL",  hardFailureCleanupDeactivate, KERNEL_HardFailureCleanupDeactivateParms)

// WLM Services
AUTH_DEF("CONNECT" , "ZOSWLM", wlm_connect, struct WLM_ConnectParms)
AUTH_DEF("DISCONN" , "ZOSWLM", wlm_disconnect, struct WLM_DisconnectParms)
AUTH_DEF("ENCCREA" , "ZOSWLM", wlm_enclave_create, struct WLM_EnclaveCreateParms)
AUTH_DEF("ENCJOIN" , "ZOSWLM", wlm_enclave_join, struct WLM_EnclaveJoinParms)
AUTH_DEF("ENCLEAV" , "ZOSWLM", wlm_enclave_leave, struct WLM_EnclaveLeaveParms)
AUTH_DEF("ENCDELE" , "ZOSWLM", wlm_enclave_delete, struct WLM_EnclaveDeleteParms)
AUTH_DEF("CREAJOIN", "ZOSWLM", wlm_enclave_create_join, struct WLM_EnclaveCreateJoinParms)
AUTH_DEF("LEAVDELE", "ZOSWLM", wlm_enclave_leave_delete, struct WLM_EnclaveLeaveDeleteParms)

// RRS Services for transaction support.
AUTH_DEF("CRG4GRM" , "TXRRS", crg_register_resource_manager, struct crg4grm_parms)
AUTH_DEF("CRG4DRM" , "TXRRS", crg_unregister_resource_manager, struct crg4drm_parms)
AUTH_DEF("ATR4SEIF", "TXRRS", atr_set_exit_information, struct crg4seif_parms)
AUTH_DEF("ATR4IBRS", "TXRRS", atr_begin_restart, struct atr4ibrs_parms)
AUTH_DEF("ATR4IERS", "TXRRS", atr_end_restart, struct atr4iers_parms)
AUTH_DEF("ATR4IRLN", "TXRRS", atr_retrieve_log_name, struct atr4irln_parms)
AUTH_DEF("ATR4ISLN", "TXRRS", atr_set_log_name, struct atr4isln_parms)
AUTH_DEF("ATR4RWID", "TXRRS", atr_retrieve_work_identifier, struct atr4rwid_parms)
AUTH_DEF("ATR4SWID", "TXRRS", atr_set_work_identifier, struct atr4swid_parms)
AUTH_DEF("ATR4EINT", "TXRRS", atr_express_ur_interest, struct atr4eint_parms)
AUTH_DEF("ATR4RUSI", "TXRRS", atr_retrieve_side_information, struct atr4rusi_parms)
AUTH_DEF("ATR4IRNI", "TXRRS", atr_retrieve_ur_interest, struct atr4irni_parms)
AUTH_DEF("ATR4SENV", "TXRRS", atr_set_environment, struct atr4senv_parms)
AUTH_DEF("ATR4APRP", "TXRRS", atr_prepare_agent_ur, struct atr4aprp_parms)
AUTH_DEF("ATR4ACMT", "TXRRS", atr_commit_agent_ur, struct atr4acmt_parms)
AUTH_DEF("ATR4ADCT", "TXRRS", atr_delegate_commit_agent_ur, struct atr4adct_parms)
AUTH_DEF("ATR4ABAK", "TXRRS", atr_backout_agent_ur, struct atr4abak_parms)
AUTH_DEF("ATR4AFGT", "TXRRS", atr_forget_agent_ur_interest, struct atr4afgt_parms)
AUTH_DEF("ATR4PDUE", "TXRRS", atr_post_deferred_ur_exit, struct atr4pdue_parms)
AUTH_DEF("ATR4IRRI", "TXRRS", atr_respond_to_retrieved_interest, struct atr4irri_parms)
AUTH_DEF("ATR4SPID", "TXRRS", atr_set_persistent_interest_data, struct atr4spid_parms)
AUTH_DEF("ATR4SSPC", "TXRRS", atr_set_syncpoint_controls, struct atr4sspc_parms)
AUTH_DEF("ATR4SUSI", "TXRRS", atr_set_side_information, struct atr4susi_parms)
AUTH_DEF("ATR4SDTA", "TXRRS", atr_set_rm_metadata, struct atr4sdta_parms)
AUTH_DEF("ATR4RDTA", "TXRRS", atr_retrieve_rm_metadata, struct atr4rdta_parms)
AUTH_DEF("CTX4BEGC", "TXRRS", ctx_begin_context, struct ctx4begc_parms)
AUTH_DEF("CTX4SWCH", "TXRRS", ctx_context_switch, struct ctx4swch_parms)
AUTH_DEF("CTX4ENDC", "TXRRS", ctx_end_context, struct ctx4endc_parms)

AUTH_DEF("CRCREDPW", "SAFCRED", createPasswordCredential,    CreatePasswordCredentialParms)
AUTH_DEF("CRCREDAS", "SAFCRED", createAssertedCredential,    CreateAssertedCredentialParms)
AUTH_DEF("CRCREDCT", "SAFCRED", createCertificateCredential, CreateCertificateCredentialParms)
AUTH_DEF("DELCRED" , "SAFCRED", deleteCredential,            DeleteCredentialParms)
AUTH_DEF("GETREALM", "SAFCRED", safExtractRealm,             SafExtractRealmParms)
AUTH_DEF("CHKACCES", "SAFCRED", checkAccess,                 CheckAccessParms)
AUTH_DEF("CLSACTIV", "SAFCRED", isSAFClassActive,            IsSAFClassActiveParms)
AUTH_DEF("ISRESTRC", "SAFCRED", isRESTRICTED,                IsRESTRICTEDParms)
AUTH_DEF("FLUSHPBC", "SAFCRED", flushPenaltyBoxCache,        FlushPenaltyBoxParms)
AUTH_DEF("SYNCTHRD", "SAFCRED", syncToThread,                SyncToThreadParms)
AUTH_DEF("ISSYNCTD", "SAFCRED", isSyncToThreadEnabled,       IsSyncToThreadEnabledParms)
AUTH_DEF("RESYNCTD", "SAFCRED", resetSyncToThreadEnabled,    ResetSyncToThreadEnabledParms)
AUTH_DEF("EXUTOKEN", "SAFCRED", extractUtoken,               ExtractUtokenParms)
AUTH_DEF("CRCREDDI", "SAFCRED", createMappedCredential,      CreateMappedCredentialParms)
AUTH_DEF("RACREXTR", "SAFCRED", safRacrouteExtract,          SafRacrouteExtractParms)

// AIO Services
// Note: the following list of services are verified in ZosAIO.java's isAsyncIOAuthorized() method.  Changes
//       made to this must also be made to the java code.
AUTH_DEF("AIOINIT" , "ZOSAIO",  aio_initPGOO,              AIO_InitParms)
AUTH_DEF("AIOCONN" , "ZOSAIO",  prepareConnection,         AIO_ConnectionParms)
AUTH_DEF("AIOIOEV2", "ZOSAIO",  getioev2,                  AIO_IoevParms)
AUTH_DEF("AIOCALL" , "ZOSAIO",  aio_call,                  AIO_CallParms)
AUTH_DEF("AIOCLEAR", "ZOSAIO",  disposeConnection,         AIO_DisposeParms)
AUTH_DEF("AIOCANCL", "ZOSAIO",  cancelAIO,                 AIO_CancelParms)
AUTH_DEF("AIOSHDWN", "ZOSAIO",  shutdownAIO,               AIO_ShutdownParms)
AUTH_DEF("AIOCPORT", "ZOSAIO",  closeportAIO,              AIO_CloseportParms)
AUTH_DEF("AIOGSOC" , "ZOSAIO",  aioGetSocketDescriptor,    AIO_GetSocketDescriptor)
// Note: changes here need to be made to ZosAIO.isAsyncIOAuthorized() as well.


// SVCDUMP service
AUTH_DEF("SVCDUMP", "ZOSDUMP", takeSvcDumpAuthorizedPc, struct SvcDumpParms)

// Local Comm Services
AUTH_DEF("LCOMINIT" , "LOCALCOM", lcom_init,                       struct LCOM_InitParms)
AUTH_DEF("LCOMUNIT" , "LOCALCOM", lcom_uninit,                     struct LCOM_UninitParms)
AUTH_DEF("LCOMGWRQ" , "LOCALCOM", lcom_getWRQ,                     struct LCOM_GetWRQParms)
AUTH_DEF("LCOMFWQE" , "LOCALCOM", lcom_freeWRQEs,                  struct LCOM_FreeWRQEsParms)
AUTH_DEF("LCOMSLWQ" , "LOCALCOM", lcom_stopListeningOnWRQ,         struct LCOM_StopListeningOnWRQParms)
AUTH_DEF("LCOMCNRS" , "LOCALCOM", lcom_connectResponse,            struct LCOM_ConnectResponseParms)
AUTH_DEF("LCOMCCSM" , "LOCALCOM", lcom_connectClientSharedMemory,  struct LCOM_ConnectClientSharedMemoryParms)
AUTH_DEF("LCOMDCSM" , "LOCALCOM", lcom_disconnectClientSharedMemory,  struct LCOM_DisconnectClientSharedMemoryParms)
AUTH_DEF("LCOMREAD" , "LOCALCOM", lcom_read,                       struct LCOM_ReadParms)
AUTH_DEF("LCOMRMSG" , "LOCALCOM", lcom_releaseDataMessage,         struct LCOM_ReleaseDataMessageParms)
AUTH_DEF("LCOMWRIT" , "LOCALCOM", lcom_write,                      struct LCOM_WriteParms)
AUTH_DEF("LCOMCLSE" , "LOCALCOM", lcom_close,                      struct LCOM_CloseParms)
AUTH_DEF("LCOMIWQF" , "LOCALCOM", lcom_initWRQFlags,               struct LCOM_InitWRQFlagsParms)

// WOLA Services
AUTH_DEF("WOLAATCH" , "WOLA",     pc_attachToBboashr,              pc_attachToBboashr_parms)
AUTH_DEF("WOLADTCH" , "WOLA",     pc_detachFromBboashr,            pc_attachToBboashr_parms)
AUTH_DEF("WOLAADVE" , "WOLA",     pc_advertiseWolaServer,          pc_advertise_parms)
AUTH_DEF("WOLADEAD" , "WOLA",     pc_deadvertiseWolaServer,        pc_advertise_parms)
AUTH_DEF("WOLAARGE" , "WOLA",     pc_activateWolaRegistration,     pc_activateWolaRegistration_parms)
AUTH_DEF("WOLADRGE" , "WOLA",     pc_deactivateWolaRegistration,   pc_activateWolaRegistration_parms)
AUTH_DEF("WGETSRVQ" , "WOLA",     pc_getClientService,             pc_wolaServiceQueueParms)
AUTH_DEF("WOLAADD"  , "WOLA",     pc_addOTMAAnchorToSPD,           struct pc_addOTMAAnchorToSPD_parms)
AUTH_DEF("WOLARMV"  , "WOLA",     pc_removeOTMAAnchorFromSPD,      struct pc_addOTMAAnchorToSPD_parms)
AUTH_DEF("WOLACWTR" , "WOLA",     pc_cancelClientService,          pc_wolaCancelClientService_parms)

// Product Manager. Note: These are NOT the IFAEDREG and IFAEREG APIs but just similarly named.
AUTH_DEF("IFAREG" , "PRODMGR", pc_registerProduct, regParms)
AUTH_DEF("IFADEREG" , "PRODMGR", pc_deregisterProduct, regParms)

#ifdef _CLEAR_AUTH_DEF
#undef AUTH_DEF
#undef _CLEAR_AUTH_DEF
#endif
#endif

/* vim: set filetype=c : */
