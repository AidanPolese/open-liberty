/*
 * IBM Confidential
 *
 * OCO Source Materials
 *
 * Copyright IBM Corp. 2011
 *
 * The source code for this program is not published or otherwise divested
 * of its trade secrets, irrespective of what has been deposited with the
 * U.S. Copyright Office.
 */
#ifndef _BBOZ_ANGEL_FIXED_SHIM_PC_H
#define _BBOZ_ANGEL_FIXED_SHIM_PC_H

/** @file
 * Defines the Angel Fixed Shim functions
 */

#include "mvs_utils.h"

#include "gen/ihasdwa.h"

/**
 * Version string function for the fixed shim module.
 *
 * @return The version string for the fixed shim module.  The caller is
 *         responsible for freeing the storage returned using free().
 */
char* getFixedShimVersionString();

/** Version integer function for the fixed shim module. */
int getFixedShimVersionInt();

/**
 * PC routine called by a Liberty server to register with the Angel.
 * After calling this PC, the server can use the Invoke service to drive
 * routines in the server authorized function module (BBGZSAFM).
 *
 * @param server_authorized_function_module_name The path and name of the
 *                                               BBGZSAFM for the server.
 *
 * @return 0 on success, nonzero on failure.
 */
int fixedShimPC_Register(char* server_authorized_function_module_name);

/**
 * PC routine called by a Liberty server to drive a service in the server
 * authorized function module (BBGZSAFM) loaded during register.
 * In most cases this PC is invoked by stub code generated by a function in
 * the authorized functions definition file (server_authorized_functions.def).
 * There should be no need to drive this routine directly.
 *
 * @param function_index The index of the function/service in BBGZSAFM.  This
 *                       should be computed by the function stub in the
 *                       server authorized function definition file.
 * @param arg_struct_size The size of struct which is the parameter to the
 *                        target service.
 * @param arg_struct_p A pointer to the struct which is the parameter to the
 *                     target service.
 *
 * @return 0 if the target service (in BBGZSAFM) was dispatched, nonzero on
 *         dispatch failure.  Note that a 0 return code does not mean the
 *         service completed successfully, just that it was dispatched.
 */
int fixedShimPC_Invoke(int function_index, int arg_struct_size, void* arg_struct_p);

/**
 * PC used by a liberty server to deregister with the angel.
 *
 * @return 0 on success.
 */
int fixedShimPC_Deregister();

/**
 * PC routine called by a Liberty client to bind to a Liberty server.
 *
 * @param targetServerStoken The stoken of the server to bind to.
 * @param clientFunctionTablePtr_p A pointer to a double word where the pointer
 *                                 to the client function module is copied.
 * @param bindToken_p A pointer to a double word where the bind token is copied.
 *                    The bind token must be supplied on all clientInvoke and
 *                    unbind calls.
 *
 * @return 0 on success.
 */
int fixedShimPC_clientBind(SToken* targetServerStoken_p, bbgzasvt_header** clientFunctionTablePtr_p, void** bindToken_p);

/**
 * PC routine called by a Liberty client to invoke a service in the common
 * module (BBGZSCFM).
 *
 * @param bindToken_p A pointer to the bind token returned on clientBind.
 * @param serviceIndex The index off the SCFM of the service to invoke.
 * @param parm_len The length of the data pointed to by parm_p.
 * @param parm_p A pointer to the parameter struct required by the called
 *               service.
 *
 * @return 0 if the client service was invoked.  The return code from the client
 *         service will be inside parm_p.
 */
int fixedShimPC_clientInvoke(void* bindToken_p, int serviceIndex, int parm_len, void* parm_p);

/**
 * PC routine called by a Liberty client to unbind from a Liberty server.
 *
 * @param bindToken_p A pointer to the bind token returned on clientBind.
 *
 * @return 0 on success.
 */
int fixedShimPC_clientUnbind(void* bindToken_p);

/* PC #7 -- Reserved for future use */
int fixedShimPC_rsvd7();

/* PC #8 -- Reserved for future use */
int fixedShimPC_rsvd8();

/**
 * ARR routine for the fixed shim module.  This gets control for any of the
 * PC routines in the fixed shim.  It performs some initial cleanup before
 * delegating to the ARR in the current dynamic replaceable module.
 *
 * @param sdwa_p A pointer to the SDWA for the ARR.
 */
void fixedShim_ARR(sdwa* sdwa_p);

#endif
