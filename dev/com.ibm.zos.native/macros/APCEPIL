*
* IBM Confidential
*
* OCO Source Materials
*
* Copyright IBM Corp. 2011
*
* The source code for this program is not published or otherwise
* divested of its trade secrets, irrespective of what has been
* deposited with the U.S. Copyright Office.
*
         MACRO
&NAME    APCEPIL
         GBLC  &CCN_LITN
         GBLC  &CCN_CSECT
         GBLB  &BBGZ_APCEPIL_DSECT
*
* See if this thread has a TGOO.  If it does, we don't want to free
* the dynamic area, it will be used next time.
*         
         USING PSA,0
         LLGT  5,PSATOLD   Load TCB from PSA
         DROP  0
         USING TCB,5
         LLGT  5,TCBSTCB   Load STCB from PSA
         DROP  5
         USING STCB,5
         LLGT  5,stcbbcba  Load common task data anchor
         DROP  5
         LTGR  5,5         Is the common task data anchor set?
         BRZ   NOTGOO&SYSNDX
         LG    5,16(5)     Load angel task data pointer
         LTGR  5,5         Is angel task data pointer set?
         BRNZ  HAVETGOO&SYSNDX Yes -- keep dynamic area
*
* We have no TGOO, we need to release the dynamic area.  And off to
* the megabyte boundary we got back from IARV64.
*
NOTGOO&SYSNDX LARL 4,&CCN_LITN      Address constants
         USING &CCN_LITN,4         
         LGR  5,15             Save return code
         NILH  13,X'FFF0'      And off to a megabyte boundary
         NILL  13,X'0000'      And off to a megabyte boundary
*
* Get some storage to use as the parameter list for IARV64
*
         STORAGE OBTAIN,LENGTH=APCEPIL_TEMP_STORAGE_LEN,BNDRY=DBLWD,   X
               SP=APCEPIL_TEMP_STORAGE_SUBPOOL,                        X
               KEY=APCEPIL_TEMP_STORAGE_KEY
         LGR  6,1              Save storage
*
* Fill in the IARV64 parameter list
* IMPORTANT NOTE: there is code in the ARR which also does the IARV64
* REQUEST=DETACH in the event the PC routine abends and there is no
* TGOO to hang the storage off of.  So if this ever changes, that code
* needs to change as well.
*
         USING APCEPIL_IARV64,6
         STG  13,APCEPIL_IARV64_ORIGIN Store address to free
         IARV64 REQUEST=DETACH,MATCH=SINGLE,                           X
               MEMOBJSTART=APCEPIL_IARV64_ORIGIN,                      X
               USERTKN=NO_USERTKN,COND=NO,PLISTVER=0,                  X
               MF=(E,APCEPIL_IARV64_PLIST,COMPLETE)
         DROP 6
*
* Free the IARV64 parameter list
*
         STORAGE RELEASE,LENGTH=APCEPIL_TEMP_STORAGE_LEN,ADDR=(6),     X
               SP=APCEPIL_TEMP_STORAGE_SUBPOOL,                        X
               KEY=APCEPIL_TEMP_STORAGE_KEY
         DROP 4
         LGR  15,5             Restore return code
         BRU  RTNTOCALLER&SYSNDX Jump to return
*
* Our task related storage is hung off of the common task data anchor.
* Mark the task data as available again.
* Note offset 28 into stack prefix is the stack ownership word, and
* the dependency here is noted in angel_task_data.h.
*
HAVETGOO&SYSNDX DS 0H 
         LGHI 6,-1 Load non-zero into R6 (expected value)
         LGHI 7,0  Load zero into R7
         CS   6,7,28(5) Try to return the dynamic area
         BRZ  RTNTOCALLER&SYSNDX Branch if we returned the dyn area
         LARL 4,&CCN_LITN      Address constants
         USING &CCN_LITN,4  
         ABEND ABEND_TYPE_SERVER,REASON=KRSN_APCEPIL_STACK_IN_USE,     X
               DUMP,STEP,SYSTEM
         DROP 4
RTNTOCALLER&SYSNDX DS 0H
         PR                    Return to caller
*
* Define the DSECTs we're going to use if this is the first time the
* macro is being invoked.
*
         AIF (&BBGZ_APCEPIL_DSECT).NODSECT
&BBGZ_APCEPIL_DSECT SETB 1
APCEPIL_IARV64         DSECT    Mapping of the parms to IARV64
APCEPIL_IARV64_ORIGIN  DS FD    Returned storage start address
APCEPIL_IARV64_PLIST   DS CL88  Parameter list for execute form v0
                       DS CL160 Available
APCEPIL_TEMP_STORAGE_LEN EQU 256     Length of temporary storage
APCEPIL_TEMP_STORAGE_SUBPOOL EQU 229 Subpool of temporary storage
APCEPIL_TEMP_STORAGE_KEY EQU 2       Key of temporary storage
*
         RASABEND
*
&CCN_CSECT CSECT
.NODSECT ANOP
         MEND