*
* IBM Confidential
*
* OCO Source Materials
*
* Copyright IBM Corp. 2014
*
* The source code for this program is not published or otherwise
* divested of its trade secrets, irrespective of what has been
* deposited with the U.S. Copyright Office.
*-----------------------------------------------------------
* CAUTION !!! CAUTION !!! CAUTION !!! CAUTION !!! CAUTION !!!
*-----------------------------------------------------------
*  ANY CHANGES TO THIS PART need to have the Client Vector
*  Slot level in bboacall incremented. If this is not done,
*  the code in server_wola_services.mc that loads BBOACALL
*  will NOT reload this module if there is already a BBOACALL
*  at an older level loaded.
*  While testing changes to modules in BBOACALL, you can
*  set this value to 9999 and server_wola_services.mc will
*  always replace an old BBOACALL with this one.
*  We started with level 101 for WAS 9 where this code
*  is introduced.
*-----------------------------------------------------------
* CAUTION !!! CAUTION !!! CAUTION !!! CAUTION !!! CAUTION !!!
*-----------------------------------------------------------
*
* This routine will check to see if the caller is running
* under CICS, and if so, will invoke the TRUE by calling
* CICS routine DFHRMCAL.
*
* This routine will thrash all of the registers.  It assumes
* that some base or static register is set (usually R12), and
* that all the registers are stored in the save area hung off
* of R13.  It will restore the registers before calling DFHRMCAL,
* if calling DFHRMCAL.
*
* Check for under CICS
*
         L     R4,X'21C'                Address current TCB
*
* Starting with the current TCB, search the ancestor chain for a TCB
* with an AFCB which points at an AFCS.                    47@577569A
*
         USING TCB,R4
         LA    R2,0(,R4)            Copy TCB address to R2
CHKOTCB  DS    0H
         L     R2,TCBEXT2           Point at TCB extension
         ICM   R2,B'1111',TCBCAUF-TCBXTNT2(R2)  Point at AFCB; is      X
                                    there one?
         BZ    GETOTCB              No, branch
         USING DFHAFCB,R2
         CLC   AFIDENT,=C'AFCX'     Is it a genuine CICS AFCB?
         BNE   GETOTCB              No, branch
*
* In CICS 1.7, the AFCB version was changed from 0 to 1 and the AFCS
* was introduced.  We could not support earlier CICS releases.
*
         CLI   AFVER,AFVER1         Is it at least Version 1?
         BL    GETOTCB              No, branch
*
* In CICS TS 4.2, the AFCB version was changed to 3 and the AFCB
* trailer is relocated to BEFORE the AFCX prefix.
*                                                       @711599A
         CLI   AFVER,x'03'          Is it TS 4.2?       @711599A
         BNE   NOTTS42              No, branch          @711599A
         LA    R3,AFPFXLEN(R2)      Get to 1st address past AF prefix
         ICM   R3,B'1111',0(R3)       (this is the AFCS)@711599A
         BNZ   GOTAFCS              Yes, branch;        @711599A
         B     GETOTCB              No, keep looking    @711599A
*
NOTTS42  DS    0H                                       @711599A
         LA    R3,0                 Clear R3
         ICM   R3,B'0011',AFLENG    Get length of AFCB's DW table
         LA    R3,AFPFXLEN(R3,R2)   Get AFCB trailer@ in R3 @577007C
         ICM   R3,B'1111',AFTAFCS-AFTSTART(R3)  Point at AFCS; is      X
                                    there one?
         BNZ   GOTAFCS              Yes, branch; CICS umbrella
GETOTCB  DS    0H
         DROP  R2                   Finished with AFCB for now
         ICM   R4,B'1111',TCBOTC    Point at mother TCB if any
         BNZ   CHKOTCB              If mother exists, go back and
*                                   check for an AFCS
         DROP  R4                   Finished with TCB
*
* Failed to find an AFCS, so this is not a CICS environment.
*
         B     NotCICS
*
GOTAFCS  DS    0H
         USING TCB,R4
         USING DFHAFCB,R2
*
* If there is no CSA, this isn't a proper CICS region.
* (It's probably an EXCI region.)
*
* NB.  Control block DFHAFCS was included in a REACH dataset in tWAS.
*      This control block is not shipped by CICS in SDFHMAC.  Rather
*      than continue to get it and put it in a reach dataset, we're
*      just going to code the offset to AFCSCSAA that we're checking
*      here.  Putting this macro in a REACH dataset eliminates any
*      benefit that we'd get by using the actual macro because if the
*      macro did change, we would not see the change.
*
         CLC   18(4,R3),=A(0)        Does this region have a CSA?
         BE    NotCICS              Zero, no CSA, not CICS
*
CICSEnv  DS    0H                                              @577569A
         LM    R14,R12,12(R13)          Restore caller's Regs  @577569A
         ST    R15,8(,R13)              Save this entry in FWD ptr
*
         DFHRMCAL TO=BBOATRUE
*
* The TRUE CALL does not return here.
*
NotCICS  DS    0H
         DROP  R4
