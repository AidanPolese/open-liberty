*
* FUNCTION: z/OS 1.12 XL C/C++ Compiler Configuration file
*
* Licensed Materials - Property of IBM
* 5694-A01 Copyright IBM Corp. 2004, 2010
* All Rights Reserved
* US Government Users Restricted Rights - Use, duplication or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*
* C compiler, extended mode
xlc:      use               = DEFLT
          csuffix           = c
          usuffix           = d
 
* XPLINK C compiler, extended mode
xlc_x:    use               = DEFLT
 
* 64 bit C compiler, extended mode
xlc_64:   use               = DEFLT
 
* C compiler, common usage C
cc:       use               = DEFLT
 
* XPLINK C compiler, common usage C
cc_x:     use               = DEFLT
 
* 64 bit C compiler, common usage C
cc_64:    use               = DEFLT
 
* Strict ANSI C 89 compiler
c89:      use               = DEFLT
 
* XPLINK Strict ANSI C 89 compiler
c89_x:    use               = DEFLT
 
* 64 bit Strict ANSI C 89 compiler
c89_64:   use               = DEFLT
 
* ISO/IEC 9899:1999 Standard Compliant C Compiler
c99:      use               = DEFLT
 
* XPLINK ISO/IEC 9899:1999 Standard Compliant C Compiler
c99_x:    use               = DEFLT
 
* 64 bit ISO/IEC 9899:1999 Standard Compliant C Compiler
c99_64:   use               = DEFLT
 
* ANSI C++ compiler
cxx:      use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* XPLINK ANSI C++ compiler
cxx_x:    use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* 64 bit ANSI C++ compiler
cxx_64:   use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* ANSI C++ compiler
c++:      use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* XPLINK ANSI C++ compiler
c++_x:    use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* 64 bit ANSI C++ compiler
c++_64:   use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* C++ compiler, extended mode
xlC:      use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* XPLINK C++ compiler, extended mode
xlC_x:    use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* 64 bit C++ compiler, extended mode
xlC_64:   use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* C++ compiler, extended mode
xlc++:    use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* XPLINK C++ compiler, extended mode
xlc++_x:  use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* 64 bit C++ compiler, extended mode
xlc++_64: use               = DEFLT
          xlC               = /usr/lpp/cbclib/xlc/bin/.orig/xlC
          ipa               = /bin/cxx
 
* common definitions
DEFLT:    acceptable_rc     = 0
          cppcomp           = /usr/lpp/cbclib/xlc/exe/ccndrvr
          ccomp             = /usr/lpp/cbclib/xlc/exe/ccndrvr
          ipacomp           = /usr/lpp/cbclib/xlc/exe/ccndrvr
          ipa               = /bin/c89
          as                = /bin/c89
          ld_c              = /bin/c89
          ld_cpp            = /bin/cxx
          xlC               = /usr/lpp/cbclib/xlc/bin/xlc
          xlCcopt           = -D_XOPEN_SOURCE
          sysobj            = sys1.cee.sceeobj:sys1.cee.sceecpp
          syslib            = sys1.cee.sceelkex:sys1.cee.sceelked:sys1.cbc.sccnobj:sys1.csslib
          syslib_x          = sys1.cee.sceebnd2:sys1.cbc.sccnobj:sys1.csslib
          exportlist_c      = NONE
          exportlist_cpp    = sys1.cee.sceelib(c128n):sys1.cbc.sclbsid(iostream,complex)
          exportlist_c_x    = sys1.cee.sceelib(celhs003,celhs001)
          exportlist_cpp_x  = sys1.cee.sceelib(celhs003,celhs001,celhscpp,c128):sys1.cbc.sclbsid(iostream,complex)
          exportlist_c_64   = sys1.cee.sceelib(celqs003)
          exportlist_cpp_64 = sys1.cee.sceelib(celqs003,celqscpp,c64):cbc.sclbsid(iosx64)
          steplib           = NONE
