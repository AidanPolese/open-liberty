<?xml version="1.0" encoding="UTF-8"?>
<project name="com.ibm.ws.classloading_test" default="unittest">
        <mkdir dir="../com.ibm.ws.classloading_other/B/test" />
        <mkdir dir="../com.ibm.ws.classloading_other/resources/A" />
        <mkdir dir="../com.ibm.ws.classloading_other/resources/B" />
        <mkdir dir="../com.ibm.ws.classloading_other/unittest" />
	<import file="../ant_build/public_imports/standard_imports.xml"/>
	<import file="../ant_build/public_imports/unittest_imports.xml"/>

	<!-- Ensure 'other' classes are cleaned up too -->
	<target name="clean" depends="clean.clean">
		<delete dir="${other.bld}" />
	</target>
		
	<!-- 
	Do three things:
	1. Copy the non-Java files used for resource loading
	2. Need to compile the 'other' code which is to be kept *off* the main
	classpath and loaded by a secondary classloader within the unit tests.
	3. Create a JAR using the test classes for testing
	-->
	<target name="unittestPackage" depends="assert.servlet.jar.exists, assert.other.src.exists, assert.other.res.exists">
		<!-- Copy non-Java files used for testing resource loading -->
		<copy todir="${unittest.classes.dir}">
			<fileset dir="${unittest.srcdir}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
 
		<!-- Compile the 'other' source dirs one-by-one -->
		<compile.other.src dir="A" cp="${servlet.jar}"/>
		<compile.other.src dir="B"/>
		
		<!-- Create a JAR with the test resources in -->
		<jar destfile="${unittest.classes.dir}/test.jar" manifest="${basedir}/unittest/PackageDefineTestResources/MANIFEST.MF">
			<fileset dir="${unittest.classes.dir}" includes="test/"/>
		</jar>
	</target>	

		
	<!-- LOCATIONS -->
	<!-- define where to find javax.servlet -->
	<property name="servlet.jar" location="../build.image/wlp/dev/api/spec/com.ibm.websphere.javaee.servlet.3.0_1.0.${micro.version}.jar" />
	<!-- define where to find the 'other' source -->
	<property name="other.src" location="../com.ibm.ws.classloading_other" />
	<!-- define where to find the 'other' resources -->
	<property name="other.res" location="../com.ibm.ws.classloading_other/resources" />
	<!-- define where to build the 'other' classes -->
	<property name="other.bld" location="../com.ibm.ws.classloading_other/build" />

	<!-- MACRO to compile 'other' source materials -->
	<macrodef name="compile.other.src">
		<attribute name="dir" default="dir not specified" />
		<attribute name="cp" default="" />
		<sequential>
			<!-- Create the output folder -->
			<mkdir dir="${other.bld}/@{dir}" />
			<!-- Copy the resources -->
			<copy todir="${other.bld}/@{dir}">
				<fileset dir="${other.res}/@{dir}"/>
			</copy>
			<!-- Compile the code -->
		    <wlpJavac srcdir="${other.src}/@{dir}" 
		        destdir="${other.bld}/@{dir}" 
		        classpath="@{cp}"
		        debuglevel="${javac.debug.level}" 
		        includeAntRuntime="false" 
		        debug="true"
		        encoding="${javac.source.file.encoding}"
		        buildWithJavaLevel="${build.with.java.level}" />
			<!-- Copy non-Java files used for testing resource loading -->
			<copy todir="${other.bld}/@{dir}">
				<fileset dir="${other.src}/@{dir}">
					<exclude name="**/*.java"/>
				</fileset>
			</copy>
		</sequential>
	</macrodef>

	<!-- PREREQ CHECKS -->
	<!-- Check for the existence of the servlet jar -->
	<target name="check.servlet.jar">
		<available file="${servlet.jar}" property="servlet.jar.available" type="file" />
	</target>
	<!-- Check for the existence of the other resources -->
	<target name="check.other.res">
		<available file="${other.res}" property="other.res.available" type="dir" />
	</target>
	<!-- Check for the existence of the other sources -->
	<target name="check.other.src">
		<available file="${other.src}" property="other.src.available" type="dir" />
	</target>
	<!-- Assert servlet.jar exists -->
	<target name="assert.servlet.jar.exists" depends="check.servlet.jar" unless="servlet.jar.available">
		<fail message="Can not build ${ant.project.name} because can not find required library ${servlet.jar}" />
	</target>
	<!-- Assert source dir exists -->
	<target name="assert.other.src.exists" depends="check.other.src" unless="other.src.available">
		<fail message="Can not build ${ant.project.name} because can not find required project ${other.src}" />
	</target>
	<!-- Assert resource dir exists -->
	<target name="assert.other.res.exists" depends="check.other.res" unless="other.res.available">
		<fail message="Can not build ${ant.project.name} because can not find required project ${other.res}" />
	</target>
	
</project>
