/*
 * IBM Confidential
 *
 * OCO Source Materials
 *
 * WLP Copyright IBM Corp. 2014
 *
 * The source code for this program is not published or otherwise divested
 * of its trade secrets, irrespective of what has been deposited with the
 * U.S. Copyright Office.
 */
package com.ibm.ws.classloading.internal;

import com.ibm.websphere.ras.Tr;
import com.ibm.websphere.ras.TraceComponent;
import com.ibm.ws.classloading.ClassGenerator;
import com.ibm.wsspi.kernel.service.utils.ConcurrentServiceReferenceSet;

public class ClassGeneratorManager implements ClassGenerator {
    private static final TraceComponent tc = Tr.register(ClassGeneratorManager.class);

    private final ConcurrentServiceReferenceSet<ClassGenerator> generatorRefs;

    public ClassGeneratorManager(ConcurrentServiceReferenceSet<ClassGenerator> generatorRefs) {
        this.generatorRefs = generatorRefs;
    }

    @Override
    public byte[] generateClass(String name, ClassLoader loader) throws ClassNotFoundException {
        for (ClassGenerator generator : generatorRefs.services()) {
            byte[] bytes = generator.generateClass(name, loader);
            if (bytes != null) {
                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())
                    Tr.debug(tc, "class " + name + " generated by " + generator);
                return bytes;
            }
        }
        return null;
    }
}
