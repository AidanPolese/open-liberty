/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants

/* Add bnd gradle plugin as a script dependency */
buildscript {
  dependencies {
    classpath bndPlugin
  }
}

/* Initialize the bnd workspace */
Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)
ext.bndWorkspace = new Workspace(rootDir, bnd_cnf).setOffline(gradle.startParameter.offline)

ext.cnf = rootProject.project(bnd_cnf)

/* Set git branch name */
def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

ext.branchName = System.env.BRANCH_NAME ?: gitBranch()
if (branchName == '' || branchName == 'HEAD') {
	// Default to master if something went wrong
	branchName = 'master'
}

/* Fail when cnf:initialize was not run on the current git branch */
def taskNames = project.gradle.startParameter.taskNames

// Only fail when task isn't cnf:initialize
if (!taskNames[0].contains("initialize")) {

	// Git branch name when cnf:initialize was last run
	def props = new Properties()
	if (!file("generated.properties").exists()) {
		ant.fail("'generated.properties' does not exist.\nRun ./gradlew cnf:initialize to create the file.")
	}
	file("generated.properties").withInputStream { props.load(it) }
	def initBranch = props.getProperty("bGitBranch")

	if (branchName != initBranch) {
	  ant.fail("Git branch is '${branchName}' and cnf:initialize was run when git branch was '${initBranch}'.\nRun ./gradlew cnf:initialize to clean the local maven repository.")
	}
}

/* Configure the subprojects */
subprojects {
  def bndProject = bndWorkspace.getProject(name)
  if (bndProject != null) {
    plugins.apply 'biz.aQute.bnd'
  }
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}

apply from: 'cnf/gradle/scripts/tasks.gradle'
