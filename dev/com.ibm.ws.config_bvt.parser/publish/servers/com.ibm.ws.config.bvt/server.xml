<!--
    Copyright (c) 2017 IBM Corporation and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
        IBM Corporation - initial API and implementation
 -->
<server>
	
	<test.config.final finalField1="iShouldBeNull" finalField2="iShouldBeAnExpandedVar" finalField3="iShouldBeADefaultValue" id="finalTest1" name="someName"/>	
	
	<test.config.password id="p1" name="admin" password="secret,secret"/>
	<test.config.password id="p2" name="my//name/" password="secret//secret/"/>
	<test.config.password id="p3" name="${p3.name}" password="${p3.password}"/>
	
	<test.config.nested.childref.parent name="mom" id="mom1">
		<test.config.nested.childref.child ref="childRef1" />
		<test.config.nested.childref.child ref="childRef2" />
	</test.config.nested.childref.parent>
	
	<test.config.nested.childref.child id="childRef1" name="bob"/>
	<test.config.nested.childref.child id="childRef2" name="rob"/>
	
    <include optional="true" location="${shared.config.dir}/bvtTestPorts.xml"/> 
    
    <featureManager>
        <feature>httpservice-2.2</feature>
        <feature>testparser-1.0</feature>  
    </featureManager>
    
    <com.ibm.ws.config monitorInterval="2s" />
    
    <test.config.nested.managed name="singletonNested1">
        <test.config.nested.result name="one" pass="9999" fail="7777" />
        <test.config.nested.result name="two" pass="100" fail="0" />            
    </test.config.nested.managed>
        
    <!--  singletonNested is an alias for test.config.nested.managed.metatype -->
    <singletonNested name="singletonNested1">
    	<testResult name="one" pass="9999" fail="7777" />
    	<testResult name="two" pass="100" fail="0" />
    	<resultTwo/>
    	<resultTwo someString="notDefault"/>
    	<resultTwo someArray="ten, eleven"/>
    	<singletonResult someString="aSingleton"/>
    </singletonNested>
       
    
    <testVirtualHost host="*" id="vHost1" port="9084"/>
	<testVirtualHost host="nonexistent" id="vHost2" port="9085"/>
	
    <application id="app" location="app.war" name="app" type="war">
  		<testVirtualHost ref="vHost1"/>
  		<testVirtualHost ref="vHost2"/>
	</application>
	
    <basicRegistry id="basic" realm="SampleBasicRealm">
		<user id="admin" password="admin"/>
		<user id="user1" password="user1"/>
		<user id="user2" password="user2"/>
		<user id="user3" password="user3"/>
		<group id="memberlessGroup"/>
		<group id="adminGroup">
			<user>admin</user>
		</group>
		<group id="users">
			<user>user1</user>
			<user>user2</user>
		</group>
	</basicRegistry>

    <application id="fred" location="http://ibm.com/myapp" name="fred">
    	<testVirtualHost host="w3.ibm.com" port="9080">
    		<testHostAlias names="local, superhost"/>
 		</testVirtualHost>
    	<testVirtualHost host="w3.hursley.ibm.com" port="9081">
    		<testHostAlias names="x, y"/>
    	</testVirtualHost>
    	<library aString="notADefault"/>
    	<library anArray="seven, eight, nine, ten"/>
    	<aNestedSingleton anArray="seventeen"/>
    </application>
    
    <application id="bob" location="http://ibm.com/myapp" name="bob">
    	<testVirtualHost host="butterfly.torolab.ibm.com" port="9082"/>
    	<testVirtualHost host="mallet.torolab.ibm.com" port="9083"/>
    </application>
    
    <!-- singleton configurations -->
    
    <test.config.singleton.server simpleAttr="abc">
          <collAttr>a</collAttr>
          <collAttr>b</collAttr>
          <collAttr>c</collAttr>
    </test.config.singleton.server>
    
    <test.config.singleton.server.metatype lastname="Doe">
          <children>Jon ${lastname}</children>
          <children>Jane ${lastname}</children>
    </test.config.singleton.server.metatype>
    
    <variable name="SimpsonsDaughter" value="Lisa"/>
        
    <test.config.singleton.server.bundle.metatype daughter="${SimpsonsDaughter}">
          <children>${son} ${lastname}</children>
          <children>${daughter} ${lastname}</children>
    </test.config.singleton.server.bundle.metatype>
    
    <!-- factory instance configurations -->
    
    <test.config.factory.simple id="serverInstance" simpleAttr="foo">
          <collAttr>Lisa</collAttr>
          <collAttr>Simpson</collAttr>
    </test.config.factory.simple>

    <variable name="FamilyGuyLastName" value="Griffin"/>
    <variable name="FamilyGuySpouse" value="Lois ${FamilyGuyLastName}"/>
    
    <test.config.factory.metatype id="FamilyGuy" lastname="${FamilyGuyLastName}" spouse="${FamilyGuySpouse}">
          <children>Meg ${lastname}</children>
          <children>Chris ${lastname}</children>
    </test.config.factory.metatype>    
    
    <!-- variable test configuration -->
    <test.config.variable lastname="Potter">
          <names>${SimpsonsDaughter} ${FamilyGuyLastName}</names>
          <names>${FamilyGuySpouse}</names>
    </test.config.variable>
            
    <!-- alias singleton -->
    <Smiths kids="2" others="Roger ${lastName}, Klaus ${lastName}" lastName="Smith" firstName="Stan" />
    
    <!-- alias factory -->    
    <test.config.factory.alias id="simpsons" kids="3" lastName="Simpson" firstName="Homer" />
    
    <FoxFamily id="griffins" kids="3" lastName="Griffin" firstName="Peter" />
    
    <!-- alias shared -->
    <FamilyName fullName="${firstName} ${lastName}" kids="5" />
        
    <!--  configurations for dynamic config update tests -->
       
    <test.config.unique id="good" name="legal unique value" jndiName="jndi/somethingUnique"/>  
    
    <test.config.dynamic.singleton testValue="10" />
    
    <test.config.dynamic.factory id="1" testValue="10" />
    
    <test.config.dynamic.factory.metatype id="one" timeout="100001ms" />
    
    <factoryOptionalMetatype name="four" timeout="5000"/>
        
    <factoryOptionalMetatype name="one" />
    
    <!--  configurations for reference tests -->
    
    <childAttributeReference id="ref1" name="one" threads="100"/>
    
    <attributeReference version="3.0" reference="ref1" />
    
    <childElementReference id="ref2" name="two" threads="200"/>
    
    <childElementReference id="ref3" threads="300"/>
    
    <childElementReference id="ref5" name="five" threads="5"/>
    
    <elementReference version="4.0" referencesRef="ref5" referenceListRef="ref5" childRef="ref3, ref5">
        <references>ref3</references>
        <references ref="ref2"/>
        <references name="nested-one" threads="5000"/>
        
        <referenceList>ref2</referenceList>
        <referenceList ref="ref3"/>
        <referenceList name="nested-two" threads="6000"/>
    </elementReference>
    
    <!--  -->
    
    <nodeA nodeRef="one" uniqueName="foo"/>
    
    <nodeB id="one" nodeRef="three" value="100" />
    
    <nodeB id="two" nodeRef="three" value="200" />
    
    <nodeC id="three" name="ford" />
    
    <!--  default config tests -->
    
    <defaultSingleton port="5678"/>
    
    <defaultFactory id="two"> 
        <hostname>ibm.com</hostname>
    </defaultFactory>
    
    <!-- variable change tests -->
    
    <variable name="hostname" value="localhost" />
    
    <variableFactory id="one" host="${hostname}" port="1234"/>
    
    <variableFactory id="two" port="5678" />
    
    <!--  update order tests -->
    
    <test.config.order.a id="a" name="a">
       <test.config.order.b id="b" name="b">
          <test.config.order.c id="c" name="c">
             <test.config.order.d ref="d"/>
          </test.config.order.c>
       </test.config.order.b>       
    </test.config.order.a>
    
    <test.config.order.d id="d" name="d">
       <test.config.order.e ref="e"/>
    </test.config.order.d>
    
    <test.config.order.e id="e" name="e"/>
    
    <test.config.plugin id="plugin1" name="plugin1" />
    <configPlugin id="plugin2" name="plugin2" inject="true" /> 
</server>
