/**
 * WARNING!  THIS FILE IS AUTOMATICALLY GENERATED!  DO NOT MODIFY IT!
 * Generated on Wed Mar 08 13:02:09 EST 2017
 */

package wlp.lib.extract;

public class SelfExtractMessages extends java.util.ListResourceBundle
{
   public Object[][] getContents() {
       return resources;
   }
   private final static Object[][] resources= {
      { "ERROR_EXECUTING_COMMAND", "There was an error running the command: {0}  The command returned with exit code {1} and error message: {2}" },
      { "ERROR_INVALID_EXTATTR_PARMS", "The parameters {0} are not valid for the extattr command.  Valid parameters for the extattr command are: [+alps] [-alps]" },
      { "ERROR_UNABLE_TO_GET_UMASK", "Unable to retrieve the umask setting using command: {0}" },
      { "ERROR_UNABLE_TO_LOCATE_COMMAND_EXE", "Unable to locate the {0} executable after checking the following locations: {1}" },
      { "ERROR_UNABLE_TO_SET_EXECUTE_PERMISSIONS", "Unable to set the execute permission on the following files: {0}" },
      { "ERROR_UNABLE_TO_SET_EXT_ATTR", "Unable to set the extended attributes {0} on the following files: {1}" },
      { "UNABLE_TO_ATTACH_AGENT", "The Liberty Java agent could not be attached. This server will run, but it cannot perform functions that require the Java agent, such as monitoring or tracing. Exception: {0}" },
      { "UNABLE_TO_FIND_JAVA_AGENT", "The Liberty Java agent could not be located. This server will run, but it cannot perform functions that require the Java agent, such as monitoring or tracing." },
      { "UNABLE_TO_FIND_PID", "Failed to obtain Process ID of the java -jar process. Unable to delete temporary extraction directory {1} until you manually end the java -jar process." },
      { "UNABLE_TO_FIND_TOOLS_JAR", "The Liberty Java agent could not be attached because this server uses a JRE rather than a Java SDK. This server will run, but it cannot perform functions that require the Java agent, such as monitoring or tracing." },
      { "addOnNeedsIFixes", "The product installation at {0} has been extended. The following fixes must be reapplied: {1}.  " },
      { "addonFeatures", "This product addon {0} contains the following features: {1}." },
      { "addonsInstalled", "The product installation at {0} has the following addons installed: {1}." },
      { "addonsNeedsFix", "The product installation at {0} has had fixes applied to it that are not included in the product addon {1}. Those fixes need to be reapplied since the product addon does not include those fixes. The affected features are: {2}" },
      { "allFeaturesAlreadyPresent", "Product addon {0} does not need to be installed. The specified product installation at {2} already has all the features of the addon: {1}." },
      { "archiveContainsNoLicense", "This archive file does not contain a license." },
      { "badFixInstaller", "Internal error, bad fix installer {0}. Unable to apply fix." },
      { "chmodError", "Could not modify script permissions: {0}." },
      { "couldNotFindLiberty", "Could not find directory {0}." },
      { "downloadFileError", "Failed to download remote file from {0} to {1}. " },
      { "downloadingBeginNotice", "Now downloading external dependencies - additional information is available if using the {0} option." },
      { "downloadingFileNotice", "Downloading remote file from {0} to {1}. " },
      { "exception.reading.manifest", "An exception occurred while reading the manifest file {0}.  Exception: {1}" },
      { "externalDepsInstruction", "This package has dependencies on the following external libraries: {0}" },
      { "externalDepsPrompt", "Would you like to automatically download these dependencies? Select {0} Yes (default), or {1} No: " },
      { "extractDefault", "The default target directory is {0}" },
      { "extractDirectory", "Extracting files to {0}" },
      { "extractDirectoryError", "Failed to create directory: {0}" },
      { "extractDirectoryExists", "Directory already exists: {0}" },
      { "extractFileError", "Failed to extract {0}" },
      { "extractFileExists", "The file already exists: {0}" },
      { "extractInstruction", "Enter directory for product files or leave blank to accept the default value." },
      { "extractLicenseInstruction", "Enter directory for license files or leave blank to accept the default value." },
      { "extractLicenseSuccess", "Successfully applied license files." },
      { "extractPrompt", "Target directory for product files?" },
      { "extractSuccess", "Successfully extracted all product files." },
      { "featuresInstalled", "The product installation at {0} supports the following features: {1}." },
      { "fileProcessingException", "The following exception was thrown processing file {0}: {1}" },
      { "helpAcceptLicense", "Automatically indicate acceptance of license terms and conditions." },
      { "helpAgreement", "View license agreement." },
      { "helpDownloadDependencies", "Automatically download any external dependencies." },
      { "helpInformation", "View license information." },
      { "helpInstallLocation", "The absolute or relative location of the Liberty profile install directory." },
      { "helpMakeBackups", "Before running this tool, you might need to back up some files. Please follow the instructions given in the ''Directions to apply fix'' section of the readme.txt file." },
      { "helpSupressInfo", "The only messages output from the JAR file will be error messages or confirmation that patching has completed." },
      { "helpVerbose", "Display detailed information during archive extraction." },
      { "ifixutils.unable.to.create.parser", "An error occurred when reading the iFix information for the current installation. The exception message is: {0}." },
      { "ifixutils.unable.to.read.file", "An exception occurred when reading the file {0}. The exception message is: {1}." },
      { "inputException", "Exception processing input: {0}" },
      { "installLocation", "install location" },
      { "invalidEdition", "The specified product installation is {0} edition and this product addon only applies to the {1} editions." },
      { "invalidFixInstaller", "Internal error detected executing fix installer : {0}. Unable to apply fix." },
      { "invalidFixManifest", "Internal error detected processing fix manifest data {0} : {1}. Unable to apply fix." },
      { "invalidInstall", "The directory {0} is not a valid Liberty install directory." },
      { "invalidInstallType", "The specified product installation was installed using IBM Installation Manager, please use IBM Installation Manager to install any product addons." },
      { "invalidLicense", "The specified product installation has an {0} license and this product addon is for a product with license {1}." },
      { "invalidMetaDataFile", "Internal error detected processing fix metadata : {0}. Unable to apply fix." },
      { "invalidOption", "The option {0} is not recognized." },
      { "invalidPatch", "Could not read contents of fix. Aborting fix." },
      { "invalidPatchWithFix", "Could not read contents of fix {0}. Aborting fix." },
      { "invalidVersion", "The specified product installation is at version {0} and this product addon only applies to version {1}." },
      { "licenseAccepted", "The {0} argument was found. This indicates that you have accepted the terms of the license agreement." },
      { "licenseNotFound", "Failed to find license agreement files." },
      { "licenseOptionDescription", "By choosing the \"I Agree\" option below, you agree to the terms of the license agreement and non-IBM terms, if applicable. If you do not agree, select \"I do not Agree\"." },
      { "licensePrompt", "Select {0} I Agree, or {1} I do not Agree: " },
      { "licenseStatement", "Before you can use, extract, or install {0}, you must accept the terms of {1} and additional license information. Please read the following license agreements carefully." },
      { "licenseeAcknowledges", "Licensee acknowledges and agrees that all code (including features, functions or other software downloads) downloaded by Licensee in connection herewith    (the \"Code\") will only be used with a licensed version of the IBM WebSphere   Application Server Liberty program (the \"Program\"). Licensee also acknowledgesand agrees that use of the Code is subject to the terms of the license        agreements that govern the use of the Program (e.g., International Program    License Agreement, International License Agreement for Non-Warranted Programs,International License Agreement for Evaluation of Programs, International     License Agreement for Early Release of Programs), including, if applicable,   any License Information." },
      { "missingFixInstallerHeader", "Internal error detected missing fix header {0}. Unable to apply fix." },
      { "missingRequiredFeatures", "Unable to install product addon {0}. The specified product installation at {2} is missing required features: {1}. " },
      { "noRestoreNeeded", "Although the fix was not successfully applied you do not need to restore or delete any files." },
      { "noRestoreNeededWithFix", "Although the fix {1} was not successfully applied you do not need to restore or delete any files." },
      { "noWriteAccess", "Could not find or create directory {0}. Aborting fix." },
      { "noWriteAccessWithFix", "Could not find or create directory {0}. Aborting installation of fix {1}." },
      { "options", "Options" },
      { "patchFailed", "The fix could not be applied successfully." },
      { "patchingNotApplicable", "None of the features patched by the fix are present in the Liberty install directory at {0}." },
      { "patchingNotApplicableNoChange", "No content has been extracted because there are no matching features in the runtime {0}" },
      { "patchingNotApplicableWithFix", "None of the features patched by fix {1} are present in the Liberty install directory at {0}." },
      { "patchingNotNeeded", "Fix has already been applied to the Liberty install directory at {0}." },
      { "patchingNotNeededWithFix", "Fix {1} has already been applied to the Liberty install directory at {0}." },
      { "patchingStarted", "Applying fix to Liberty install directory at {0} now." },
      { "patchingStartedWithFix", "Applying fix {1} to Liberty install directory at {0} now." },
      { "patchingSuccessful", "Fix has been applied successfully." },
      { "patchingSuccessfulWithFix", "Fix {1} has been applied successfully." },
      { "promptAgreement", "Press Enter to display the license terms now, or ''x'' to skip." },
      { "promptInfo", "Press Enter to display additional license information now, or ''x'' to skip." },
      { "readDepsError", "Failed reading the external dependencies metadata file, exception {0}" },
      { "replacingFile", "Replacing file at ''{0}''." },
      { "restoreBackupsNeeded", "The fix was not successfully applied and you need to restore the previous Liberty installation. Follow the instructions in the ''Directions to remove fix'' section of the readme.txt file. Note that some files you are asked to delete in those instructions might not have been created." },
      { "restoreBackupsNeededWithFix", "The fix {1} was not successfully applied and you need to restore the previous Liberty installation. Follow the instructions in the ''Directions to remove fix'' section of the readme.txt file. Note that some files you are asked to delete in those instructions might not have been created." },
      { "showAgreement", "The license agreement is separately viewable using the {0} option. " },
      { "showInformation", "Additional license information is separately viewable using the {0} option." },
      { "targetUserDirectory", "The target user directory is {0}" },
      { "unableToCreateFixLog", "Unable to create fix installation log file {0} due to {1}. Unable to apply fix. " },
      { "unableToUpdateFingerprint", "Unable to update service fingerprint due to {0}, fix has been applied, please use --clean when starting the server." },
      { "usage", "Usage" }
   };
}
