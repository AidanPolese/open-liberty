/**
 * WARNING!  THIS FILE IS AUTOMATICALLY GENERATED!  DO NOT MODIFY IT!
 * Generated on Wed Mar 08 13:02:37 EST 2017
 */

package com.ibm.ws.security.utility.resources;

public class UtilityMessages extends java.util.ListResourceBundle
{
   public Object[][] getContents() {
       return resources;
   }
   private final static Object[][] resources= {
      { "createLTPAKeys.abort", "Aborting LTPA key file creation:" },
      { "createLTPAKeys.createdFile", "Created LTPA keys file: {0}\nInclude the following configuration to your server.xml\n{1}\n" },
      { "createLTPAKeys.fileExists", "The {0} file already exists.  Unable to create a LTPA keys file in that location." },
      { "days", "days" },
      { "encode.enterText", "Enter text:" },
      { "encode.entriesDidNotMatch", "Entries did not match." },
      { "encode.option-custom.encryption", "\n\tThe custom password encryption is also available." },
      { "encode.option-desc.custom.description", "\n\tThe description of {0} is as follows:\n\t" },
      { "encode.option-desc.custom.feature", "\n\tThe feature name of {0} is as follows:\n\t" },
      { "encode.readError", "Error reading in text." },
      { "encode.reenterText", "Re-enter text:" },
      { "error", "Error: {0}" },
      { "error.inputConsoleNotAvailable", "Input console is not available." },
      { "error.missingIO", "Error, missing I/O device: {0}." },
      { "exclusiveArg", "The {0} argument or the {1} argument must be specified, but not both." },
      { "file.exists", "The {0} keystore file already exists.  Unable to create a keystore file in that location." },
      { "file.requiredDirNotCreated", "Could not create required directory structure for {0}" },
      { "fileUtility.failedDirCreate", "Failed to create directory {0}" },
      { "insufficientArgs", "Insufficient arguments." },
      { "invalidArg", "Invalid argument {0}." },
      { "missingArg", "Missing argument {0}." },
      { "missingArg2", "Either the {0} argument or the {1} argument must be provided." },
      { "missingValue", "Missing value for argument {0}." },
      { "name", "name" },
      { "no.custom.encyption", "The custom password encryption is not detected." },
      { "password.enterText", "Enter password:" },
      { "password.entriesDidNotMatch", "Passwords did not match." },
      { "password.readError", "Error reading in password." },
      { "password.reenterText", "Re-enter password:" },
      { "serverNotFound", "Specified server {0} could not be found at location {1}" },
      { "sslCert.abort", "Aborting certificate creation:" },
      { "sslCert.clientNotFound", "Specified client {0} could not be found at location {1}" },
      { "sslCert.clientXML", "Created SSL certificate for client {0}. The certificate is created with {1} as the SubjectDN.\n\nAdd the following lines to the client.xml to enable SSL:" },
      { "sslCert.createFailed", "Unable to create default SSL certificate:\n{0}" },
      { "sslCert.createKeyStore", "Creating keystore {0}\n" },
      { "sslCert.errorEncodePassword", "Error encoding password (certificate not created):\n{0}" },
      { "sslCert.oneType", "The {0} and {1} arguments can not be specified at the same time." },
      { "sslCert.serverXML", "Created SSL certificate for server {0}. The certificate is created with {1} as the SubjectDN.\n\nAdd the following lines to the server.xml to enable SSL:" },
      { "task.unknown", "Unknown task: {0}" },
      { "tooManyArgs", "Too many arguments." },
      { "usage", "Usage: {0}" }
   };
}
