/*
 * IBM Confidential
 *
 * OCO Source Materials
 *
 * WLP Copyright IBM Corp. 2014
 *
 * The source code for this program is not published or otherwise divested 
 * of its trade secrets, irrespective of what has been deposited with the 
 * U.S. Copyright Office.
 */
package com.ibm.ws.jdbc.osgi;

import java.sql.BatchUpdateException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.Executor;

import org.osgi.framework.Version;

/**
 * Interface used to proxy method calls to external packages which may require
 * a higher java version.
 */
public interface JDBCRuntimeVersion {

    public static final String VERSION = "version";
    public static final Version VERSION_4_0 = new Version(4, 0, 0);
    public static final Version VERSION_4_1 = new Version(4, 1, 0);
    public static final Version VERSION_4_2 = new Version(4, 2, 0);
    
    public Version getVersion();

    /***          JDBC 4.1 Methods           ***/
    public void doSetSchema(Connection sqlConn, String schema) throws SQLException;

    public String doGetSchema(Connection sqlConn) throws SQLException;

    public void doAbort(Connection sqlConn, Executor ex) throws SQLException;
    
    public void doSetNetworkTimeout(Connection sqlConn, Executor ex, int millis) throws SQLException;

    public int doGetNetworkTimeout(Connection sqlConn) throws SQLException;
    
    public ResultSet doGetPseudoColumns(DatabaseMetaData md, String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException;
    
    public boolean doGeneratedKeyAlwaysReturned(DatabaseMetaData md) throws SQLException;
    
    public <T> T doGetObject(CallableStatement cstmt, int parameterIndex, Class<T> type) throws SQLException;
    
    public <T> T doGetObject(CallableStatement cstmt, String parameterName, Class<T> type) throws SQLException;
    
    public <T> T doGetObject(ResultSet rs, int columnIndex, Class<T> type) throws SQLException;
    
    public <T> T doGetObject(ResultSet rs, String columnLabel, Class<T> type) throws SQLException;
    
    
    /***          JDBC 4.2 Methods           ***/
    public long getLargeUpdateCount(Statement stmt) throws SQLException;
    
    public void setLargeMaxRows(Statement stmt, long max) throws SQLException;
    
    public long getLargeMaxRows(Statement stmt) throws SQLException;
    
    public long[] executeLargeBatch(Statement stmt) throws SQLException;
    
    public long executeLargeUpdate(Statement stmt, String sql) throws SQLException;
    
    public long executeLargeUpdate(Statement stmt, String sql, int autoGeneratedKeys) throws SQLException;
    
    public long executeLargeUpdate(Statement stmt, String sql, int[] columnIndexes) throws SQLException;
    
    public long executeLargeUpdate(Statement stmt, String sql, String[] columnNames) throws SQLException;
    
    public boolean supportsRefCursors(DatabaseMetaData md) throws SQLException;
    
    public long getMaxLogicalLobSize(DatabaseMetaData md) throws SQLException;

    public BatchUpdateException newBatchUpdateException(BatchUpdateException copyFrom, String newMessage);

    public  void registerOutputParameter(CallableStatement cstmt, int parameterIndex, Object sqlType) throws SQLException;
    
    public void registerOutputParameter(CallableStatement cstmt, int parameterIndex, Object sqlType, int scale) throws SQLException;
    
    public void registerOutputParameter(CallableStatement cstmt, int parameterIndex, Object sqlType, String typeName) throws SQLException;
    
    public void registerOutputParameter(CallableStatement cstmt, String parameterName, Object sqlType) throws SQLException;
    
    public void registerOutputParameter(CallableStatement cstmt, String parameterName, Object sqlType, int scale) throws SQLException;
    
    public void registerOutputParameter(CallableStatement cstmt, String parameterName, Object sqlType, String typeName) throws SQLException;
    
    public void setObject(CallableStatement cstmt, String parameterName, Object x, Object targetSqlType) throws SQLException;
    
    public void setObject(CallableStatement cstmt, String parameterName, Object x, Object tragetSqlType, int scaleOrLength) throws SQLException;
    
    public long executeLargeUpdate(PreparedStatement pstmt) throws SQLException;
    
    public void setObject(PreparedStatement pstmt, int parameterIndex, Object x, Object targetSqlType) throws SQLException;
    
    public long setObject(PreparedStatement pstmt, int parameterIndex, Object x, Object targetSqlType, int scaleOrLength) throws SQLException;
    
    public void updateObject(ResultSet rs, int columnIndex, Object x, Object targetSqlType) throws SQLException;
    
    public void updateObject(ResultSet rs, int columnIndex, Object x, Object targetSqlType, int scaleOrLength) throws SQLException;
    
    public void updateObject(ResultSet rs, String columnLabel, Object x, Object targetSqlType) throws SQLException;
    
    public void updateObject(ResultSet rs, String columnLabel, Object x, Object targetSqlType, int scaleOrLength) throws SQLException;
                              
}
