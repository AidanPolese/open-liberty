/*******************************************************************************
 * Copyright (c) 2017 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
/*
 * Master Gradle initialization script
 *
 * Depends on bnd_* values from gradle.properties.
 */

def getGitBranch() {
  def branchName = System.env.BRANCH_NAME ?: gitBranch()
  if (branchName == '' || branchName == 'HEAD') {
    // Default to master if something went wrong
    branchName = 'master'
  }
  return branchName
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

 
def loadBuildProps() {

  // Property for git branch
  Properties props = new Properties()
  def branchName = getGitBranch()
  props.setProperty('bGitBranch', branchName)

  // Property for Artifactory matrix parameters
  ext.matrixParams = ";GIT_BRANCH=master;GIT_FEATURE_BRANCH=${branchName}"
  props.setProperty('matrixParams', matrixParams)
  
  File usrHomeProps = file(System.properties['user.home'] + '/gradle.startup.properties') 
  if (!usrHomeProps.exists()) {
    if (System.properties['build.properties.path']!=null) {
	  usrHomeProps = file(System.properties['build.properties.path']);
	}
  }
  if (usrHomeProps.exists()) {    
    usrHomeProps.withInputStream { props.load(it) }    
    props.each {      
      props.setProperty(it.key, it.value)      
      }
    }
  
  def fetchRepoPublic = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublic;releaseUrl=https://repo.maven.apache.org/maven2/;index=${build}/oss_dependencies.maven')
  def fetchRepoIBM = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemoteIBM;releaseUrl=http://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/wasliberty-open-liberty/;index=${build}/oss_ibm.maven')
  def fetchRepoIBMJava = ('error') //Not yet supported to not have this set via gradle.startup.properties
  
  if (usrHomeProps.exists() && !props.getProperty('artifactory.force.external.repo')) {    
	  def repoURL = ('https://' + props.getProperty('artifactory.download.server') + '/artifactory/wasliberty-open-liberty')
	  fetchRepoPublic = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublic;releaseUrl='+ repoURL +';snapshotUrl='+ repoURL +';index=${build}/oss_dependencies.maven')
	  fetchRepoIBMJava = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemotePublic;releaseUrl='+ repoURL +';snapshotUrl='+ repoURL +';index=${build}/ibm_java.maven')
      fetchRepoIBM = ('aQute.bnd.repository.maven.provider.MavenBndRepository;name = RemoteIBM;releaseUrl='+ repoURL +';snapshotUrl='+ repoURL +';index=${build}/oss_ibm.maven')
  } 
  
  props.setProperty('fetch.oss.repository', fetchRepoPublic)
  props.setProperty('fetch.oss.ibm.repository', fetchRepoIBM)
  props.setProperty('fetch.ibm.java.repository', fetchRepoIBMJava)
    
  // generated.properties is used to pass build-time variables from Gradle -> Bnd in cnf/build.bnd    
  File propsFile = new File('generated.properties')    
  props.store(propsFile.newWriter(), null)
}

loadBuildProps()

/* Clean repository so multi-branch development doesn't publish conflicting versions */
if (repoCleanNeeded()) {
  // Clean local maven repositories
  cleanDir(new File("${rootDir}/cnf/release"))
  cleanDir(new File("${rootDir}/cnf/local"))
  file('release.mvn').delete()
  file('local.mvn').delete()

}

def repoCleanNeeded() {

  def props = new Properties()
  file("generated.properties").withInputStream { props.load(it) }
  // Current branch name
  def branchName = getGitBranch()

  // Git branch name when repoClean was last run
  def initBranch = props.getProperty("bGitBranch")

  if (branchName != initBranch) {
    return true
  }
  return false
}

def cleanDir(File f) {
  f.eachFile { file ->
    if (file.isDirectory()) { file.deleteDir() }
    else if (file.name != ".gitignore" && file.exists()) { file.delete() }
  }
}

/* Add bnd gradle plugin as a script dependency */
buildscript {
  repositories {
    // mavenCentral()
    maven {
      url uri(bnd_repourl)
    }
  }
  dependencies {
    classpath bnd_plugin
  }

  /* Since the files in the repository change with each build, we need to recheck for changes */
  configurations.classpath {
    resolutionStrategy {
      cacheChangingModulesFor 30, 'minutes'
      cacheDynamicVersionsFor 30, 'minutes'
    }
  }
  dependencies {
    components {
      all { ComponentMetadataDetails details ->
        details.changing = true
      }
    }
  }

  /* Pass bnd gradle plugin classpath to rootProject once created */
  def bndPlugin = files(configurations.classpath.files)
  gradle.rootProject { rootProject ->
    rootProject.ext.bndPlugin = bndPlugin
  }
}

/* Initialize the bnd workspace */
import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants

Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)
def workspace = new Workspace(rootDir, bnd_cnf).setOffline(startParameter.offline)

/* Add cnf project to the graph */
include bnd_cnf

/* Start with the declared build project name */
def defaultProjectName = bnd_build

/* If in a subproject, use the subproject name */
for (def currentDir = startParameter.currentDir; currentDir != rootDir; currentDir = currentDir.parentFile) {
  defaultProjectName = currentDir.name
}

/* Build a set of project names we need to include from the specified tasks */
def projectNames = startParameter.taskNames.collect { taskName ->
  def elements = taskName.split(':')
  switch (elements.length) {
    case 1:
      return defaultProjectName
    case 2:
      return elements[0].empty ? bnd_build : elements[0]
    default:
      return elements[0].empty ? elements[1] : elements[0]
  }
}.toSet()

/* Include the default project name if in a subproject or no tasks specified */
if ((startParameter.currentDir != rootDir) || projectNames.empty) {
  projectNames += defaultProjectName
}

/* If bnd_build used but declared empty, add all non-private folders of rootDir */
if (projectNames.remove('')) {
  rootDir.eachDir {
    def projectName = it.name
    if (!projectName.startsWith('.') && file(projectName + "/build.gradle").exists()) {
      projectNames += projectName
    }
  }
}

/* Add each project and its dependencies to the graph */
projectNames.each { projectName ->
  include projectName
  def project = getBndProject(workspace, projectName)
  project?.getDependson()*.getName().each {
    include it
  }
}

/* Get the bnd project for the specified project name */
def getBndProject(Workspace workspace, String projectName) {
  def project = workspace.getProject(projectName)
  if (project == null) {
    return null
  }
  project.prepare()
  if (project.isValid()) {
    return project
  }

  project.getInfo(workspace, "${rootDir} :")
  def errorCount = 0
  project.getWarnings().each {
    println "Warning: ${it}"
  }
  project.getErrors().each {
    println "Error  : ${it}"
    errorCount++
  }
  if (!project.isOk()) {
    def str = 'even though no errors were reported'
    if (errorCount == 1) {
      str = 'one error was reported'
    } else if (errorCount > 1) {
      str = "${errorCount} errors were reported"
    }
    throw new GradleException("Project ${rootDir}/${projectName} is invalid, ${str}")
  }
  throw new GradleException("Project ${rootDir}/${projectName} is not a valid bnd project")
}
