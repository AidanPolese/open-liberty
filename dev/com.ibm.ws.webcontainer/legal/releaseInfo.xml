<?xml charset="UTF-8" version="1.0"?>
<releaseInfo project="com.ibm.ws.webcontainer">
  <originbase release="WASX" fe="SERV1" level="ss1215.01" components="WAS.webcontainer"/>

  <notes>
<![CDATA[
          Difficult to pull Liberty changes into impl classes for com.ibm.ws.webcontainer.webapp.WebApp & com.ibm.ws.webcontainer.webapp.WebAppConfiguration
as other API classes call methods directly and don't use the impl.

Overrides to sample classes (imported from Alpine):

        com.ibm.ws.webcontainer.osgi.osgi.ChildFirstClassLoader
            deleted since it has been obviated by the Class Loading Service



Overrides to core webcontainer classes:

        com.ibm.websphere.servlet.error.ServletErrorReport
                getDebugMessageAsHTML method added for PD work (could be common?)

        com.ibm.websphere.servlet.response.IResponse
                return type for getOutputStream changed; several methods added - all related to channel differences
        com.ibm.websphere.servlet.response.StoredResponse
                changed package name for WsByteBuffer - will eventually be common when liberty cfw is in tWAS

        com.ibm.ws.app.framework.webcontainer.internal
                (no equivalent in tWAS)
                this package should be removed once app czar takes over app install - unless
                we decide to keep the 'slim' version as a default

        com.ibm.ws.container.ErrorPage
                no-parm ctor added to support liberty web.xml parsing - could be harmlessly added to common code?

        com.ibm.ws.webcontainer.WCZoneHandler
                (no equivalent in tWAS) - for liberty request zone support
        com.ibm.ws.webcontainer.WebContainer
                handleRequest liberty-specific WCZone is started and ended in this method... is WCZone still valid?
                getSessionContext could be reverted to original?
                handleRequest finally block - use tWAS version (ie enable ARD code)
                addExtensionFactory - if app init has already started, tWAS adds new factory to 'postInitExtensionFactories' List, lWAS iterates through webApps and add the factory to each one

        com.ibm.ws.webcontainer.collaborator.CollaboratorService
                (no equivalent in tWAS) - defines service interface that collaborator providers can register with - could be moved to sample if not made common?
        com.ibm.ws.webcontainer.collaborator.ConnectionHandleCollaborator
            null/default impl to prevent failures when common code calls it and no 'real' impl has registered
        com.ibm.ws.webcontainer.collaborator.WebAppNameSpaceCollaboratorImpl
                ditto
        com.ibm.ws.webcontainer.collaborator.WebAppSecurityCollaboratorImpl
                ditto
        com.ibm.ws.webcontainer.collaborator.WebAppTransactionCollaboratorImpl
                ditto

        com.ibm.ws.webcontainer.servlet.FileServletWrapper
                writeResponseToClient - lWAS: ((SRTOutputStream) os).write(channel);    tWAS: uses FCWsByteBufferImpl to write output
                - could put the liberty method into sample class?
        com.ibm.ws.webcontainer.servlet.ServletWrapper
                - new debug message - make common

        com.ibm.ws.webcontainer.session.IHttpSessionContext (interface)
                getWASSessionConfig changed to return SessionManagerConfig from session_3.0 instead of the webcontainer SessionManagerConfigBase
                - could add an extending i/f in sample?
        com.ibm.ws.webcontainer.session.SessionApplicationParametersWeb
                (no equivalent in tWAS) - extends tWAS session class

        com.ibm.ws.webcontainer.session.impl package - to cope with session service being outside webcontainer

        com.ibm.ws.webcontainer.srt.SRTInputStream
                Alpine switched from HttpInputStream to SRTInputStream to avoid IP issues
        com.ibm.ws.webcontainer.srt.SRTOutputStream
                WsByteBuffer diff package, add write method using FileChannel
        com.ibm.com.ibm.ws.webcontainer.srt.SRTServletRequest
                security context not used, multipart processing commented out
                HttpInputStream->SRTInputStream
                closeResponseOutput processing is different
        com.ibm.com.ibm.ws.webcontainer.srt.SRTServletResponse
                ServletOutputStream instead of WSServletOutputStream
                getHeader not implemented - causes a lot of code commenting

        com.ibm.ws.webcontainer.util.ApplicationErrorUtils
                (no equivalent in tWAS) - added for (customer) problem determination - make common?

        com.ibm.ws.webcontainer.webapp.ResourceRef
                (no equivalent in tWAS) - holds data for resource ref parsed from web.xml - move to com.ibm.ws.webcontainer.osgi.container.config package?
        com.ibm.ws.webcontainer.webapp.WebApp
                some fields change from private -> protected - for access by extending class?  - could be made common?
                several fields & methods added to support delayed start of webapp
                sendError - added debug messages (could be common)
                liberty has no modulemetadata object being created/set on WebAppConfiguration yet
                getTempDirectory - liberty should just override method in sample WebApp?
                resource injection support commented out
                ajavx.annotations commented out - need prereq from WAS endorsed_apis dir
        com.ibm.ws.webcontainer.webapp.WebAppConfiguration
                resource ref stuff added - could be moved to sample class?
                SessionManagerConfig used instead of SessionManagerConfigBase (why?)
        com.ibm.ws.wscontainer.DeployedModule
                empty class provided for extension, as original has dependencies on runtime DeployedModule which imports wtp classes

        com.ibm.wsspi.webcontainer.collaborator.WebAppInvocationCollaborator
                simplified/combined interface; could make common or revert

        com.ibm.wsspi.webcontainer.util.BufferedWriter
                finish method overwritten for different channel behaviour (?) - could put overide in sample?
        com.ibm.wsspi.webcontainer.util.ByteBufferOutputStream
                different bytebuffer package name
        com.ibm.wsspi.webcontainer.util.ByteBufferWriter
                different bytebuffer package name
]]>
  </notes>
</releaseInfo>