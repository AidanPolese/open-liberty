<?xml version="1.0"?>
<!--
    Copyright (c) 2017 IBM Corporation and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
        IBM Corporation - initial API and implementation
 -->

<!--Downloads binaries, checks nls props for updates, and builds the ossc file-->
<project name="EclipseLink Setup" default="build">
    <import file="../ant_build/public_imports/internal_imports/buildtasks.xml" />
    <import file="../ant_build/public_imports/internal_imports/standard_macros.xml" />

    <!-- Basic build structure properties and eclipselink binary version to download -->
    <property file="build.properties" />

    <!-- The EclipseLink bundles brought in, used for regex matching -->
    <property name="binary.core.start" value="org.eclipse.persistence.core" />
    <property name="binary.jpa.start" value="org.eclipse.persistence.jpa" />
    <property name="binary.jpql.start" value="org.eclipse.persistence.jpa.jpql" />
	<property name="binary.modelgen.start" value="org.eclipse.persistence.jpa.modelgen" />
    <property name="binary.asm.start" value="org.eclipse.persistence.asm" />
    <property name="binary.antlr.start" value="org.eclipse.persistence.antlr" />

    <target name="build" depends="clean, download, checkEclipseLinkMessages, process-binaries, generate-ossc" />

    <target name="clean">
        <delete includeEmptyDirs="true" failonerror="false">
            <fileset dir="${build.dir}" />
        </delete>
    </target>

	<target name="download" depends="local-download, ftp-download"/>

    <target name="local-download" if="local.build">
        <!-- Make sure required properties are being passed -->
        <fail message="Please provide the EclipseLink plugins directory where the expected JAR files are located" unless="plugin.dir"/>
        <property name="remote.location" value="LOCAL_BUILD" />
    </target>

    <target name="check-arguments">
        <fail message="Missing argument { git.hash }. Provide the GIT hash value for the binaries" unless="git.hash"/>
        <fail message="Missing argument { ftp.id }. Provide the user id for ftp login" unless="ftp.id"/>
        <fail message="Missing argument { ftp.password }. Provide the password for ftp login" unless="ftp.password"/>
        <fail message="Missing argument { ftp.server }. Provide the ftp location" unless="ftp.server"/>
        <fail message="Missing argument { ftp.root }. Provide the root directory at the ftp location" unless="ftp.root"/>
    </target>

    <!-- Downloads the artifacts to a local directory in ${build.dir} -->
    <target name="ftp-download" depends="check-arguments" unless="local.build">
    	
        <!-- FTP Properties-->
        <property name="ftp.zip.dir" value="${ftp.root}/${build.type}" />
        <property name="ftp.download.dir" value="${build.dir}/${eclipselink.version}-${build.type}" />
        <!-- Set the download directory other targets use to be the ftp directory-->
        <property name="plugin.dir" value="${ftp.download.dir}" />
        <property name="remote.location" value="ftp://${ftp.server}/${ftp.zip.dir}" />

        <!-- Changes the expected FTP zip file name depending on ${build.type} -->
        <condition property="ftp.zip.file" value="*${git.hash}*.zip" else="${eclipselink.version}*.zip">
            <equals arg1="${build.type}" arg2="SNAPSHOT" />
        </condition>

        <!-- FTP download the artifacts -->
        <remoteGet server="${ftp.server}" userid="${ftp.id}" password="${ftp.password}" name="${ftp.zip.file}" remotedir="${ftp.zip.dir}" dir="${ftp.download.dir}" />

        <!-- Unzip the artifacts -->
        <unzip dest="${ftp.download.dir}">
            <fileset dir="${ftp.download.dir}">
                <include name="*.zip" />
            </fileset>
        </unzip>
    </target>

    <!-- Check incoming resource bundles in new binaries for changes. Compare the checksum of existing nlsprop files to the binaries resource bundles -->
    <target name="checkEclipseLinkMessages" depends="conversionToolExists" unless="skip.message.check">
        <!-- Build location for existing nlsprops files -->
        <property name="resources.existing.dir" value="${build.dir}/resources.existing" />
        <!-- Build location for the new binary's nlsprops files -->
        <property name="resources.new.dir" value="${build.dir}/resources.new" />

        <!-- Get the location of the downloaded jar so we can check incomming messages and compare against old resources -->
        <pathconvert property="org.eclipse.persistence.core.jar.file">
            <fileset dir="${plugin.dir}" includes="${binary.core.start}*.jar" />
        </pathconvert>

        <!-- Copy (English) existing nlsprop files into a work directory -->
        <copy toDir="${resources.existing.dir}" overwrite="true">
            <fileset dir="${resources.dir}" includes="**/*Resource.nlsprops" />
        </copy>

        <!-- Remove '#[A-Z]+ NON-TRANSLATABLE' string(S) from the existing nlsprop -->
        <!-- g=global (all occurances), m=multiline -->
        <replaceregexp flags="gm">
            <regexp pattern="# [A-Z]+ NON-TRANSLATABLE\n" />
            <substitution expression="" />
            <fileset dir="${resources.existing.dir}" />
        </replaceregexp>

        <!-- Convert resource bundles to .nlsprops files. Write them to the same dir as existing .md5 files for comparison -->
        <java classname="com.ibm.ws.i18n.conversion.tools.ConvertRBtoNLSProps" classpath="../com.ibm.ws.i18n.conversion.tools/build/classes" failonerror="true">
            <arg file="${org.eclipse.persistence.core.jar.file}" />
            <arg file="${resources.new.dir}" />
            <arg value="org/eclipse/persistence/internal/localization/i18n/.*class" />
            <arg value="org/eclipse/persistence/exceptions/i18n/.*class" />
        </java>
        <!-- Explicitly get rid of the Trace nlsprops file as we don't want to translate trace message. -->
        <delete file="${resources.new.dir}/org/eclipse/persistence/internal/localization/i18n/TraceLocalizationResource.nlsprops" />

        <!-- Get checksum for existing nlsprops files -->
        <checksum totalproperty="resource.existing.checksum">
            <fileset dir="${resources.existing.dir}" includes="**/*.nlsprops" />
        </checksum>
        <delete>
            <fileset dir="${resources.existing.dir}" includes="**/*.MD5" />
        </delete>

        <!-- Get checksum for binary nlsprops files -->
        <checksum totalproperty="resource.new.checksum">
            <fileset dir="${resources.new.dir}" includes="**/*.nlsprops" />
        </checksum>
        <delete>
            <fileset dir="${resources.new.dir}" includes="**/*.MD5" />
        </delete>

        <!-- Compare checksums to see if anything has changed -->
        <fail message="The NLS files have changed since the last build - please update the NLS resources and notify the ID team that new translation may be required. To find what changed you need to diff '${resources.new.dir}' to '${resources.dir}'. Set the property '-Dskip.message.check' if you want to skip NLS message processing.">
            <condition>
                <not>
                    <equals arg1="${resource.existing.checksum}" arg2="${resource.new.checksum}" />
                </not>
            </condition>
        </fail>
    </target>

    <!-- Certain build types (like findbugs) do not run the build-prep stage, which means that tools like the ConvertRBtoNLSProps 
            don't get built. For these types of builds, we don't really need to check for new messages - we really only want to check 
            for new messages on normal build/buildLite build types. - so we can skip the check for these other types. -->
    <target name="conversionToolExists">
        <condition property="skip.message.check">
            <not>
                <available classname="com.ibm.ws.i18n.conversion.tools.ConvertRBtoNLSProps" classpath="../com.ibm.ws.i18n.conversion.tools/build/classes" />
            </not>
        </condition>
    </target>

    <!-- Creates the OSSC file. Relies on some properties from "process-binaries" target for jar names, checksum values, and manifest revision value. -->
    <target name="generate-ossc">
        <!-- OSSC file layout controlled by ${ossc.template.file} -->
        <copy file="${ossc.template.file}" tofile="${legal.dir}/ossc.xml" overwrite="true">
            <filterchain>
                <replacetokens>
                    <!-- The eclipselink version binaries were built from -->
                    <token key="VERSION" value="${eclipselink.version}" />
                    <!-- The eclipselink implementation version binaries were built from. Currently comes from ${binary.core.final.jar} manifest. -->
                    <token key="REVISION" value="${eclipselink.revision}" />
                    <!-- Remote location the binary artifacts came from -->
                    <token key="DOWNLOAD_LOCATION" value="${remote.location}" />
                    <!-- Names of the binary jars as they exist in the ${lib.dir}-->
                    <token key="ANTLR_JAR" value="${binary.antlr.final.jar}" />
                    <token key="ASM_JAR" value="${binary.asm.final.jar}" />
                    <token key="CORE_JAR" value="${binary.core.final.jar}" />
                    <token key="JPA_JAR" value="${binary.jpa.final.jar}" />
                    <token key="JPQL_JAR" value="${binary.jpql.final.jar}" />
                	<token key="MODELGEN_JAR" value="${binary.modelgen.final.jar}" />
                    <!-- Checksum values for the binary jars-->
                    <token key="ANTLR_CHECKSUM" value="${antlr.md5}" />
                    <token key="ASM_CHECKSUM" value="${asm.md5}" />
                    <token key="CORE_CHECKSUM" value="${core.md5}" />
                    <token key="JPA_CHECKSUM" value="${jpa.md5}" />
                    <token key="JPQL_CHECKSUM" value="${jpql.md5}" />
                	<token key="MODELGEN_CHECKSUM" value="${modelgen.md5}" />
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <!-- Copies the binary jars from the local download location in ${build.dir} to their location in ${lib.dir}.
	Renames the jars as they move, generates the checksums for ossc, and grabs the revision value from the manifest-->
    <target name="process-binaries">
        <!-- Location that artifacts were downloaded to in ${build.dir}-->
        <property name="binary.download.dir" value="${plugin.dir}" />
        <!-- Location to place the binaries after renaming. This location must be outside ${build.dir} -->
        <property name="binary.final.dir" value="${lib.dir}" />

        <!-- The final name of the bundle after being moved. -->
        <property name="binary.core.final.jar" value="${binary.core.start}.WAS.jar" />
        <property name="binary.jpa.final.jar" value="${binary.jpa.start}.WAS.jar" />
        <property name="binary.jpql.final.jar" value="${binary.jpql.start}.WAS.jar" />
    	<property name="binary.modelgen.final.jar" value="${binary.modelgen.start}.WAS.jar" />
        <property name="binary.asm.final.jar" value="${binary.asm.start}.WAS.jar" />
        <property name="binary.antlr.final.jar" value="${binary.antlr.start}.WAS.jar" />

        <!-- Moving each artifact out of ${build.dir} and renaming -->
        <copy todir="${binary.final.dir}" overwrite="true">
            <fileset id="core" dir="${binary.download.dir}">
                <include name="${binary.core.start}*.jar" />
            </fileset>
            <globmapper from="*" to="${binary.core.final.jar}" />
        </copy>
        <copy todir="${binary.final.dir}" overwrite="true">
            <fileset id="jpa" dir="${binary.download.dir}">
                <include name="${binary.jpa.start}*.jar" />
            </fileset>
            <globmapper from="*" to="${binary.jpa.final.jar}" />
        </copy>
        <copy todir="${binary.final.dir}" overwrite="true">
            <fileset id="jpql" dir="${binary.download.dir}">
                <include name="${binary.jpql.start}*.jar" />
            </fileset>
            <globmapper from="*" to="${binary.jpql.final.jar}" />
        </copy>
    	<copy todir="${binary.final.dir}" overwrite="true">
    	    <fileset id="jpql" dir="${binary.download.dir}">
    	        <include name="${binary.modelgen.start}*.jar" />
    	            </fileset>
    	    <globmapper from="*" to="${binary.modelgen.final.jar}" />
    	</copy>
        <copy todir="${binary.final.dir}" overwrite="true">
            <fileset id="asm" dir="${binary.download.dir}">
                <include name="${binary.asm.start}*.jar" />
            </fileset>
            <globmapper from="*" to="${binary.asm.final.jar}" />
        </copy>
        <copy todir="${binary.final.dir}" overwrite="true">
            <fileset id="antlr" dir="${binary.download.dir}">
                <include name="${binary.antlr.start}*.jar" />
            </fileset>
            <globmapper from="*" to="${binary.antlr.final.jar}" />
        </copy>

        <!-- Generating the checksum for each artifact -->
        <checksum file="${binary.final.dir}/${binary.core.final.jar}" property="core.md5" />
        <checksum file="${binary.final.dir}/${binary.jpa.final.jar}" property="jpa.md5" />
        <checksum file="${binary.final.dir}/${binary.jpql.final.jar}" property="jpql.md5" />
    	<checksum file="${binary.final.dir}/${binary.modelgen.final.jar}" property="modelgen.md5" />
        <checksum file="${binary.final.dir}/${binary.asm.final.jar}" property="asm.md5" />
        <checksum file="${binary.final.dir}/${binary.antlr.final.jar}" property="antlr.md5" />

        <!-- Load the Manifest file from ${binary.core.final.jar} as a representation of the revision value for all binaries -->
        <!-- NOTE: This value will only be loaded in the binary manifests IF the binaries were built with "git.hash" set -->

    	<!-- Run the Eclipselink Version class to get the build properties-->
        <java classname="org.eclipse.persistence.Version" failonerror="true" fork="true" output="${binary.download.dir}/build.properties.tmp">
    	    <classpath>
    	        <pathelement location="${binary.final.dir}/${binary.core.final.jar}"/>
    	        <pathelement path="${java.class.path}"/>
    	    </classpath>
        </java>
    	
    	<!-- Load the Build Version property -->
        <loadfile srcfile="${binary.download.dir}/build.properties.tmp" property="eclipselink.revision">
            <filterchain>
                <tokenfilter>
                    <containsregex pattern="Build Version:\s*(\d*.*)" flags="i"/>
                    <replaceregex pattern="Build Version:\s*(\d*.*)" replace="\1"/>
                    <replaceregex pattern="" replace=""/>
                    <trim/>
                </tokenfilter>
                <striplinebreaks/>
            </filterchain>
        </loadfile>
    </target>
</project>
